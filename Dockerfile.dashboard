# Dashboard Dockerfile with WebSocket support
FROM node:24-alpine

WORKDIR /app

# Install dependencies for real-time features
RUN apk add --no-cache \
    python3 \
    make \
    g++

# Copy package files
COPY dashboard/package*.json ./dashboard/

# Install dependencies
WORKDIR /app/dashboard
RUN npm ci

# Copy dashboard code
COPY dashboard ./

# Build dashboard if needed
RUN if [ -f "webpack.config.js" ]; then npm run build; fi

# Install Socket.io for WebSocket support
RUN npm install socket.io express cors

# Create WebSocket server file
RUN echo 'const express = require("express");\n\
const { createServer } = require("http");\n\
const { Server } = require("socket.io");\n\
const cors = require("cors");\n\
\n\
const app = express();\n\
app.use(cors());\n\
const httpServer = createServer(app);\n\
const io = new Server(httpServer, {\n\
  cors: {\n\
    origin: "*",\n\
    methods: ["GET", "POST"]\n\
  }\n\
});\n\
\n\
// WebSocket connections\n\
io.on("connection", (socket) => {\n\
  console.log("Client connected:", socket.id);\n\
  \n\
  socket.on("subscribe", (room) => {\n\
    socket.join(room);\n\
    console.log(`Client ${socket.id} joined room: ${room}`);\n\
  });\n\
  \n\
  socket.on("disconnect", () => {\n\
    console.log("Client disconnected:", socket.id);\n\
  });\n\
});\n\
\n\
// Start servers\n\
httpServer.listen(3002, () => {\n\
  console.log("WebSocket server running on port 3002");\n\
});\n\
\n\
// Static file server for dashboard\n\
const staticApp = express();\n\
staticApp.use(express.static("./"));\n\
staticApp.listen(3001, () => {\n\
  console.log("Dashboard server running on port 3001");\n\
});\n\
\n\
module.exports = { io };' > server.js

# Expose ports
EXPOSE 3001 3002

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3001/ || exit 1

# Run both servers
CMD ["node", "server.js"]