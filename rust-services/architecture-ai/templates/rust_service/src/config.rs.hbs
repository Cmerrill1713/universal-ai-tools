use serde::{Deserialize, Serialize};
use std::env;
use anyhow::Result;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Config {
    pub server: ServerConfig,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ServerConfig {
    pub port: u16,
    pub host: String,
}

impl Config {
    pub fn from_env() -> Result<Self> {
        Ok(Config {
            server: ServerConfig {
                port: env::var("{{uppercase service_name}}_PORT")
                    .unwrap_or_else(|_| "{{port}}".to_string())
                    .parse()?,
                host: env::var("{{uppercase service_name}}_HOST")
                    .unwrap_or_else(|_| "0.0.0.0".to_string()),
            },
        })
    }
}

impl Default for Config {
    fn default() -> Self {
        Config {
            server: ServerConfig {
                port: {{port}},
                host: "0.0.0.0".to_string(),
            },
        }
    }
}
