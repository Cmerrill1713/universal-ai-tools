name: AI-Powered Code Review

on:
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to analyze'
        required: true
        type: string

env:
  NODE_VERSION: '20'

jobs:
  ai-code-analysis:
    name: AI Code Analysis & Review
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45.0.8
        with:
          files: |
            src/**/*.{ts,tsx,js,jsx}
            electron-frontend/**/*.{ts,tsx,js,jsx}
            rust-services/**/*.rs
            go-services/**/*.go

      - name: Setup Node.js
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          npm ci
          if [ -d "electron-frontend" ]; then
            cd electron-frontend && npm ci
          fi

      - name: Run TypeScript strict mode analysis
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Analyze TypeScript files with strict mode
          echo "üìù Analyzing TypeScript code quality..."

          # Create TypeScript analysis report
          npx tsc --noEmit --strict --skipLibCheck > ts-analysis.log 2>&1 || true

          if [ -d "electron-frontend" ]; then
            cd electron-frontend
            npx tsc --noEmit --strict --skipLibCheck >> ../ts-analysis.log 2>&1 || true
          fi

      - name: Run advanced ESLint analysis
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Run ESLint with comprehensive rules
          npx eslint "src/**/*.{ts,tsx,js,jsx}" \
                     "electron-frontend/src/**/*.{ts,tsx,js,jsx}" \
                     --ext .ts,.tsx,.js,.jsx \
                     --format=json \
                     --output-file=eslint-results.json \
                     --no-error-on-unmatched-pattern || true

      - name: Analyze code complexity
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Install and run complexity analysis
          npm install -g complexity-report

          echo "üßÆ Analyzing code complexity..."

          # Generate complexity report for changed files
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ "$file" =~ \.(ts|tsx|js|jsx)$ ]]; then
              echo "Analyzing: $file"
              cr --format=json "$file" >> complexity-report.json 2>/dev/null || true
            fi
          done

      - name: Generate AI code review
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          cat > ai-code-review.md << 'EOF'
          # ü§ñ AI-Powered Code Review Report

          **Analysis Date:** $(date)  
          **Changed Files:** ${{ steps.changed-files.outputs.all_changed_files_count }}  
          **PR:** #${{ github.event.pull_request.number || github.event.inputs.pr_number }}

          ## üìä Code Quality Analysis

          ### TypeScript Strict Mode
          $(if [ -s ts-analysis.log ]; then echo "‚ö†Ô∏è TypeScript issues detected:"; cat ts-analysis.log | head -20; echo ""; echo "*Additional issues may exist - check full logs*"; else echo "‚úÖ No TypeScript strict mode violations detected"; fi)

          ### ESLint Analysis  
          $(if [ -f eslint-results.json ] && [ -s eslint-results.json ]; then echo "‚ö†Ô∏è ESLint issues detected - review eslint-results.json artifact"; else echo "‚úÖ No ESLint violations detected"; fi)

          ### Code Complexity
          $(if [ -f complexity-report.json ] && [ -s complexity-report.json ]; then echo "üìà Complexity analysis completed - review complexity-report.json artifact"; else echo "üìä No complexity issues detected"; fi)

          ## üéØ Focus Areas for Review

          ### Security Considerations
          - ‚úÖ Check for hardcoded secrets or credentials
          - ‚úÖ Validate input sanitization and XSS prevention
          - ‚úÖ Review authentication and authorization logic
          - ‚úÖ Verify secure configuration practices

          ### Performance Impact
          - üîç Monitor memory usage in Electron components
          - üîç Check for efficient React rendering patterns
          - üîç Validate async/await usage and error handling
          - üîç Review bundle size impact for frontend changes

          ### Code Maintainability
          - üìù Ensure proper TypeScript typing
          - üìù Verify comprehensive error handling
          - üìù Check for adequate test coverage
          - üìù Validate documentation completeness

          ## üöÄ Recommendations

          1. **Address TypeScript Issues**: Resolve any strict mode violations
          2. **Fix ESLint Violations**: Address code quality issues identified
          3. **Optimize Complex Code**: Refactor any high-complexity functions
          4. **Security Review**: Manually review security-sensitive changes
          5. **Test Coverage**: Ensure new code has appropriate tests

          ---
          *This analysis is generated automatically. Manual review is still recommended for complex changes.*
          EOF

      - name: Upload analysis artifacts
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ai-code-analysis-${{ github.sha }}
          path: |
            ai-code-review.md
            ts-analysis.log
            eslint-results.json
            complexity-report.json
          retention-days: 30

      - name: Comment AI review on PR
        if: github.event_name == 'pull_request' && steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            if (fs.existsSync('ai-code-review.md')) {
              const review = fs.readFileSync('ai-code-review.md', 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: review
              });
            }

      - name: Set PR labels based on analysis
        if: github.event_name == 'pull_request' && steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const labels = [];

            // Add labels based on analysis results
            if (fs.existsSync('ts-analysis.log') && fs.statSync('ts-analysis.log').size > 0) {
              labels.push('typescript-issues');
            }

            if (fs.existsSync('eslint-results.json') && fs.statSync('eslint-results.json').size > 0) {
              labels.push('code-quality');
            }

            if (fs.existsSync('complexity-report.json') && fs.statSync('complexity-report.json').size > 0) {
              labels.push('complexity-review');
            }

            // Add frontend label if frontend files changed
            const frontendChanged = '${{ steps.changed-files.outputs.all_changed_files }}'.includes('electron-frontend');
            if (frontendChanged) {
              labels.push('frontend');
            }

            // Add backend label if backend files changed  
            const backendChanged = '${{ steps.changed-files.outputs.all_changed_files }}'.includes('src/') || 
                                 '${{ steps.changed-files.outputs.all_changed_files }}'.includes('rust-services/') ||
                                 '${{ steps.changed-files.outputs.all_changed_files }}'.includes('go-services/');
            if (backendChanged) {
              labels.push('backend');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: labels
              });
            }

  code-quality-gate:
    name: Code Quality Gate
    runs-on: ubuntu-latest
    needs: [ai-code-analysis]
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: ai-code-analysis-${{ github.sha }}
          path: analysis-results/

      - name: Evaluate code quality gate
        run: |
          echo "üö¶ Evaluating code quality gate..."

          quality_score=100
          issues_found=false

          # Check TypeScript issues
          if [ -f "analysis-results/ts-analysis.log" ] && [ -s "analysis-results/ts-analysis.log" ]; then
            echo "‚ö†Ô∏è TypeScript issues detected"
            quality_score=$((quality_score - 20))
            issues_found=true
          fi

          # Check ESLint issues
          if [ -f "analysis-results/eslint-results.json" ] && [ -s "analysis-results/eslint-results.json" ]; then
            echo "‚ö†Ô∏è ESLint issues detected"
            quality_score=$((quality_score - 15))
            issues_found=true
          fi

          echo "üìä Code Quality Score: $quality_score/100"

          if [ "$quality_score" -lt 70 ]; then
            echo "‚ùå Code quality gate FAILED (score: $quality_score < 70)"
            echo "üîß Please address the identified issues before merging"
            exit 1
          else
            echo "‚úÖ Code quality gate PASSED (score: $quality_score >= 70)"
          fi
