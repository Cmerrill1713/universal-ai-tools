name: Test Coverage and CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '20'
  CACHE_NAME: node-modules

jobs:
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20, 22]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Install additional test dependencies
        run: |
          npm install --save-dev supertest @types/supertest jest-html-reporters

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "SUPABASE_URL=http://localhost:54321" >> .env.test
          echo "SUPABASE_ANON_KEY=test-anon-key" >> .env.test
          echo "SUPABASE_SERVICE_KEY=test-service-key" >> .env.test
          echo "JWT_SECRET=test-jwt-secret-for-ci" >> .env.test

      - name: Type checking
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

      - name: Run API tests
        run: npm run test:api
        env:
          NODE_ENV: test

      - name: Run middleware tests
        run: npm run test:middleware
        env:
          NODE_ENV: test

      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test

      - name: Run agent tests
        run: npm run test:agents
        env:
          NODE_ENV: test

      - name: Run database tests
        run: npm run test:database
        env:
          NODE_ENV: test

      - name: Run error handling tests
        run: npm run test:error-handling
        env:
          NODE_ENV: test

      - name: Run performance tests
        run: npm run test:performance
        env:
          NODE_ENV: test

      - name: Generate coverage report
        run: npm run test:coverage:report
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml
            junit.xml

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: test-coverage

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build:prod
        env:
          NODE_ENV: production

      - name: Test build
        run: |
          ls -la dist/
          node -e "console.log('Build test passed')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Run dependency check
        run: |
          npx audit-ci --config audit-ci.json || true

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  notify-status:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test-coverage, build-test, security-scan]
    if: always()

    steps:
      - name: Notify success
        if: needs.test-coverage.result == 'success' && needs.build-test.result == 'success'
        run: |
          echo "✅ All tests passed successfully!"
          echo "Coverage report available in artifacts"

      - name: Notify failure
        if: needs.test-coverage.result == 'failure' || needs.build-test.result == 'failure'
        run: |
          echo "❌ Tests failed!"
          echo "Check the test results for details"
          exit 1
