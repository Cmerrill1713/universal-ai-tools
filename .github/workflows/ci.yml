name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  RUST_VERSION: '1.75'

jobs:
  # Node.js/TypeScript Services
  nodejs-ci:
    name: Node.js CI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd nodejs-api-server
        npm ci
        
    - name: Lint code
      run: |
        cd nodejs-api-server
        npm run lint
        
    - name: Type check
      run: |
        cd nodejs-api-server
        npm run build
        
    - name: Run tests
      run: |
        cd nodejs-api-server
        npm test
        
    - name: Run integration tests
      run: |
        cd nodejs-api-server
        npm run test:integration || true

  # Rust Services
  rust-ci:
    name: Rust CI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build Rust services
      run: |
        cd rust-services
        ./build-all.sh
        
    - name: Test Rust services
      run: |
        cd rust-services
        for service in */; do
          if [ -f "$service/Cargo.toml" ]; then
            echo "Testing $service"
            cd "$service"
            cargo test
            cd ..
          fi
        done

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd nodejs-api-server
        npm ci
        
    - name: Run ESLint
      run: |
        cd nodejs-api-server
        npm run lint -- --format json --output-file eslint-results.json || true
        
    - name: Run Prettier check
      run: |
        cd nodejs-api-server
        npm run format -- --check || true
        
    - name: Upload ESLint results
      uses: actions/upload-artifact@v3
      with:
        name: eslint-results
        path: nodejs-api-server/eslint-results.json

  # Build Verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [nodejs-ci, rust-ci]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
        
    - name: Build everything
      run: |
        # Build Node.js services
        cd nodejs-api-server
        npm ci
        npm run build
        
        # Build Rust services
        cd ../rust-services
        ./build-all.sh
        
    - name: Verify builds
      run: |
        # Check Node.js build
        ls -la nodejs-api-server/dist/
        
        # Check Rust builds
        find rust-services -name "target" -type d -exec ls -la {}/release/ \;

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: universal-ai-tools:test
        cache-from: type=gha
        cache-to: type=gha,mode=max