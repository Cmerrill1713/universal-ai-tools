name: CI Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  # Security Scanning with Gitleaks
  gitleaks-scan:
    name: Security Scan - Gitleaks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml

      - name: Upload Gitleaks results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-ci-results
          path: gitleaks-report.json
          retention-days: 7

  # 1. Code Quality and Linting
  lint-and-format:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: gitleaks-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        run: npm ci

      - name: Install frontend dependencies
        run: cd ui && npm ci

      - name: Check backend code formatting
        run: npm run format:check

      - name: Lint backend code
        run: npm run lint

      - name: Check frontend code formatting
        run: cd ui && npm run lint

      - name: TypeScript type checking - Backend
        run: npm run type-check

      - name: TypeScript type checking - Frontend
        run: cd ui && npx tsc --noEmit

  # 2. Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run security validation
        run: npm run security:check-deps

      - name: Scan for hardcoded secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # 3. Database Migration Testing
  migration-test:
    name: Database Migration Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment variables
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV
          echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
          echo "POSTGRES_DB=test_db" >> $GITHUB_ENV
          echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=testpassword" >> $GITHUB_ENV

      - name: Run migration validation
        run: npm run migrate:validate

      - name: Test database schema creation
        run: |
          # Test that migrations can be applied cleanly
          psql -h localhost -U postgres -d test_db -c "SELECT version();"

  # 4. Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        test-group: [unit, integration, frontend]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install backend dependencies
        run: npm ci

      - name: Install frontend dependencies
        if: matrix.test-group == 'frontend'
        run: cd ui && npm ci

      - name: Install Python dependencies
        run: |
          pip install dspy-ai pytest requests

      - name: Setup test environment
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV
          echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
          echo "POSTGRES_DB=test_db" >> $GITHUB_ENV
          echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=testpassword" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "JWT_SECRET=test-secret-key" >> $GITHUB_ENV
          echo "ENCRYPTION_KEY=test-encryption-key-32-chars-long" >> $GITHUB_ENV

      - name: Run unit tests
        if: matrix.test-group == 'unit'
        run: npm run test:unit

      - name: Run integration tests
        if: matrix.test-group == 'integration'
        run: npm run test:integration

      - name: Run frontend tests
        if: matrix.test-group == 'frontend'
        run: cd ui && npm run test:run

      - name: Upload test coverage
        if: matrix.test-group == 'unit'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 5. Build Validation
  build:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint-and-format, security-scan, gitleaks-scan]
    strategy:
      matrix:
        build-type: [development, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        run: npm ci

      - name: Install frontend dependencies
        run: cd ui && npm ci

      - name: Build backend (development)
        if: matrix.build-type == 'development'
        run: npm run build:dev

      - name: Build backend (production)
        if: matrix.build-type == 'production'
        run: npm run build:prod

      - name: Build frontend
        run: cd ui && npm run build

      - name: Validate production readiness
        if: matrix.build-type == 'production'
        run: npm run validate:production

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.build-type }}
          path: |
            dist/
            ui/dist/
          retention-days: 7

  # 6. Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build]
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'performance')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-production

      - name: Setup performance test environment
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV

      - name: Run performance tests
        run: npm run test:performance:quick

      - name: Generate performance report
        run: npm run perf:report

      - name: Comment performance results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('performance-report.json')) {
              const report = JSON.parse(fs.readFileSync('performance-report.json', 'utf8'));
              const comment = `## Performance Test Results
              
              - **Response Time**: ${report.responseTime}ms
              - **Memory Usage**: ${report.memoryUsage}MB
              - **CPU Usage**: ${report.cpuUsage}%
              - **Throughput**: ${report.throughput} req/s
              
              ${report.status === 'pass' ? '✅ Performance tests passed' : '❌ Performance tests failed'}`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # 7. Documentation Generation
  docs:
    name: Documentation Generation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate API documentation
        run: |
          # Generate TypeScript documentation
          npx typedoc src --out docs/api --exclude "**/*.test.ts" --exclude "**/*.spec.ts"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

  # 8. Notification on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, migration-test, test, build]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Send failure notification
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CI Pipeline Failed - ${context.sha.substring(0, 7)}`,
              body: `The CI pipeline failed for commit ${context.sha}.\n\nCheck the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.`,
              labels: ['bug', 'ci-failure']
            });
