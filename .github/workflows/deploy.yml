name: Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  RUST_VERSION: '1.75'

jobs:
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
        
    - name: Install dependencies
      run: |
        cd nodejs-api-server
        npm ci
        
    - name: Build application
      run: |
        cd nodejs-api-server
        npm run build
        
        cd ../rust-services
        ./build-all.sh
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could be deploying to a staging server, Docker registry, etc.
        
    - name: Run health checks
      run: |
        echo "Running post-deployment health checks..."
        # Add health check commands here
        # curl -f http://staging-server:9999/api/health || exit 1
        
    - name: Notify deployment
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Staging deployment successful"
        else
          echo "❌ Staging deployment failed"
        fi

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    needs: deploy-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
        
    - name: Install dependencies
      run: |
        cd nodejs-api-server
        npm ci
        
    - name: Build application
      run: |
        cd nodejs-api-server
        npm run build:prod
        
        cd ../rust-services
        ./build-all.sh --release
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add production health check commands here
        
    - name: Notify deployment
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Production deployment successful"
        else
          echo "❌ Production deployment failed"
        fi

  # Post-deployment testing
  post-deploy-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd nodejs-api-server
        npm ci
        
    - name: Run post-deployment tests
      run: |
        cd nodejs-api-server
        npm run test:post-deploy || true
        
    - name: Generate deployment report
      run: |
        echo "## Deployment Report" > deployment-report.md
        echo "- Staging: ${{ needs.deploy-staging.result }}" >> deployment-report.md
        echo "- Production: ${{ needs.deploy-production.result }}" >> deployment-report.md
        echo "- Post-deploy tests: ${{ job.status }}" >> deployment-report.md
        
    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.md