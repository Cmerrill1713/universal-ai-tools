name: Repository Configuration Sync

on:
  push:
    branches: [main, master]
    paths:
      - '.github/**'
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync all settings'
        required: false
        default: false
        type: boolean

jobs:
  sync-labels:
    name: Sync Repository Labels
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Sync labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = [
              // Type labels
              { name: 'bug', color: 'd73a4a', description: 'Something isn\'t working' },
              { name: 'enhancement', color: 'a2eeef', description: 'New feature or request' },
              { name: 'documentation', color: '0075ca', description: 'Improvements or additions to documentation' },
              { name: 'duplicate', color: 'cfd3d7', description: 'This issue or pull request already exists' },
              { name: 'good first issue', color: '7057ff', description: 'Good for newcomers' },
              { name: 'help wanted', color: '008672', description: 'Extra attention is needed' },
              { name: 'invalid', color: 'e4e669', description: 'This doesn\'t seem right' },
              { name: 'question', color: 'd876e3', description: 'Further information is requested' },
              { name: 'wontfix', color: 'ffffff', description: 'This will not be worked on' },
              
              // Priority labels
              { name: 'priority: low', color: '0e8a16', description: 'Low priority' },
              { name: 'priority: medium', color: 'fbca04', description: 'Medium priority' },
              { name: 'priority: high', color: 'f9d0c4', description: 'High priority' },
              { name: 'priority: critical', color: 'b60205', description: 'Critical priority' },
              
              // Component labels
              { name: 'backend', color: '1f77b4', description: 'Backend related' },
              { name: 'frontend', color: 'ff7f0e', description: 'Frontend related' },
              { name: 'database', color: '2ca02c', description: 'Database related' },
              { name: 'security', color: 'd62728', description: 'Security related' },
              { name: 'performance', color: '9467bd', description: 'Performance related' },
              { name: 'ci', color: '8c564b', description: 'CI/CD related' },
              { name: 'docker', color: 'e377c2', description: 'Docker related' },
              { name: 'dependencies', color: '7f7f7f', description: 'Dependency updates' },
              
              // Workflow labels
              { name: 'ready for review', color: '0e8a16', description: 'Ready for code review' },
              { name: 'work in progress', color: 'fbca04', description: 'Work in progress' },
              { name: 'needs testing', color: 'f9d0c4', description: 'Needs testing' },
              { name: 'breaking change', color: 'b60205', description: 'Contains breaking changes' },
              { name: 'deploy-staging', color: '1f77b4', description: 'Deploy to staging environment' },
              
              // Special labels
              { name: 'triage', color: '70b0ff', description: 'Needs triage' },
              { name: 'urgent', color: 'ff0000', description: 'Urgent attention needed' },
              { name: 'blocked', color: '808080', description: 'Blocked by other work' }
            ];
            
            for (const label of labels) {
              try {
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label.name,
                  color: label.color,
                  description: label.description
                });
                console.log(`Created label: ${label.name}`);
              } catch (error) {
                if (error.status === 422) {
                  // Label already exists, update it
                  await github.rest.issues.updateLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label.name,
                    color: label.color,
                    description: label.description
                  });
                  console.log(`Updated label: ${label.name}`);
                } else {
                  console.error(`Error with label ${label.name}:`, error.message);
                }
              }
            }

  suggest-branch-protection:
    name: Suggest Branch Protection Rules
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.repository_owner == 'christianmerrill'
    steps:
      - name: Create branch protection suggestions issue
        uses: actions/github-script@v7
        with:
          script: |
            const suggestions = `
            # Branch Protection Rules Suggestions
            
            To ensure code quality and security, consider implementing these branch protection rules:
            
            ## Main/Master Branch Protection
            \`\`\`
            - Require pull request reviews before merging
            - Require review from code owners
            - Dismiss stale PR approvals when new commits are pushed
            - Require status checks to pass before merging
            - Require branches to be up to date before merging
            - Require conversation resolution before merging
            - Restrict pushes that create files larger than 100MB
            \`\`\`
            
            ## Required Status Checks
            - CI Pipeline / code-quality-gate
            - CI Pipeline / security-quality-gate
            - CI Pipeline / test-quality-gate
            - CI Pipeline / build-quality-gate
            - Branch Protection & Code Quality / final-quality-gate
            
            ## Additional Settings
            - Include administrators in these restrictions
            - Allow force pushes: No
            - Allow deletions: No
            
            ## Auto-merge Settings
            - Enable auto-merge for dependency updates (with proper checks)
            - Require at least 1 approval for auto-merge
            
            ---
            
            **Note:** These are suggestions. Adjust based on your team size and workflow preferences.
            
            To implement these rules, go to:
            Settings ‚Üí Branches ‚Üí Add rule
            `;
            
            // Check if we already have a similar issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'repository-config'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Branch Protection Rules')
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üîí Branch Protection Rules Suggestions',
                body: suggestions,
                labels: ['repository-config', 'security', 'ci']
              });
            }

  create-security-issue-template:
    name: Ensure Security Issue Template
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Check and suggest security settings
        uses: actions/github-script@v7
        with:
          script: |
            const securitySuggestions = `
            # Repository Security Configuration Checklist
            
            ## Security Features to Enable
            
            ### Repository Settings
            - [ ] Enable vulnerability alerts
            - [ ] Enable automated security fixes (Dependabot)
            - [ ] Enable private vulnerability reporting
            - [ ] Set up code scanning (CodeQL)
            - [ ] Configure secret scanning
            
            ### Branch Protection
            - [ ] Implement branch protection rules (see other issue)
            - [ ] Require signed commits (optional but recommended)
            
            ### Access Control
            - [ ] Review collaborator permissions
            - [ ] Set up teams with appropriate access levels
            - [ ] Enable two-factor authentication requirement
            
            ### Monitoring
            - [ ] Set up security advisories
            - [ ] Configure security notifications
            - [ ] Regular security audit schedule
            
            ### CI/CD Security
            - [ ] Secure secrets management
            - [ ] Audit GitHub Actions permissions
            - [ ] Regular dependency updates
            - [ ] Container security scanning
            
            ---
            
            **Auto-generated by repository sync workflow**
            `;
            
            // Create security configuration issue if it doesn't exist
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security'
            });
            
            const existingSecurityIssue = issues.data.find(issue => 
              issue.title.includes('Security Configuration Checklist')
            );
            
            if (!existingSecurityIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üîê Repository Security Configuration Checklist',
                body: securitySuggestions,
                labels: ['security', 'repository-config', 'checklist']
              });
            }