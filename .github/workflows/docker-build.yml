name: Docker Build & Security

on:
  push:
    branches: [main, master, develop]
    tags: ['v*']
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean
      platforms:
        description: 'Target platforms'
        required: false
        default: 'linux/amd64'
        type: choice
        options:
          - 'linux/amd64'
          - 'linux/arm64'
          - 'linux/amd64,linux/arm64'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'

jobs:
  # 1. Prepare build context
  prepare:
    name: Prepare Build Context
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_labels: ${{ steps.meta.outputs.labels }}
      should_push: ${{ steps.push.outputs.should_push }}
      platforms: ${{ steps.platforms.outputs.platforms }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine push condition
        id: push
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_push=${{ github.event.inputs.push_images }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then  # cSpell:disable-line elif
            echo "should_push=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then  # cSpell:disable-line elif
            echo "should_push=true" >> $GITHUB_OUTPUT
          else
            echo "should_push=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine platforms
        id: platforms
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "platforms=${{ github.event.inputs.platforms }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
          else
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short
          labels: |
            org.opencontainers.image.title=Universal AI Tools  # cSpell:disable-line opencontainers
            org.opencontainers.image.description=Universal AI Tools Service  # cSpell:disable-line opencontainers
            org.opencontainers.image.vendor=Universal AI Tools  # cSpell:disable-line opencontainers
            org.opencontainers.image.licenses=MIT  # cSpell:disable-line opencontainers

  # 2. Build application
  build-app:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Cache node_modules for faster builds
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install backend dependencies
        run: npm ci --prefer-offline

      - name: Install frontend dependencies
        run: cd ui && npm ci

      - name: Build backend
        run: npm run build:prod

      - name: Build frontend
        run: cd ui && npm run build

      - name: Create build artifact
        run: |
          mkdir -p docker-build
          cp -r dist docker-build/
          cp -r ui/dist docker-build/ui-dist
          cp package.json docker-build/
          cp package-lock.json docker-build/

          # Create production package.json (only production dependencies)
          cd docker-build
          npm ci --omit=dev

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ github.sha }}
          path: docker-build/
          retention-days: 7

  # 3. Create and validate Dockerfile
  dockerfile-lint:
    name: Dockerfile Linting
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create optimized Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          # Multi-stage build for Universal AI Tools
          # Stage 1: Base image with security hardening
          FROM node:20-alpine AS base

          # Security: Create non-root user
          RUN addgroup -g 1001 -S nodejs && \
              adduser -S nextjs -u 1001 -G nodejs  # cSpell:disable-line addgroup adduser nextjs  # cSpell:disable-line addgroup adduser nextjs

          # Security: Update packages and remove package manager cache
          RUN apk update && apk upgrade && \
              apk add --no-cache dumb-init && \
              rm -rf /var/cache/apk/*

          # Set working directory
          WORKDIR /app

          # Stage 2: Dependencies
          FROM base AS deps

          # Copy package files
          COPY package*.json ./

          # Install production dependencies only
          RUN npm ci --omit=dev && npm cache clean --force

          # Stage 3: Final runtime image
          FROM base AS runtime

          # Security: Set environment variables
          ENV NODE_ENV=production
          ENV PORT=3000
          ENV HOST=0.0.0.0

          # Security: Don't run as root
          USER nodejs

          # Copy dependencies from deps stage
          COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules

          # Copy application files
          COPY --chown=nodejs:nodejs dist ./dist
          COPY --chown=nodejs:nodejs ui-dist ./ui-dist
          COPY --chown=nodejs:nodejs package.json ./

          # Health check
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3  # cSpell:disable-line HEALTHCHECK \
              CMD node -e "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"  # cSpell:disable-line HEALTHCHECK

          # Security: Use dumb-init to handle signals properly
          ENTRYPOINT ["dumb-init", "--"]

          # Expose port
          EXPOSE 3000

          # Start application
          CMD ["node", "dist/server.js"]
          EOF

      - name: Lint Dockerfile with hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: json
          output-file: hadolint-results.json

      - name: Upload Dockerfile lint results
        uses: actions/upload-artifact@v4
        with:
          name: dockerfile-lint-${{ github.sha }}
          path: hadolint-results.json
          retention-days: 30

  # 4. Build Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [prepare, build-app, dockerfile-lint]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-${{ github.sha }}
          path: docker-build/

      - name: Copy optimized Dockerfile
        run: |
          # Use the Dockerfile created in the previous job
          cat > Dockerfile << 'EOF'
          # Multi-stage build for Universal AI Tools
          FROM node:20-alpine AS base

          RUN addgroup -g 1001 -S nodejs && \
              adduser -S nextjs -u 1001 -G nodejs  # cSpell:disable-line addgroup adduser nextjs

          RUN apk update && apk upgrade && \
              apk add --no-cache dumb-init && \
              rm -rf /var/cache/apk/*

          WORKDIR /app

          FROM base AS deps
          COPY docker-build/package*.json ./
          RUN npm ci --omit=dev && npm cache clean --force

          FROM base AS runtime
          ENV NODE_ENV=production
          ENV PORT=3000
          ENV HOST=0.0.0.0

          USER nodejs

          COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules
          COPY --chown=nodejs:nodejs docker-build/dist ./dist
          COPY --chown=nodejs:nodejs docker-build/ui-dist ./ui-dist
          COPY --chown=nodejs:nodejs docker-build/package.json ./

          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3  # cSpell:disable-line HEALTHCHECK \
              CMD node -e "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

          ENTRYPOINT ["dumb-init", "--"]
          EXPOSE 3000
          CMD ["node", "dist/server.js"]
          EOF

      - name: Set up Docker Buildx # cSpell:disable-line Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: needs.prepare.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ needs.prepare.outputs.platforms }}
          push: ${{ needs.prepare.outputs.should_push }}
          tags: ${{ needs.prepare.outputs.image_tag }}
          labels: ${{ needs.prepare.outputs.image_labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Export image for security scanning (amd64 only)
        if: contains(needs.prepare.outputs.platforms, 'linux/amd64')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          load: true
          tags: security-scan:latest
          cache-from: type=gha

  # 5. Container security scanning
  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-docker]
    steps:
      - name: Run Trivy vulnerability scanner # cSpell:disable-line aquasecurity sarif
        uses: aquasecurity/trivy-action@master # cSpell:disable-line aquasecurity
        with:
          image-ref: security-scan:latest
          format: 'sarif' # cSpell:disable-line sarif
          output: 'trivy-results.sarif' # cSpell:disable-line sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3 # cSpell:disable-line sarif
        with:
          sarif_file: 'trivy-results.sarif' # cSpell:disable-line sarif

      - name: Run Trivy vulnerability scanner (JSON format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: security-scan:latest
          format: 'json'
          output: 'trivy-results.json'

      - name: Run Grype vulnerability scanner # cSpell:disable-line anchore
        uses: anchore/scan-action@v3 # cSpell:disable-line anchore
        id: grype
        with:
          image: security-scan:latest
          output-format: json
          fail-build: false

      - name: Analyze security scan results
        run: |
          echo "Analyzing container security scan results..."

          # Count vulnerabilities by severity
          if [ -f trivy-results.json ]; then
            echo "Trivy scan results:"
            jq -r '.Results[]?.Vulnerabilities // [] | group_by(.Severity) | map({severity: .[0].Severity, count: length}) | .[]' trivy-results.json || echo "No vulnerabilities found"

            # Check for critical vulnerabilities
            critical_count=$(jq -r '[.Results[]?.Vulnerabilities // [] | .[] | select(.Severity == "CRITICAL")] | length' trivy-results.json)
            high_count=$(jq -r '[.Results[]?.Vulnerabilities // [] | .[] | select(.Severity == "HIGH")] | length' trivy-results.json)

            echo "Critical vulnerabilities: $critical_count"
            echo "High vulnerabilities: $high_count"

            if [ "$critical_count" -gt 0 ]; then
              echo "CRITICAL_VULNS=true" >> $GITHUB_ENV  # cSpell:disable-line VULNS
              echo "CRITICAL_COUNT=$critical_count" >> $GITHUB_ENV
            fi

            if [ "$high_count" -gt 5 ]; then
              echo "HIGH_VULNS=true" >> $GITHUB_ENV  # cSpell:disable-line VULNS
              echo "HIGH_COUNT=$high_count" >> $GITHUB_ENV
            fi
          fi

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: container-security-scan-${{ github.sha }}
          path: |
            trivy-results.json
            trivy-results.sarif
            grype-results.json
          retention-days: 90

  # 6. Container compliance testing
  compliance-test:
    name: Container Compliance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-docker]
    steps:
      - name: Test container startup
        run: |
          echo "Testing container startup and health..."

          # Start container
          docker run -d --name test-container -p 3000:3000 \
            -e NODE_ENV=production \
            -e JWT_SECRET=test-secret \
            security-scan:latest

          # Wait for startup
          sleep 30

          # Test health endpoint
          for i in {1..10}; do
            if curl -f http://localhost:3000/health; then
              echo "Health check passed"
              break
            else
              echo "Health check attempt $i failed, retrying..."
              sleep 5
            fi
          done

          # Check container logs
          echo "Container logs:"
          docker logs test-container

          # Stop container
          docker stop test-container
          docker rm test-container

      - name: Test container security
        run: |
          echo "Testing container security configuration..."

          # Test that container doesn't run as root
          user_check=$(docker run --rm security-scan:latest whoami)
          if [ "$user_check" != "nodejs" ]; then
            echo "❌ Container is not running as expected user (nodejs)"
            exit 1
          else
            echo "✅ Container runs as non-root user: $user_check"
          fi

          # Test read-only filesystem (optional)
          echo "Testing container filesystem permissions..."
          docker run --rm security-scan:latest ls -la /app/

      - name: Test container resource limits
        run: |
          echo "Testing container with resource limits..."

          # Test with memory limit
          docker run -d --name resource-test --memory=512m \
            -e NODE_ENV=production \
            -e JWT_SECRET=test-secret \
            security-scan:latest

          sleep 20

          # Check if container is still running
          if docker ps | grep resource-test; then
            echo "✅ Container runs successfully with resource limits"
          else
            echo "❌ Container failed with resource limits"
            docker logs resource-test
          fi

          docker stop resource-test 2>/dev/null || true
          docker rm resource-test 2>/dev/null || true

  # 7. Generate container report
  generate-report:
    name: Generate Container Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [prepare, build-docker, security-scan, compliance-test]
    if: always()
    steps:
      - name: Download security scan results
        uses: actions/download-artifact@v4
        with:
          path: scan-results/

      - name: Generate container security report
        run: |
          echo "# Container Security Report" > container-report.md
          echo "Generated on: $(date)" >> container-report.md
          echo "Commit: ${{ github.sha }}" >> container-report.md
          echo "Image: ${{ needs.prepare.outputs.image_tag }}" >> container-report.md
          echo "" >> container-report.md

          echo "## Build Status" >> container-report.md
          echo "- Docker Build: ${{ needs.build-docker.result }}" >> container-report.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> container-report.md
          echo "- Compliance Test: ${{ needs.compliance-test.result }}" >> container-report.md
          echo "" >> container-report.md

          echo "## Security Summary" >> container-report.md
          if [[ "${CRITICAL_VULNS:-false}" == "true" ]]; then
            echo "❌ Critical vulnerabilities found: ${CRITICAL_COUNT:-0}" >> container-report.md
          else
            echo "✅ No critical vulnerabilities found" >> container-report.md
          fi

          if [[ "${HIGH_VULNS:-false}" == "true" ]]; then
            echo "⚠️ High severity vulnerabilities: ${HIGH_COUNT:-0}" >> container-report.md
          fi

          echo "" >> container-report.md
          echo "## Recommendations" >> container-report.md
          echo "1. Regularly update base images" >> container-report.md
          echo "2. Scan images before deployment" >> container-report.md
          echo "3. Use minimal base images" >> container-report.md
          echo "4. Implement runtime security monitoring" >> container-report.md

      - name: Upload container report
        uses: actions/upload-artifact@v4
        with:
          name: container-report-${{ github.sha }}
          path: container-report.md
          retention-days: 90

      - name: Comment container report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('container-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🐳 Container Security Report\n\n${report}`
            });

      - name: Fail on critical vulnerabilities
        if: env.CRITICAL_VULNS == 'true'
        run: |
          echo "❌ Build failed due to critical vulnerabilities in container image"
          echo "Critical vulnerabilities found: ${CRITICAL_COUNT:-0}"
          exit 1
