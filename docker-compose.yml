<<<<<<< HEAD
version: '3.8'

name: universal-ai-tools

services:
  # Main Universal AI Tools Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: universal-ai-tools-app
    restart: unless-stopped
    ports:
      - "9999:9999"
    environment:
      # Server Configuration
      - NODE_ENV=production
      - PORT=9999
      - HOST=0.0.0.0
      
      # Database Configuration
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/universal_ai_tools
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - TOKEN_ENCRYPTION_KEY=${TOKEN_ENCRYPTION_KEY:-}
      
      # AI Services
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY:-}
      
      # Local LLM Services
      - OLLAMA_URL=http://ollama:11434
      - LM_STUDIO_URL=${LM_STUDIO_URL:-http://host.docker.internal:1234}
      
      # Feature Flags
      - ENABLE_WEBSOCKETS=true
      - ENABLE_MEMORY_SYSTEM=true
      - ENABLE_ANTI_HALLUCINATION=true
      - ENABLE_COGNITIVE_AGENTS=true
      
      # Performance Settings
      - MAX_CONCURRENT_REQUESTS=50
      - REQUEST_TIMEOUT=120000
      - MEMORY_CACHE_SIZE=5000
      
      # Monitoring
      - ENABLE_TELEMETRY=true
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./data:/app/data
      - model_cache:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    networks:
      - ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9999/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
=======
name: universal-ai-tools

services:
  # NOTE: This docker-compose provides infrastructure services only.
  # For application microservices, use: docker compose -f docker-compose.go-rust.yml up
>>>>>>> fix/stabilize-imports-endpoint-verification

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: universal-ai-tools-postgres
    restart: unless-stopped
    ports:
<<<<<<< HEAD
      - "5432:5432"
=======
      - '5432:5432'
>>>>>>> fix/stabilize-imports-endpoint-verification
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=universal_ai_tools
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - ai-network
    healthcheck:
<<<<<<< HEAD
      test: ["CMD-SHELL", "pg_isready -U postgres"]
=======
      test: ['CMD-SHELL', 'pg_isready -U postgres']
>>>>>>> fix/stabilize-imports-endpoint-verification
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Rate Limiting
  redis:
    image: redis:7-alpine
    container_name: universal-ai-tools-redis
    restart: unless-stopped
    ports:
<<<<<<< HEAD
      - "6379:6379"
=======
      - '6379:6379'
>>>>>>> fix/stabilize-imports-endpoint-verification
    command: >
      redis-server
      --appendonly yes
      --maxmemory 4gb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - ai-network
    healthcheck:
<<<<<<< HEAD
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
=======
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
>>>>>>> fix/stabilize-imports-endpoint-verification
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama for Local LLM Inference
  ollama:
    image: ollama/ollama:latest
    container_name: universal-ai-tools-ollama
    restart: unless-stopped
    ports:
<<<<<<< HEAD
      - "11434:11434"
=======
      - '11434:11434'
>>>>>>> fix/stabilize-imports-endpoint-verification
    volumes:
      - ollama_models:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=5m
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_MAX_LOADED_MODELS=3
      - OLLAMA_HOST=0.0.0.0
    networks:
      - ai-network
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    # Automatically pull popular models on startup
<<<<<<< HEAD
    entrypoint: ["/bin/bash", "-c"]
=======
    entrypoint: ['/bin/bash', '-c']
>>>>>>> fix/stabilize-imports-endpoint-verification
    command:
      - |
        ollama serve &
        sleep 5
        ollama pull llama3.2:3b || true
        ollama pull mistral:7b || true
        ollama pull codellama:7b || true
        wait

<<<<<<< HEAD
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: universal-ai-tools-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app
    networks:
      - ai-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

=======
>>>>>>> fix/stabilize-imports-endpoint-verification
  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: universal-ai-tools-prometheus
    restart: unless-stopped
    ports:
<<<<<<< HEAD
      - "9090:9090"
=======
      - '9090:9090'
>>>>>>> fix/stabilize-imports-endpoint-verification
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - ai-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: universal-ai-tools-grafana
    restart: unless-stopped
    ports:
<<<<<<< HEAD
      - "3003:3000"
=======
      - '3003:3000'
>>>>>>> fix/stabilize-imports-endpoint-verification
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - ai-network

  # pgAdmin for Database Management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: universal-ai-tools-pgadmin
    restart: unless-stopped
    ports:
<<<<<<< HEAD
      - "5050:80"
=======
      - '5050:80'
>>>>>>> fix/stabilize-imports-endpoint-verification
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ai-network
    profiles:
      - tools

  # Redis Commander for Redis Management (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: universal-ai-tools-redis-commander
    restart: unless-stopped
    ports:
<<<<<<< HEAD
      - "8081:8081"
=======
      - '8081:8081'
>>>>>>> fix/stabilize-imports-endpoint-verification
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-}
    depends_on:
      - redis
    networks:
      - ai-network
    profiles:
      - tools

<<<<<<< HEAD
=======
  # Weaviate Vector Database
  # Supabase Local Development
  supabase-db:
    image: supabase/postgres:15.1.0.117
    container_name: universal-ai-tools-supabase-db
    restart: unless-stopped
    ports:
      - '54321:5432'
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
    volumes:
      - supabase_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  supabase-api:
    image: supabase/gotrue:v2.99.0
    container_name: universal-ai-tools-supabase-api
    restart: unless-stopped
    ports:
      - '54322:9999'
    environment:
      - GOTRUE_API_HOST=0.0.0.0
      - GOTRUE_API_PORT=9999
      - API_EXTERNAL_URL=http://localhost:54322
      - GOTRUE_DB_DRIVER=postgres
      - GOTRUE_DB_DATABASE_URL=postgresql://postgres:postgres@supabase-db:5432/postgres
      - GOTRUE_SITE_URL=http://localhost:3000
      - GOTRUE_URI_ALLOW_LIST=*
      - GOTRUE_DISABLE_SIGNUP=false
      - GOTRUE_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - GOTRUE_JWT_EXP=3600
      - GOTRUE_JWT_DEFAULT_GROUP_NAME=authenticated
      - GOTRUE_JWT_ADMIN_ROLES=service_role
      - GOTRUE_JWT_AUD=authenticated
      - GOTRUE_JWT_DEFAULT_GROUP_NAME=authenticated
      - GOTRUE_EXTERNAL_EMAIL_ENABLED=true
      - GOTRUE_MAILER_AUTOCONFIRM=true
      - GOTRUE_SMTP_ADMIN_EMAIL=admin@example.com
      - GOTRUE_SMTP_HOST=supabase-mail
      - GOTRUE_SMTP_PORT=2500
      - GOTRUE_SMTP_USER=supabase
      - GOTRUE_SMTP_PASS=supabase
      - GOTRUE_SMTP_SENDER_NAME=supabase
    depends_on:
      supabase-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  supabase-rest:
    image: postgrest/postgrest:v11.2.0
    container_name: universal-ai-tools-supabase-rest
    restart: unless-stopped
    ports:
      - '54323:3000'
    environment:
      - PGRST_DB_URI=postgresql://postgres:postgres@supabase-db:5432/postgres
      - PGRST_DB_SCHEMAS=public,storage,graphql_public
      - PGRST_DB_ANON_ROLE=anon
      - PGRST_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - PGRST_DB_USE_LEGACY_GUCS=false
      - PGRST_APP_SETTINGS_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - PGRST_APP_SETTINGS_JWT_EXP=3600
    depends_on:
      supabase-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 5

  weaviate:
    image: semitechnologies/weaviate:latest
    container_name: universal-ai-tools-weaviate
    restart: unless-stopped
    ports:
      - '8090:8080'
      - '50051:50051'
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - ai-network

>>>>>>> fix/stabilize-imports-endpoint-verification
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_models:
    driver: local
  model_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
<<<<<<< HEAD
  nginx_cache:
    driver: local
  pgadmin_data:
    driver: local
=======
  pgadmin_data:
    driver: local
  weaviate_data:
    driver: local
  supabase_data:
    driver: local
>>>>>>> fix/stabilize-imports-endpoint-verification

networks:
  ai-network:
    driver: bridge
<<<<<<< HEAD
    ipam:
      config:
        - subnet: 172.20.0.0/16
=======
    name: universal-ai-network
    ipam:
      config:
        - subnet: 172.20.0.0/16
>>>>>>> fix/stabilize-imports-endpoint-verification
