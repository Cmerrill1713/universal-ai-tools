name: universal-ai-tools

services:
  # NOTE: This docker-compose provides infrastructure services only.
  # For application microservices, use: docker compose -f docker-compose.go-rust.yml up

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: universal-ai-tools-postgres
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=universal_ai_tools
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - ai-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Rate Limiting
  redis:
    image: redis:7-alpine
    container_name: universal-ai-tools-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: >
      redis-server
      --appendonly yes
      --maxmemory 4gb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - ai-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama for Local LLM Inference
  ollama:
    image: ollama/ollama:latest
    container_name: universal-ai-tools-ollama
    restart: unless-stopped
    ports:
      - '11434:11434'
    volumes:
      - ollama_models:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=5m
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_MAX_LOADED_MODELS=3
      - OLLAMA_HOST=0.0.0.0
    networks:
      - ai-network
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    # Automatically pull popular models on startup
    entrypoint: ['/bin/bash', '-c']
    command:
      - |
        ollama serve &
        sleep 5
        ollama pull llama3.2:3b || true
        ollama pull mistral:7b || true
        ollama pull codellama:7b || true
        wait

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: universal-ai-tools-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - ai-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: universal-ai-tools-grafana
    restart: unless-stopped
    ports:
      - '3003:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - ai-network

  # pgAdmin for Database Management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: universal-ai-tools-pgadmin
    restart: unless-stopped
    ports:
      - '5050:80'
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ai-network
    profiles:
      - tools

  # Redis Commander for Redis Management (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: universal-ai-tools-redis-commander
    restart: unless-stopped
    ports:
      - '8081:8081'
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-}
    depends_on:
      - redis
    networks:
      - ai-network
    profiles:
      - tools

  # Weaviate Vector Database
  # Supabase Local Development
  supabase-db:
    image: supabase/postgres:15.1.0.117
    container_name: universal-ai-tools-supabase-db
    restart: unless-stopped
    ports:
      - '54321:5432'
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
    volumes:
      - supabase_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  supabase-api:
    image: supabase/gotrue:v2.99.0
    container_name: universal-ai-tools-supabase-api
    restart: unless-stopped
    ports:
      - '54322:9999'
    environment:
      - GOTRUE_API_HOST=0.0.0.0
      - GOTRUE_API_PORT=9999
      - API_EXTERNAL_URL=http://localhost:54322
      - GOTRUE_DB_DRIVER=postgres
      - GOTRUE_DB_DATABASE_URL=postgresql://postgres:postgres@supabase-db:5432/postgres
      - GOTRUE_SITE_URL=http://localhost:3000
      - GOTRUE_URI_ALLOW_LIST=*
      - GOTRUE_DISABLE_SIGNUP=false
      - GOTRUE_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - GOTRUE_JWT_EXP=3600
      - GOTRUE_JWT_DEFAULT_GROUP_NAME=authenticated
      - GOTRUE_JWT_ADMIN_ROLES=service_role
      - GOTRUE_JWT_AUD=authenticated
      - GOTRUE_JWT_DEFAULT_GROUP_NAME=authenticated
      - GOTRUE_EXTERNAL_EMAIL_ENABLED=true
      - GOTRUE_MAILER_AUTOCONFIRM=true
      - GOTRUE_SMTP_ADMIN_EMAIL=admin@example.com
      - GOTRUE_SMTP_HOST=supabase-mail
      - GOTRUE_SMTP_PORT=2500
      - GOTRUE_SMTP_USER=supabase
      - GOTRUE_SMTP_PASS=supabase
      - GOTRUE_SMTP_SENDER_NAME=supabase
    depends_on:
      supabase-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  supabase-rest:
    image: postgrest/postgrest:v11.2.0
    container_name: universal-ai-tools-supabase-rest
    restart: unless-stopped
    ports:
      - '54323:3000'
    environment:
      - PGRST_DB_URI=postgresql://postgres:postgres@supabase-db:5432/postgres
      - PGRST_DB_SCHEMAS=public,storage,graphql_public
      - PGRST_DB_ANON_ROLE=anon
      - PGRST_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - PGRST_DB_USE_LEGACY_GUCS=false
      - PGRST_APP_SETTINGS_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - PGRST_APP_SETTINGS_JWT_EXP=3600
    depends_on:
      supabase-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 5

  weaviate:
    image: semitechnologies/weaviate:latest
    container_name: universal-ai-tools-weaviate
    restart: unless-stopped
    ports:
      - '8090:8080'
      - '50051:50051'
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - ai-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_models:
    driver: local
  model_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
  weaviate_data:
    driver: local
  supabase_data:
    driver: local

networks:
  ai-network:
    driver: bridge
    name: universal-ai-network
    ipam:
      config:
        - subnet: 172.20.0.0/16
