# Docker Environment Configuration
# Copy this file to .env for Docker deployments

# Server Configuration
PORT=8080

# =================================================================
# REQUIRED: Database Configuration
# =================================================================
POSTGRES_USER=postgres
POSTGRES_PASSWORD=change-this-secure-password
POSTGRES_DB=universal_ai_tools
DATABASE_URL=postgresql://postgres:postgres@127.0.0.1:54322/postgres

# =================================================================
# REQUIRED: Supabase Configuration  
# =================================================================
# Using local Supabase for testing
SUPABASE_URL=http://127.0.0.1:54321
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU
SUPABASE_SERVICE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU

# =================================================================
# LFM2 Configuration
# =================================================================
LFM2_PYTHON_SCRIPT=/Users/christianmerrill/Desktop/universal-ai-tools/src/services/lfm2-server.py

# =================================================================
# REQUIRED: Security Configuration
# =================================================================
JWT_SECRET=dev-jwt-secret-for-local-testing-only-32chars!
SUPABASE_SERVICE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU

# =================================================================
# DSPy Configuration
# =================================================================
ENABLE_DSPY=true
DSPY_PORT=8766

# =================================================================
# AI Model Development Configuration
# =================================================================
# Set to true to force mock mode for development
LFM2_FORCE_MOCK=true
MLX_FORCE_MOCK=true

# LFM2 Configuration
LFM2_MAX_PENDING=25
LFM2_TIMEOUT_MS=8000
LFM2_MAX_CONCURRENCY=1
LFM2_MAX_TOKENS=256
LFM2_MAX_PROMPT_CHARS=2000

# MLX Configuration  
MLX_TIMEOUT_MS=30000

# =================================================================
# REQUIRED: Administrative Passwords (Docker Services)
# =================================================================
GRAFANA_ADMIN_PASSWORD=secure-grafana-password
PGADMIN_PASSWORD=secure-pgadmin-password

# =================================================================
# REQUIRED: AI API Keys
# =================================================================
OPENAI_API_KEY=sk-your-openai-api-key
ANTHROPIC_API_KEY=sk-ant-your-anthropic-api-key

# =================================================================
# OPTIONAL: Additional Configuration
# =================================================================
GOOGLE_AI_API_KEY=your-google-ai-api-key
CORS_ORIGIN=*
NODE_ENV=development
PORT=9999
DISABLE_HEAVY_SERVICES=true
SKIP_STARTUP_CONTEXT=true

# Administrative emails
GRAFANA_ADMIN_USER=admin
PGADMIN_EMAIL=admin@example.com

# PostgreSQL Performance Tuning
POSTGRES_MAX_CONNECTIONS=200
POSTGRES_SHARED_BUFFERS=512MB
POSTGRES_EFFECTIVE_CACHE_SIZE=2GB

# =================================================================
# PRODUCTION SECURITY NOTES
# =================================================================
# 1. Generate JWT_SECRET with: openssl rand -hex 32
# 2. Use strong passwords for all admin accounts
# 3. Set CORS_ORIGIN to your actual domain(s)
# 4. Never commit this file with real credentials
# 5. Use Docker secrets in production for sensitive values

# =================================================================
# Neo4j Graph Database Configuration
# =================================================================
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=password123

# =================================================================
# MONITORING & ALERTING CONFIGURATION
# =================================================================
# Grafana admin credentials (already set above)
GRAFANA_ADMIN_USER=admin

# Alert webhook authentication
ALERT_WEBHOOK_PASSWORD=secure-webhook-password-123

# Optional: Slack notifications (set these to enable Slack alerts)
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# Optional: PagerDuty integration (set this to enable PagerDuty alerts)
# PAGERDUTY_INTEGRATION_KEY=your-pagerduty-integration-key

# Optional: Email alert settings
ALERT_EMAIL_FROM=alerts@universal-ai-tools.local
ALERT_EMAIL_TO=admin@universal-ai-tools.local

# Monitoring data retention
PROMETHEUS_RETENTION_TIME=30d
PROMETHEUS_RETENTION_SIZE=10GB
LOKI_RETENTION_PERIOD=7d
DISABLE_MCP=true
