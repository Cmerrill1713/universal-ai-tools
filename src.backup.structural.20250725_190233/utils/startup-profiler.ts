/**;
 * Startup Profiler - Track server initialization progress and identify bottlenecks;
 */;

import { LogContext, logger } from './enhanced-logger';
interface StartupStep {;
  name: string;
  startTime: number;
  endTime?: number;
  status: 'pending' | 'success' | 'failed' | 'timeout';
  error?: string;
  duration?: number;
;
};
  export class StartupProfiler {;
  private static instance: StartupProfiler;
  private steps: Map<string, StartupStep> = new Map();
  private startTime: number = Datenow();
  private timeoutMs = 30000; // 30 second global timeout;
  static getInstance(): StartupProfiler {;
    if (!StartupProfilerinstance) {;
      StartupProfilerinstance = new StartupProfiler();
    };
  return StartupProfilerinstance;
  };
  startStep(name: string): void {;
    const step: StartupStep = {;
      name;
      startTime: Datenow();
      status: 'pending';
    ;
};
    thisstepsset(name, step);
    loggerinfo(););
      `🔄 [STARTUP] Starting: ${name} (${thisgetElapsedTime()}ms total)`;
      LogContextSYSTEM;
    );
  };
  completeStep(name: string): void {;
    const step = thisstepsget(name);
    if (step) {;
      stependTime = Datenow();
      stepduration = stependTime - stepstartTime;
      stepstatus = 'success';
      loggerinfo();
        `✅ [STARTUP] Completed: ${name} (${stepduration}ms, ${thisgetElapsedTime()}ms total)`;
        LogContextSYSTEM;
      );
    };
  };
  failStep(name: string, error instanceof Error ? errormessage : String(error) string): void {;
    const step = thisstepsget(name);
    if (step) {;
      stependTime = Datenow();
      stepduration = stependTime - stepstartTime;
      stepstatus = 'failed';
      steperror instanceof Error ? errormessage : String(error)  error;
      loggererror`❌ [STARTUP] Failed: ${name} (${stepduration}ms)`, LogContextSYSTEM, {;
        error;
      });
    };
  };
  timeoutStep(name: string): void {;
    const step = thisstepsget(name);
    if (step) {;
      stependTime = Datenow();
      stepduration = stependTime - stepstartTime;
      stepstatus = 'timeout';
      loggerwarn(`⏰ [STARTUP] Timeout: ${name)} (${stepduration}ms)`, LogContextSYSTEM);
    };
  };
  getElapsedTime(): number {;
    return Datenow() - thisstartTime;
  };
  isGlobalTimeout(): boolean {;
    return thisgetElapsedTime() > thistimeoutMs;
  };
  async withTimeout<T>(name: string, promise: Promise<T>, timeoutMs = 5000): Promise<T | null> {;
    thisstartStep(name);
    try {;
      const result = await Promiserace([);
        promise;
        new Promise<null>((_, reject) => setTimeout(() => reject(new Error('Timeout')), timeoutMs));
      ]);
      thiscompleteStep(name);
      return result;
    } catch (error) {;
      if (error instanceof Error && errormessage === 'Timeout') {;
        thistimeoutStep(name);
      } else {;
        thisfailStep(name, error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error)));
      ;
};
  return null;
    };
  };
  getSummary(): {;
    totalTime: number;
    steps: StartupStep[];
    slowestSteps: StartupStep[];
    failedSteps: StartupStep[];
  } {;
    const stepArray = Arrayfrom(thisstepsvalues());
    const completedSteps = stepArrayfilter((s) => sduration !== undefined);
    const slowestSteps = completedSteps;
      sort((a, b) => (bduration || 0) - (aduration || 0));
      slice(0, 5);
    const failedSteps = stepArrayfilter((s) => sstatus === 'failed' || sstatus === 'timeout');
    return {;
      totalTime: thisgetElapsedTime();
      steps: stepArray;
      slowestSteps;
      failedSteps;
    ;
};
  };
  printSummary(): void {;
    const summary = thisgetSummary();
    loggerinfo('\n📊 [STARTUP] Summary:', LogContextSYSTEM, {;
      totalTime: summarytotalTime;
      stepsCompleted: summarystepsfilter((s) => sstatus === 'success')length;
      stepsFailed: summaryfailedStepslength;
    });
    if (summaryslowestStepslength > 0) {;
      loggerinfo('\n🐌 Slowest steps:', LogContextPERFORMANCE, {;
        slowestSteps: summaryslowestStepsmap((step, i) => ({;
          rank: i + 1;
          name: stepname;
          duration: stepduration;
        }));
      });
    };
  if (summaryfailedStepslength > 0) {;
      loggererror('\n❌ Failed steps:', LogContextSYSTEM, {;
        failedSteps: summaryfailedStepsmap((step) => ({;
          name: stepname;
          error instanceof Error ? errormessage : String(error) steperror instanceof Error ? errormessage : String(error)| 'Unknown error instanceof Error ? errormessage : String(error);
        }));
      });
    };
  };
};
  export const startupProfiler = StartupProfilergetInstance();