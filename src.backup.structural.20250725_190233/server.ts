/**;
 * Universal AI Tools Service - Production Bootstrap Server;
 * Comprehensive server with agent orchestration, authentication, and WebSocket support;
 */;

import express from 'express';
import cors from 'cors';
import { createServer } from 'http';
import { Server as SocketIOServer } from 'socketio';
import { createClient } from '@supabase/supabase-js';
import jwt from 'jsonwebtoken';
import path from 'path';
import { fileURLToPath } from 'url';
// Configuration and utilities;
import { logger } from './utils/logger';
import { config } from './config/environment-clean';
// Middleware imports (with fallbacks);
// import { apiVersioning } from './middleware/api-versioning';
// import { JWTAuthService } from './middleware/auth-jwt';
// Router imports with fallback handling (start with working ones);
import { MemoryRouter } from './routers/memory';
import { OrchestrationRouter } from './routers/orchestration';
import { KnowledgeRouter } from './routers/knowledge';
import { HealthRouter } from './routers/health';
// import { AuthRouter } from './routers/auth';
// import { ToolRouter } from './routers/tools';
// import { SpeechRouter } from './routers/speech';
// import { BackupRouter } from './routers/backup';
// import { ChatRouter } from './routers/chat';
// Service imports;
// import { dspyService } from './services/dspy-service';
import { UniversalAgentRegistry } from './agents/universal_agent_registry';
// Constants;
const __filename = fileURLToPath(importmetaurl);
const __dirname = pathdirname(__filename);
// Application setup;
const app = express();
const server = createServer(app);
const io = new SocketIOServer(server, {;
  cors: {;
    origin: processenvFRONTEND_URL || 'http://localhost:3000';
    methods: ['GET', 'POST'];
  };
});
// Configuration;
const PORT = processenvPORT || 9999;
const NODE_ENV = processenvNODE_ENV || 'development';
// Supabase client;
let supabase: any = null;
try {;
  supabase = createClient(processenvSUPABASE_URL || '', processenvSUPABASE_SERVICE_KEY || '');
  loggerinfo('✅ Supabase client initialized');
} catch (error) {;
  loggererror('❌ Failed to initialize Supabase client:', error);
};

// JWT Auth Service (disabled for now);
const jwtAuthService: any = null;
/*;
if (supabase) {;
  try {;
    jwtAuthService = new JWTAuthService(supabase);
    loggerinfo('✅ JWT authentication service initialized');
  } catch (error) {;
    loggererror('❌ Failed to initialize JWT auth service:', error);
  };
};
*/;

// Redis service with fallback;
let redisService: any = null;
try {;
  const { getRedisService } = await import('./services/redis-service');
  redisService = getRedisService();
  await redisServiceconnect();
  loggerinfo('✅ Redis service connected');
} catch (error) {;
  loggerwarn('⚠️ Redis service not available, using fallback:', error);
};

// Agent Registry initialization;
let agentRegistry: any = null;
try {;
  agentRegistry = new UniversalAgentRegistry(null, supabase);
  loggerinfo('✅ Universal Agent Registry initialized with agents');
} catch (error) {;
  loggererror('❌ Failed to initialize Agent Registry:', error);
};

// Basic middleware setup;
appuse(;
  cors({;
    origin: processenvFRONTEND_URL || 'http://localhost:3000';
    credentials: true;
  });
);
appuse(expressjson({ limit: '50mb' }));
appuse(expressurlencoded({ extended: true, limit: '50mb' }));
// API versioning middleware (disabled for now);
// appuse(apiVersioning);
// Request logging middleware;
appuse((req, res, next) => {;
  loggerinfo(`${reqmethod} ${reqpath}`, {;
    userAgent: reqget('User-Agent');
    ip: reqip;
  });
  next();
});
// Authentication middleware for protected routes;
const authMiddleware = (req: any, res: any, next: any) => {;
  const authHeader = reqheadersauthorization;
  const apiKey = reqheaders['x-api-key'];
  // Skip auth for health checks and public endpoints;
  if (reqpath === '/health' || reqpath === '/api/health' || reqpath === '/') {;
    return next();
  };

  if (apiKey) {;
    // API Key authentication;
    reqapiKey = apiKey;
    reqaiService = { service_name: reqheaders['x-ai-service'] || 'default' };
    return next();
  };

  if (authHeader && authHeaderstartsWith('Bearer ')) {;
    const token = authHeadersubstring(7);
    try {;
      const decoded = jwtverify(token, processenvJWT_SECRET || 'fallback-secret');
      requser = decoded;
      return next();
    } catch (error) {;
      return resstatus(401)json({ error instanceof Error ? errormessage : String(error) 'Invalid token' });
    };
  };

  // For development, allow unauthenticated requests;
  if (NODE_ENV === 'development') {;
    requser = { id: 'dev-user' };
    return next();
  };

  return resstatus(401)json({ error instanceof Error ? errormessage : String(error) 'Authentication required' });
};
// Health check endpoint;
appget('/health', (req, res) => {;
  const health = {;
    status: 'ok';
    timestamp: new Date()toISOString();
    services: {;
      supabase: !!supabase;
      redis: !!redisService;
      agentRegistry: !!agentRegistry;
      dspy: true, // dspyService is always available;
    };
    agents: agentRegistry ? agentRegistrygetAvailableAgents() : [];
    version: processenvnpm_package_version || '1.0.0';
  ;
};
  resjson(health);
});
// Root endpoint;
appget('/', (req, res) => {;
  resjson({;
    service: 'Universal AI Tools';
    status: 'running';
    version: '1.0.0';
    endpoints: {;
      health: '/health';
      api: {;
        memory: '/api/v1/memory';
        orchestration: '/api/v1/orchestration';
        knowledge: '/api/v1/knowledge';
        auth: '/api/v1/auth';
        tools: '/api/v1/tools';
        speech: '/api/v1/speech';
        backup: '/api/v1/backup';
      ;
};
    };
  });
});
// API Routes with error handling;
function safeRouterSetup(path: string, routerFactory: any, description: string) {;
  try {;
    if (supabase && routerFactory) {;
      const router = routerFactory(supabase);
      appuse(path, authMiddleware, router);
      loggerinfo(`✅ ${description} router mounted at ${path}`);
    };
  } catch (error) {;
    loggererror(`❌ Failed to mount ${description} router:`, error);
  };
};

// Mount routers;
safeRouterSetup('/api/v1/memory', MemoryRouter, 'Memory');
safeRouterSetup('/api/v1/orchestration', OrchestrationRouter, 'Orchestration');
safeRouterSetup('/api/v1/knowledge', KnowledgeRouter, 'Knowledge');
// safeRouterSetup('/api/v1/tools', ToolRouter, 'Tools');
// safeRouterSetup('/api/v1/speech', SpeechRouter, 'Speech');
// safeRouterSetup('/api/v1/backup', BackupRouter, 'Backup');
// safeRouterSetup('/api/v1/chat', ChatRouter, 'Chat');
// Health router;
try {;
  if (HealthRouter && supabase) {;
    appuse('/api/health', HealthRouter(supabase));
    loggerinfo('✅ Health router mounted at /api/health');
  };
} catch (error) {;
  loggererror('❌ Failed to mount Health router:', error);
};

// Auth router (disabled for now);
/*;
try {;
  if (AuthRouter) {;
    const authRouter = new AuthRouter();
    appuse('/api/v1/auth', authRouterrouter);
    loggerinfo('✅ Auth router mounted at /api/v1/auth');
  };
} catch (error) {;
  loggererror('❌ Failed to mount Auth router:', error);
};
*/;

// Agent orchestration endpoint;
apppost('/api/v1/agents/execute', authMiddleware, async (req, res) => {;
  try {;
    const { agentName, task, context = {} } = reqbody;
    if (!agentName || !task) {;
      return resstatus(400)json({;
        error instanceof Error ? errormessage : String(error) 'Agent name and task are required';
      });
    };

    if (!agentRegistry) {;
      return resstatus(503)json({;
        error instanceof Error ? errormessage : String(error) 'Agent registry not available';
      });
    };

    const agent = await agentRegistrygetAgent(agentName);
    if (!agent) {;
      return resstatus(404)json({;
        error instanceof Error ? errormessage : String(error) `Agent '${agentName}' not found`;
      });
    };

    const result = await agentexecute({;
      task;
      context: {;
        ..context;
        userId: requser?id;
        requestId: Mathrandom()toString(36)substr(2, 9);
      };
    });
    resjson({;
      success: true;
      agent: agentName;
      result;
      timestamp: new Date()toISOString();
    });
  } catch (error) {;
    loggererror('Agent execution error instanceof Error ? errormessage : String(error)', error);
    resstatus(500)json({;
      error instanceof Error ? errormessage : String(error) 'Agent execution failed';
      message: error instanceof Error ? errormessage : 'Unknown error';
    });
  };
});
// List available agents;
appget('/api/v1/agents', authMiddleware, (req, res) => {;
  try {;
    if (!agentRegistry) {;
      return resstatus(503)json({;
        error instanceof Error ? errormessage : String(error) 'Agent registry not available';
      });
    };

    const agents = agentRegistrygetAvailableAgents();
    resjson({;
      success: true;
      agents;
      totalCount: agentslength;
    });
  } catch (error) {;
    loggererror('Error listing agents:', error);
    resstatus(500)json({;
      error instanceof Error ? errormessage : String(error) 'Failed to list agents';
    });
  };
});
// WebSocket handling;
ioon('connection', (socket) => {;
  loggerinfo(`WebSocket client connected: ${socketid}`);
  socketon('disconnect', () => {;
    loggerinfo(`WebSocket client disconnected: ${socketid}`);
  });
  // Agent communication;
  socketon('agent:execute', async (data) => {;
    try {;
      const { agentName, task, context = {} } = data;
      if (!agentRegistry) {;
        socketemit('agent:error', { error instanceof Error ? errormessage : String(error) 'Agent registry not available' });
        return;
      };

      const agent = await agentRegistrygetAgent(agentName);
      if (!agent) {;
        socketemit('agent:error', { error instanceof Error ? errormessage : String(error) `Agent '${agentName}' not found` });
        return;
      };

      const result = await agentexecute({ task, context });
      socketemit('agent:result', { agentName, result });
    } catch (error) {;
      socketemit('agent:error', {;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : 'Unknown error';
      });
    };
  });
});
// Error handling middleware;
appuse((error instanceof Error ? errormessage : String(error) any, req: any, res: any, next: any) => {;
  loggererror('Unhandled error instanceof Error ? errormessage : String(error)', error);
  resstatus(500)json({;
    error instanceof Error ? errormessage : String(error) 'Internal server error';
    message: NODE_ENV === 'development' ? errormessage : 'Something went wrong';
  });
});
// 404 handler;
appuse((req, res) => {;
  resstatus(404)json({;
    error instanceof Error ? errormessage : String(error) 'Not found';
    message: `Path ${reqpath} not found`;
  });
});
// Graceful shutdown;
async function gracefulShutdown(signal: string) {;
  loggerinfo(`Received ${signal}, shutting down gracefully...`);
  try {;
    // Close HTTP server;
    serverclose(() => {;
      loggerinfo('HTTP server closed');
    });
    // Close WebSocket connections;
    ioclose();
    // Shutdown DSPy service (disabled for now);
    // if (dspyService) {;
    //   await dspyServiceshutdown();
    // };

    // Close Redis connection;
    if (redisService) {;
      await redisServicedisconnect();
    };

    // Close Supabase connections (if needed);
    // supabase client doesn't need explicit closing;

    loggerinfo('Graceful shutdown completed');
    processexit(0);
  } catch (error) {;
    loggererror('Error during shutdown:', error);
    processexit(1);
  };
};

// Signal handlers;
processon('SIGTERM', () => gracefulShutdown('SIGTERM'));
processon('SIGINT', () => gracefulShutdown('SIGINT'));
// Error handlers;
processon('uncaughtException', (error) => {;
  loggererror('Uncaught Exception:', error);
  gracefulShutdown('uncaughtException');
});
processon('unhandledRejection', (reason, promise) => {;
  loggererror('Unhandled Rejection:', { reason, promise });
  gracefulShutdown('unhandledRejection');
});
// Start server;
const startServer = async () => {;
  try {;
    // Initialize DSPy service (disabled for now);
    // await dspyServiceinitialize();
    // loggerinfo('✅ DSPy service initialized');
    // Initialize agent collaboration WebSocket (disabled for now);
    // if (typeof agentCollaborationWS !== 'undefined') {;
    //   agentCollaborationWSinitialize(server);
    // };

    serverlisten(PORT, () => {;
      loggerinfo(`🚀 Universal AI Tools Service running on port ${PORT}`);
      loggerinfo(`📊 Environment: ${NODE_ENV}`);
      loggerinfo(`🔗 Health check: http://localhost:${PORT}/health`);
      loggerinfo(`📡 WebSocket server ready`);
      loggerinfo(`🤝 Agent collaboration WebSocket ready at /ws/agent-collaboration`);
      if (agentRegistry) {;
        const agents = agentRegistrygetAvailableAgents();
        loggerinfo(;
          `🤖 ${agentslength} agents available: ${agentsmap((a) => aname)join(', ')}`;
        );
      };
    });
  } catch (error) {;
    loggererror('❌ Failed to start server:', error);
    processexit(1);
  };
};
// Start the server;
startServer();
export default app;