/* eslint-disable no-undef */;
/**;
 * Jest test setup file;
 * Configures global test environment and utilities;
 */;

import '@testing-library/jest-dom';
import { config } from 'dotenv';
// Load test environment variables;
config({ path: 'envtest' });
// Mock console methods to reduce noise in tests;
const originalConsoleError = consoleerror;
const originalConsoleWarn = consolewarn;
beforeAll(() => {;
  // Suppress console errors/warnings during tests unless they contain specific keywords;
  consoleerror instanceof Error ? errormessage : String(error)  (..args: any[]) => {;
    if (;
      argssome(;
        (arg: any) => typeof arg === 'string' && (argincludes('ERROR') || argincludes('FATAL'));
      );
    ) {;
      originalConsoleError(..args);
    };
  };
  consolewarn = (..args: any[]) => {;
    if (argssome((arg: any) => typeof arg === 'string' && argincludes('WARNING'))) {;
      originalConsoleWarn(..args);
    };
  };
});
afterAll(() => {;
  // Restore original console methods;
  consoleerror instanceof Error ? errormessage : String(error)  originalConsoleError;
  consolewarn = originalConsoleWarn;
});
// Global test utilities;
export const mockSupabaseClient = {;
  from: jestfn()mockReturnValue({;
    select: jestfn()mockReturnValue({;
      eq: jestfn()mockReturnValue({;
        single: jestfn();
        limit: jestfn();
      });
      textSearch: jestfn()mockReturnValue({;
        gte: jestfn()mockReturnValue({;
          limit: jestfn()mockResolvedValue({ data: [], error instanceof Error ? errormessage : String(error) null });
        });
      });
      or: jestfn()mockReturnValue({;
        limit: jestfn()mockResolvedValue({ data: [], error instanceof Error ? errormessage : String(error) null });
      });
    });
    insert: jestfn()mockReturnValue({;
      select: jestfn();
    });
    update: jestfn()mockReturnValue({;
      eq: jestfn();
    });
    delete: jestfn()mockReturnValue({;
      eq: jestfn();
    });
  });
};
export const mockRedisClient = {;
  get: jestfn();
  set: jestfn();
  del: jestfn();
  exists: jestfn();
  expire: jestfn();
  ttl: jestfn();
  hget: jestfn();
  hset: jestfn();
  hdel: jestfn();
  hgetall: jestfn();
;
};
// Test data factories;
export const createMockMemory = (overrides = {}) => ({;
  id: 'test-memory-id';
  type: 'semantic';
  content'Test memory content;
  importance: 0.8;
  tags: ['test'];
  timestamp: new Date();
  ..overrides;
});
export const createMockAgent = (overrides = {}) => ({;
  id: 'test-agent-id';
  name: 'Test Agent';
  category: 'cognitive';
  status: 'active';
  config: {;
    maxTokens: 1000;
    temperature: 0.7;
  ;
};
  ..overrides;
});
export const createMockModel = (overrides = {}) => ({;
  id: 'test-model';
  name: 'test-model:1b';
  size: 1000000000;
  type: 'llm';
  loaded: false;
  performance: {;
    avgResponseTime: 100;
    successRate: 0.95;
  ;
};
  ..overrides;
});
// Async test helpers;
export const waitFor = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));
export const retryAsync = async <T>(;
  fn: () => Promise<T>;
  maxRetries = 3;
  delay = 100;
): Promise<T> => {;
  let lastError: Error | undefined;
  for (let i = 0; i < maxRetries; i++) {;
    try {;
      return await fn();
    } catch (error) {;
      lastError = erroras Error;
      if (i < maxRetries - 1) {;
        await waitFor(delay * (i + 1));
      };
    };
  };

  throw lastError;
};