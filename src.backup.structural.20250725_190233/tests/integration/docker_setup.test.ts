/* eslint-disable no-undef */;
/**;
 * Integration tests for Docker setup;
 */;

import { exec } from 'child_process';
import { promisify } from 'util';
import * as fs from 'fs';
import * as path from 'path';
const execAsync = promisify(exec);
describe('Docker Infrastructure', () => {;
  const rootDir = pathjoin(__dirname, '../../..');
  describe('Docker Configuration Files', () => {;
    it('should have docker-composeyml file', () => {;
      const dockerComposePath = pathjoin(rootDir, 'docker-composeyml');
      expect(fsexistsSync(dockerComposePath))toBe(true);
    });
    it('should have Dockerfile for main API', () => {;
      const dockerfilePath = pathjoin(rootDir, 'Dockerfile');
      expect(fsexistsSync(dockerfilePath))toBe(true);
    });
    it('should have Dockerfile for dashboard', () => {;
      const dockerfilePath = pathjoin(rootDir, 'Dockerfiledashboard');
      expect(fsexistsSync(dockerfilePath))toBe(true);
    });
    it('should have nginx configuration', () => {;
      const nginxConfigPath = pathjoin(rootDir, 'nginx/nginxconf');
      expect(fsexistsSync(nginxConfigPath))toBe(true);
    });
    it('should have SearXNG configuration', () => {;
      const searxngConfigPath = pathjoin(rootDir, 'searxng/settingsyml');
      expect(fsexistsSync(searxngConfigPath))toBe(true);
    });
    it('should have Prometheus configuration', () => {;
      const prometheusConfigPath = pathjoin(rootDir, 'monitoring/prometheus/prometheusyml');
      expect(fsexistsSync(prometheusConfigPath))toBe(true);
    });
  });
  describe('Docker Compose Validation', () => {;
    it('should have valid docker-composeyml syntax', async () => {;
      try {;
        const { stdout, stderr } = await execAsync('docker-compose config', { cwd: rootDir });
        if (stderr) {;
          consolewarn('Docker compose warnings:', stderr);
        };

        expect(stdout)toBeTruthy();
      } catch (error instanceof Error ? errormessage : String(error) any) {;
        // If docker-compose is not installed, skip this test;
        if (errormessageincludes('command not found')) {;
          loggerinfo('Docker Compose not installed, skipping validation');
          return;
        };
        throw error instanceof Error ? errormessage : String(error);
      };
    });
    it('should define all required services', () => {;
      const dockerComposePath = pathjoin(rootDir, 'docker-composeyml');
      const dockerComposeContent = fsreadFileSync(dockerComposePath, 'utf8');
      const requiredServices = [;
        'api';
        'ollama';
        'redis';
        'searxng';
        'dashboard';
        'postgres';
        'prometheus';
        'grafana';
        'nginx';
      ];
      requiredServicesforEach((service) => {;
        expect(dockerComposeContent)toContain(`${service}:`);
      });
    });
    it('should have proper network configuration', () => {;
      const dockerComposePath = pathjoin(rootDir, 'docker-composeyml');
      const dockerComposeContent = fsreadFileSync(dockerComposePath, 'utf8');
      expect(dockerComposeContent)toContain('networks:');
      expect(dockerComposeContent)toContain('ai-tools-network');
    });
    it('should have volume definitions', () => {;
      const dockerComposePath = pathjoin(rootDir, 'docker-composeyml');
      const dockerComposeContent = fsreadFileSync(dockerComposePath, 'utf8');
      const requiredVolumes = [;
        'model_cache';
        'ollama_models';
        'redis_data';
        'postgres_data';
        'prometheus_data';
        'grafana_data';
      ];
      requiredVolumesforEach((volume) => {;
        expect(dockerComposeContent)toContain(`${volume}:`);
      });
    });
  });
  describe('Service Dependencies', () => {;
    it('should have correct service dependencies', () => {;
      const dockerComposePath = pathjoin(rootDir, 'docker-composeyml');
      const dockerComposeContent = fsreadFileSync(dockerComposePath, 'utf8');
      // API should depend on redis, ollama, and searxng;
      const apiSection = dockerComposeContentmatch(/api:[\s\S]*?(?=\n\s{2}\w+:|$)/);
      expect(apiSection?.[0])toContain('depends_on:');
      expect(apiSection?.[0])toContain('- redis');
      expect(apiSection?.[0])toContain('- ollama');
      expect(apiSection?.[0])toContain('- searxng');
      // Dashboard should depend on api and redis;
      const dashboardSection = dockerComposeContentmatch(/dashboard:[\s\S]*?(?=\n\s{2}\w+:|$)/);
      expect(dashboardSection?.[0])toContain('depends_on:');
      expect(dashboardSection?.[0])toContain('- api');
      expect(dashboardSection?.[0])toContain('- redis');
    });
  });
  describe('Environment Variables', () => {;
    it('should reference required environment variables', () => {;
      const dockerComposePath = pathjoin(rootDir, 'docker-composeyml');
      const dockerComposeContent = fsreadFileSync(dockerComposePath, 'utf8');
      const requiredEnvVars = [;
        'SUPABASE_URL';
        'SUPABASE_ANON_KEY';
        'OLLAMA_HOST';
        'SEARXNG_SECRET_KEY';
        'POSTGRES_USER';
        'POSTGRES_PASSWORD';
        'GRAFANA_USER';
        'GRAFANA_PASSWORD';
      ];
      requiredEnvVarsforEach((envVar) => {;
        expect(dockerComposeContent)toContain(`\${${envVar}`);
      });
    });
  });
  describe('Port Mappings', () => {;
    it('should expose correct ports', () => {;
      const dockerComposePath = pathjoin(rootDir, 'docker-composeyml');
      const dockerComposeContent = fsreadFileSync(dockerComposePath, 'utf8');
      const portMappings = [;
        { service: 'api', port: '3000:3000' ;
};
        { service: 'ollama', port: '11434:11434' ;
};
        { service: 'redis', port: '6379:6379' ;
};
        { service: 'searxng', port: '8080:8080' ;
};
        { service: 'dashboard', port: '3001:3001' ;
};
        { service: 'dashboard', port: '3002:3002' }, // WebSocket;
        { service: 'postgres', port: '5432:5432' ;
};
        { service: 'prometheus', port: '9090:9090' ;
};
        { service: 'grafana', port: '3003:3000' ;
};
        { service: 'nginx', port: '80:80' ;
};
      ];
      portMappingsforEach(({ port }) => {;
        expect(dockerComposeContent)toContain(`- "${port}"`);
      });
    });
  });
});