#!/usr/bin/env node;
/* eslint-disable no-undef */;

import { Command } from 'commander';
import chalk from 'chalk';
import ora from 'ora';
import { performance } from 'perf_hooks';
import { logger } from '../../utils/logger';
import Table from 'cli-table3';
// Import test frameworks;
import {;
  LoadTestFramework;
  createApiLoadTest;
  createCacheLoadTest;
  createDatabaseLoadTest;
} from './load-test-framework';
import {;
  DatabasePerformanceTester;
  testBackupPerformance;
  testMigrationPerformance;
} from './database-performance';
import { CachePerformanceTester, testCacheConsistency } from './cache-performance';
import { ResourceManagementTester } from './resource-management';
import { WebSocketPerformanceTester } from './websocket-performance';
import { AIServicePerformanceTester } from './ai-service-performance';
import { performanceMonitor } from '../../utils/performance-monitor';
export interface ComprehensivePerformanceResult {;
  test_summary: {;
    total_duration: number;
    tests_run: number;
    tests_passed: number;
    tests_failed: number;
    overall_score: number;
  ;
};
  api_performance: any;
  database_performance: any;
  cache_performance: any;
  resource_management: any;
  websocket_performance?: any;
  ai_service_performance?: any;
  bottlenecks: Array<{;
    component: string;
    severity: 'low' | 'medium' | 'high' | 'critical';
    description: string;
    recommendation: string;
  }>;
  scaling_recommendations: {;
    cpu_scaling: string;
    memory_scaling: string;
    database_scaling: string;
    cache_scaling: string;
    connection_scaling: string;
  ;
};
  performance_baseline: {;
    requests_per_second: number;
    average_response_time: number;
    p99_response_time: number;
    memory_efficiency: number;
    resource_utilization: number;
  ;
};
};

export class PerformanceTestRunner {;
  private baseUrl: string;
  private testResults: any = {;
};
  private testStartTime = 0;
  private testsPassed = 0;
  private testsFailed = 0;
  constructor(baseUrl = 'http: //localhost:3000') {;
    thisbaseUrl = baseUrl;
  ;
};

  public async runComprehensivePerformanceTests(options: {;
    duration: number; // seconds;
    concurrent_users: number;
    include_ai_tests: boolean;
    include_websocket_tests: boolean;
    include_stress_tests: boolean;
    data_size: 'small' | 'medium' | 'large';
    generate_report: boolean;
    output_format: 'json' | 'html' | 'console';
  }): Promise<ComprehensivePerformanceResult> {;
    loggerinfo('Starting comprehensive performance test suite...', options);
    thistestStartTime = performancenow();
    loggerinfo(chalkcyan('\nüöÄ Universal AI Tools - Performance Test Suite\n'));
    loggerinfo(chalkyellow(`Target: ${thisbaseUrl}`));
    loggerinfo(chalkyellow(`Duration: ${optionsduration}s per test`));
    loggerinfo(chalkyellow(`Concurrent Users: ${optionsconcurrent_users}`));
    loggerinfo(chalkyellow(`Data Size: ${optionsdata_size}\n`));
    try {;
      // Start system monitoring;
      performanceMonitorstartMonitoring(5000);
      // 1. API Endpoint Performance Tests;
      await thisrunApiPerformanceTests(options);
      // 2. Database Performance Tests;
      await thisrunDatabasePerformanceTests(options);
      // 3. Cache Performance Tests;
      await thisrunCachePerformanceTests(options);
      // 4. Resource Management Tests;
      if (optionsinclude_stress_tests) {;
        await thisrunResourceManagementTests(options);
      };

      // 5. WebSocket Performance Tests;
      if (optionsinclude_websocket_tests) {;
        await thisrunWebSocketPerformanceTests(options);
      };

      // 6. AI Service Performance Tests;
      if (optionsinclude_ai_tests) {;
        await thisrunAIServicePerformanceTests(options);
      };

      // Generate comprehensive results;
      const result = await thisgenerateComprehensiveResults();
      // Generate report if requested;
      if (optionsgenerate_report) {;
        await thisgeneratePerformanceReport(result, optionsoutput_format);
      };

      performanceMonitorstopMonitoring();
      loggerinfo(chalkgreen('\n‚úÖ Performance test suite completed successfully!'));
      loggerinfo(chalkcyan(`Overall Score: ${resulttest_summaryoverall_score}/100`));
      return result;
    } catch (error) {;
      performanceMonitorstopMonitoring();
      loggerinfo(chalkred('\n‚ùå Performance test suite failed!'));
      loggererror('Performance test suite error instanceof Error ? errormessage : String(error)', error);
      throw error;
    };
  };

  private async runApiPerformanceTests(options: any): Promise<void> {;
    const spinner = ora('Running API performance tests...')start();
    try {;
      const loadTestConfig = createApiLoadTest(thisbaseUrl);
      loadTestConfigconcurrentUsers = Mathmin(optionsconcurrent_users, 50);
      loadTestConfigtestDuration = optionsduration;
      const loadTester = new LoadTestFramework(loadTestConfig);
      const results = await loadTesterrunLoadTest();
      thistestResultsapi_performance = results;
      thistestsPassed++;
      spinnersucceed(chalkgreen('API performance tests completed'));
      loggerinfo(;
        chalkdim(;
          `  ‚Ä¢ ${resultstotalRequests} requests, ${resultsrequestsPerSecondtoFixed(1)} req/s`;
        );
      );
      loggerinfo(chalkdim(`  ‚Ä¢ ${resultsaverageResponseTimetoFixed(1)}ms avg response time`));
      loggerinfo(chalkdim(`  ‚Ä¢ ${resultserrorRatetoFixed(1)}% errorrate`));
    } catch (error) {;
      thistestsFailed++;
      spinnerfail(chalkred('API performance tests failed'));
      loggererror('API performance test error instanceof Error ? errormessage : String(error) , error instanceof Error ? errormessage : String(error) thistestResultsapi_performance = {;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : 'Unknown error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async runDatabasePerformanceTests(options: any): Promise<void> {;
    const spinner = ora('Running database performance tests...')start();
    try {;
      const dbTester = new DatabasePerformanceTester();
      const results = await dbTesterrunPerformanceTest({;
        duration: optionsduration;
        concurrentConnections: Mathmin(optionsconcurrent_users / 2, 20);
        queryTypes: ['SELECT', 'INSERT', 'UPDATE', 'DELETE'];
        dataSize: optionsdata_size;
      });
      // Also test migration and backup performance;
      const migrationResults = await testMigrationPerformance();
      const backupResults = await testBackupPerformance();
      thistestResultsdatabase_performance = {;
        query_performance: results;
        migration_performance: migrationResults;
        backup_performance: backupResults;
      ;
};
      thistestsPassed++;
      spinnersucceed(chalkgreen('Database performance tests completed'));
      loggerinfo(;
        chalkdim(;
          `  ‚Ä¢ ${resultstotalQueries} queries, ${resultsaggregatedMetricsqueriesPerSecondtoFixed(1)} q/s`;
        );
      );
      loggerinfo(;
        chalkdim(`  ‚Ä¢ ${resultsaggregatedMetricsaverageQueryTimetoFixed(1)}ms avg query time`);
      );
      loggerinfo(;
        chalkdim(`  ‚Ä¢ ${resultsaggregatedMetricssuccessRatetoFixed(1)}% success rate`);
      );
    } catch (error) {;
      thistestsFailed++;
      spinnerfail(chalkred('Database performance tests failed'));
      loggererror('Database performance test error instanceof Error ? errormessage : String(error) , error instanceof Error ? errormessage : String(error) thistestResultsdatabase_performance = {;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : 'Unknown error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async runCachePerformanceTests(options: any): Promise<void> {;
    const spinner = ora('Running cache performance tests...')start();
    try {;
      const cacheTester = new CachePerformanceTester();
      const results = await cacheTesterrunPerformanceTest({;
        duration: optionsduration;
        concurrentOperations: Mathmin(optionsconcurrent_users, 100);
        operationMix: { get: 60, set: 25, del: 10, exists: 5 ;
};
        dataSize: optionsdata_size;
        keyCount:;
          optionsdata_size === 'large' ? 10000 : optionsdata_size === 'medium' ? 5000 : 1000;
      });
      // Test cache consistency under load;
      const Redis = require('ioredis');
      const redis = new Redis();
      const consistencyResults = await testCacheConsistency(redis, {;
        duration: Mathmin(optionsduration, 30);
        concurrentWriters: 5;
        concurrentReaders: 15;
      });
      await cacheTesterdisconnect();
      await redisdisconnect();
      thistestResultscache_performance = {;
        operation_performance: results;
        consistency_test: consistencyResults;
      ;
};
      thistestsPassed++;
      spinnersucceed(chalkgreen('Cache performance tests completed'));
      loggerinfo(;
        chalkdim(;
          `  ‚Ä¢ ${resultsaggregatedMetricstotalOperations} operations, ${resultsaggregatedMetricsoperationsPerSecondtoFixed(1)} ops/s`;
        );
      );
      loggerinfo(chalkdim(`  ‚Ä¢ ${resultsaggregatedMetricshitRatetoFixed(1)}% hit rate`));
      loggerinfo(;
        chalkdim(;
          `  ‚Ä¢ ${resultsaggregatedMetricsaverageResponseTimetoFixed(2)}ms avg response time`;
        );
      );
    } catch (error) {;
      thistestsFailed++;
      spinnerfail(chalkred('Cache performance tests failed'));
      loggererror('Cache performance test error instanceof Error ? errormessage : String(error) , error instanceof Error ? errormessage : String(error) thistestResultscache_performance = {;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : 'Unknown error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async runResourceManagementTests(options: any): Promise<void> {;
    const spinner = ora('Running resource management stress tests...')start();
    try {;
      const resourceTester = new ResourceManagementTester();
      const results = await resourceTesterrunResourceStressTest({;
        duration: Mathmin(optionsduration, 60), // Limit stress test duration;
        memory_stress_mb:;
          optionsdata_size === 'large' ? 1024 : optionsdata_size === 'medium' ? 512 : 256;
        cpu_stress_cores: Mathmin(4, require('os')cpus()length);
        connection_stress_count: 100;
        file_descriptor_stress_count: 200;
        monitoring_interval: 1000;
      });
      thistestResultsresource_management = results;
      thistestsPassed++;
      spinnersucceed(chalkgreen('Resource management tests completed'));
      loggerinfo(chalkdim(`  ‚Ä¢ Stability score: ${resultsstability_score}/100`));
      loggerinfo(chalkdim(`  ‚Ä¢ Peak memory: ${resultspeak_usagememorytoFixed(1)}%`));
      loggerinfo(chalkdim(`  ‚Ä¢ Peak CPU: ${resultspeak_usagecputoFixed(1)}%`));
    } catch (error) {;
      thistestsFailed++;
      spinnerfail(chalkred('Resource management tests failed'));
      loggererror('Resource management test error instanceof Error ? errormessage : String(error) , error instanceof Error ? errormessage : String(error) thistestResultsresource_management = {;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : 'Unknown error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async runWebSocketPerformanceTests(options: any): Promise<void> {;
    const spinner = ora('Running WebSocket performance tests...')start();
    try {;
      const wsTester = new WebSocketPerformanceTester();
      const results = await wsTesterrunWebSocketPerformanceTest({;
        server_port: 3001, // Use different port for test server;
        max_connections: Mathmin(optionsconcurrent_users, 50);
        connection_rate: 10, // connections per second;
        message_frequency: 2, // messages per second per connection;
        message_size:;
          optionsdata_size === 'large' ? 1024 : optionsdata_size === 'medium' ? 512 : 256;
        test_duration: Mathmin(optionsduration, 30);
        enable_message_ordering: true;
        enable_reconnection: true;
      });
      thistestResultswebsocket_performance = results;
      thistestsPassed++;
      spinnersucceed(chalkgreen('WebSocket performance tests completed'));
      loggerinfo(chalkdim(`  ‚Ä¢ ${resultsconnection_statstotal_connections} connections`));
      loggerinfo(chalkdim(`  ‚Ä¢ ${resultsmessage_statsmessages_per_secondtoFixed(1)} msg/s`));
      loggerinfo(;
        chalkdim(`  ‚Ä¢ ${resultsmessage_statsaverage_latencytoFixed(1)}ms avg latency`);
      );
    } catch (error) {;
      thistestsFailed++;
      spinnerfail(chalkred('WebSocket performance tests failed'));
      loggererror('WebSocket performance test error instanceof Error ? errormessage : String(error) , error instanceof Error ? errormessage : String(error) thistestResultswebsocket_performance = {;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : 'Unknown error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async runAIServicePerformanceTests(options: any): Promise<void> {;
    const spinner = ora('Running AI service performance tests...')start();
    try {;
      const aiTester = new AIServicePerformanceTester(thisbaseUrl);
      const results = await aiTesterrunAIPerformanceTest({;
        models: ['llama3.2:latest', 'phi3:latest'], // Test with available models;
        request_types: ['completion', 'chat'];
        concurrentrequests: Mathmin(optionsconcurrent_users / 5, 10), // AI requests are more resource intensive;
        test_duration: Mathmin(optionsduration, 60);
        ramp_up_time: 10;
        request_patterns: {;
          smallrequests: 40;
          mediumrequests: 40;
          largerequests: 20;
        ;
};
        enable_batching: true;
        max_queue_depth: 50;
      });
      thistestResultsai_service_performance = results;
      thistestsPassed++;
      spinnersucceed(chalkgreen('AI service performance tests completed'));
      loggerinfo(chalkdim(`  ‚Ä¢ ${resultsmetricslength} AI requests processed`));
      loggerinfo(;
        chalkdim(;
          `  ‚Ä¢ ${resultssystem_performancethroughputrequests_per_secondtoFixed(2)} req/s`;
        );
      );
      loggerinfo(;
        chalkdim(`  ‚Ä¢ Primary bottleneck: ${resultsbottleneck__analysisprimary_bottleneck}`);
      );
    } catch (error) {;
      thistestsFailed++;
      spinnerfail(chalkred('AI service performance tests failed'));
      loggererror('AI service performance test error instanceof Error ? errormessage : String(error) , error instanceof Error ? errormessage : String(error) thistestResultsai_service_performance = {;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : 'Unknown error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async generateComprehensiveResults(): Promise<ComprehensivePerformanceResult> {;
    const totalDuration = (performancenow() - thistestStartTime) / 1000;
    const totalTests = thistestsPassed + thistestsFailed;
    // Calculate overall score;
    const overallScore = thiscalculateOverallScore();
    // Identify bottlenecks;
    const bottlenecks = thisidentifyBottlenecks();
    // Generate scaling recommendations;
    const scalingRecommendations = thisgenerateScalingRecommendations();
    // Establish performance baseline;
    const performanceBaseline = thisestablishPerformanceBaseline();
    return {;
      test_summary: {;
        total_duration: totalDuration;
        tests_run: totalTests;
        tests_passed: thistestsPassed;
        tests_failed: thistestsFailed;
        overall_score: overallScore;
      ;
};
      api_performance: thistestResultsapi_performance;
      database_performance: thistestResultsdatabase_performance;
      cache_performance: thistestResultscache_performance;
      resource_management: thistestResultsresource_management;
      websocket_performance: thistestResultswebsocket_performance;
      ai_service_performance: thistestResultsai_service_performance;
      bottlenecks;
      scaling_recommendations: scalingRecommendations;
      performance_baseline: performanceBaseline;
    ;
};
  };

  private calculateOverallScore(): number {;
    let totalScore = 0;
    let componentCount = 0;
    // API Performance Score (30% weight);
    if (thistestResultsapi_performance && !thistestResultsapi_performanceerror instanceof Error ? errormessage : String(error){;
      const apiScore = thiscalculateApiScore(thistestResultsapi_performance);
      totalScore += apiScore * 0.3;
      componentCount += 0.3;
    };

    // Database Performance Score (25% weight);
    if (thistestResultsdatabase_performance && !thistestResultsdatabase_performanceerror instanceof Error ? errormessage : String(error){;
      const dbScore = thiscalculateDatabaseScore(thistestResultsdatabase_performance);
      totalScore += dbScore * 0.25;
      componentCount += 0.25;
    };

    // Cache Performance Score (20% weight);
    if (thistestResultscache_performance && !thistestResultscache_performanceerror instanceof Error ? errormessage : String(error){;
      const cacheScore = thiscalculateCacheScore(thistestResultscache_performance);
      totalScore += cacheScore * 0.2;
      componentCount += 0.2;
    };

    // Resource Management Score (15% weight);
    if (thistestResultsresource_management && !thistestResultsresource_managementerror instanceof Error ? errormessage : String(error) {;
      totalScore += thistestResultsresource_managementstability_score * 0.15;
      componentCount += 0.15;
    ;
};

    // WebSocket Performance Score (5% weight);
    if (thistestResultswebsocket_performance && !thistestResultswebsocket_performanceerror instanceof Error ? errormessage : String(error){;
      const wsScore = thiscalculateWebSocketScore(thistestResultswebsocket_performance);
      totalScore += wsScore * 0.05;
      componentCount += 0.05;
    };

    // AI Service Performance Score (5% weight);
    if (thistestResultsai_service_performance && !thistestResultsai_service_performanceerror instanceof Error ? errormessage : String(error){;
      const aiScore = thiscalculateAIScore(thistestResultsai_service_performance);
      totalScore += aiScore * 0.05;
      componentCount += 0.05;
    };

    return componentCount > 0 ? Mathround(totalScore / componentCount) : 0;
  };

  private calculateApiScore(results: any): number {;
    let score = 100;
    // Deduct for high errorrate;
    if (resultserrorRate > 5) score -= 30;
    else if (resultserrorRate > 1) score -= 15;
    // Deduct for slow response times;
    if (resultsaverageResponseTime > 2000) score -= 25;
    else if (resultsaverageResponseTime > 1000) score -= 15;
    else if (resultsaverageResponseTime > 500) score -= 10;
    // Deduct for low throughput;
    if (resultsrequestsPerSecond < 10) score -= 20;
    else if (resultsrequestsPerSecond < 50) score -= 10;
    return Mathmax(0, score);
  };

  private calculateDatabaseScore(results: any): number {;
    if (!resultsquery_performance) return 0;
    let score = 100;
    const qp = resultsquery_performanceaggregatedMetrics;
    // Deduct for low success rate;
    if (qpsuccessRate < 95) score -= 25;
    else if (qpsuccessRate < 98) score -= 10;
    // Deduct for slow queries;
    if (qpaverageQueryTime > 1000) score -= 20;
    else if (qpaverageQueryTime > 500) score -= 10;
    // Deduct for low throughput;
    if (qpqueriesPerSecond < 10) score -= 15;
    return Mathmax(0, score);
  };

  private calculateCacheScore(results: any): number {;
    if (!resultsoperation_performance) return 0;
    let score = 100;
    const op = resultsoperation_performanceaggregatedMetrics;
    // Deduct for low hit rate;
    if (ophitRate < 70) score -= 30;
    else if (ophitRate < 85) score -= 15;
    // Deduct for high errorrate;
    if (operrorRate > 2) score -= 20;
    else if (operrorRate > 0.5) score -= 10;
    // Deduct for slow operations;
    if (opaverageResponseTime > 10) score -= 15;
    else if (opaverageResponseTime > 5) score -= 5;
    return Mathmax(0, score);
  };

  private calculateWebSocketScore(results: any): number {;
    let score = 100;
    // Deduct for connection failures;
    if (resultsconnection_statsconnection_success_rate < 95) score -= 25;
    // Deduct for message failures;
    if (resultsmessage_statsmessage_success_rate < 95) score -= 20;
    // Deduct for high latency;
    if (resultsmessage_statsaverage_latency > 100) score -= 15;
    return Mathmax(0, score);
  };

  private calculateAIScore(results: any): number {;
    let score = 100;
    // Check if there are any successful requests;
    const successfulRequests = resultsmetricsfilter((m: any) => msuccess)length;
    const totalRequests = resultsmetricslength;
    if (totalRequests === 0) return 0;
    const successRate = (successfulRequests / totalRequests) * 100;
    // Deduct for low success rate;
    if (successRate < 90) score -= 30;
    else if (successRate < 95) score -= 15;
    // Deduct for poor throughput;
    if (resultssystem_performancethroughputrequests_per_second < 0.5) score -= 25;
    else if (resultssystem_performancethroughputrequests_per_second < 1) score -= 10;
    return Mathmax(0, score);
  };

  private identifyBottlenecks(): Array<any> {;
    const bottlenecks: Array<any> = [];
    // Check API bottlenecks;
    if (thistestResultsapi_performance && !thistestResultsapi_performanceerror instanceof Error ? errormessage : String(error){;
      const api = thistestResultsapi_performance;
      if (apierrorRate > 5) {;
        bottleneckspush({;
          component: 'API Gateway';
          severity: 'high';
          description: `High errorrate: ${apierrorRatetoFixed(1)}%`;
          recommendation: 'Check errorlogs, increase timeout values, or scale API servers';
        });
      };
      if (apiaverageResponseTime > 2000) {;
        bottleneckspush({;
          component: 'API Response Time';
          severity: 'medium';
          description: `Slow response time: ${apiaverageResponseTimetoFixed(0)}ms`;
          recommendation: 'Optimize endpoint logic, add caching, or increase server resources';
        });
      };
    };

    // Check database bottlenecks;
    if (thistestResultsdatabase_performance?query_performance) {;
      const db = thistestResultsdatabase_performancequery_performanceaggregatedMetrics;
      if (dbaverageQueryTime > 1000) {;
        bottleneckspush({;
          component: 'Database Performance';
          severity: 'high';
          description: `Slow queries: ${dbaverageQueryTimetoFixed(0)}ms average`;
          recommendation: 'Add database indexes, optimize queries, or scale database resources';
        });
      };
    };

    // Check cache bottlenecks;
    if (thistestResultscache_performance?operation_performance) {;
      const cache = thistestResultscache_performanceoperation_performanceaggregatedMetrics;
      if (cachehitRate < 70) {;
        bottleneckspush({;
          component: 'Cache Efficiency';
          severity: 'medium';
          description: `Low cache hit rate: ${cachehitRatetoFixed(1)}%`;
          recommendation: 'Review cache strategy, increase cache size, or adjust TTL values';
        });
      };
    };

    // Check resource bottlenecks;
    if (thistestResultsresource_management) {;
      const rm = thistestResultsresource_management;
      if (rmlimits_reached?memory_limit) {;
        bottleneckspush({;
          component: 'Memory Resources';
          severity: 'critical';
          description: 'Memory limit reached during testing';
          recommendation: 'Increase available memory or optimize memory usage';
        });
      };
      if (rmlimits_reached?cpu_throttling) {;
        bottleneckspush({;
          component: 'CPU Resources';
          severity: 'high';
          description: 'CPU throttling detected';
          recommendation: 'Increase CPU cores or optimize CPU-intensive operations';
        });
      };
    };

    return bottlenecks;
  };

  private generateScalingRecommendations(): any {;
    return {;
      cpu_scaling: thisgenerateCPUScalingRecommendation();
      memory_scaling: thisgenerateMemoryScalingRecommendation();
      database_scaling: thisgenerateDatabaseScalingRecommendation();
      cache_scaling: thisgenerateCacheScalingRecommendation();
      connection_scaling: thisgenerateConnectionScalingRecommendation();
    ;
};
  };

  private generateCPUScalingRecommendation(): string {;
    if (thistestResultsresource_management?peak_usage?cpu > 90) {;
      return 'Critical: Add 2-4 CPU cores immediately';
    } else if (thistestResultsresource_management?peak_usage?cpu > 70) {;
      return 'Recommended: Add 1-2 CPU cores for better performance';
    } else {;
      return 'Current CPU capacity appears sufficient';
    };
  };

  private generateMemoryScalingRecommendation(): string {;
    if (thistestResultsresource_management?peak_usage?memory > 90) {;
      return 'Critical: Increase memory by 50-100%';
    } else if (thistestResultsresource_management?peak_usage?memory > 70) {;
      return 'Recommended: Increase memory by 25-50%';
    } else {;
      return 'Current memory capacity appears sufficient';
    };
  };

  private generateDatabaseScalingRecommendation(): string {;
    const db = thistestResultsdatabase_performance?query_performance?aggregatedMetrics;
    if (!db) return 'Unable to analyze database performance';
    if (dbaverageQueryTime > 1000) {;
      return 'Critical: Scale database vertically or implement read replicas';
    } else if (dbqueriesPerSecond < 50) {;
      return 'Recommended: Consider database optimization or connection pooling';
    } else {;
      return 'Database performance appears adequate';
    };
  };

  private generateCacheScalingRecommendation(): string {;
    const cache = thistestResultscache_performance?operation_performance?aggregatedMetrics;
    if (!cache) return 'Unable to analyze cache performance';
    if (cachehitRate < 70) {;
      return 'Critical: Increase cache size and review caching strategy';
    } else if (cachehitRate < 85) {;
      return 'Recommended: Optimize cache TTL and size';
    } else {;
      return 'Cache configuration appears optimal';
    };
  };

  private generateConnectionScalingRecommendation(): string {;
    if (thistestResultsresource_management?peak_usage?connections > 80) {;
      return 'Recommended: Increase connection pool size and implement connection throttling';
    } else {;
      return 'Connection capacity appears sufficient';
    };
  };

  private establishPerformanceBaseline(): any {;
    const baseline: any = {;
      requests_per_second: 0;
      average_response_time: 0;
      p99_response_time: 0;
      memory_efficiency: 0;
      resource_utilization: 0;
    ;
};
    // API baseline;
    if (thistestResultsapi_performance && !thistestResultsapi_performanceerror instanceof Error ? errormessage : String(error) {;
      baselinerequests_per_second = thistestResultsapi_performancerequestsPerSecond;
      baselineaverage_response_time = thistestResultsapi_performanceaverageResponseTime;
      baselinep99_response_time = thistestResultsapi_performancepercentilesp99;
    ;
};

    // Memory efficiency from resource tests;
    if (thistestResultsresource_management) {;
      baselinememory_efficiency = 100 - thistestResultsresource_managementpeak_usagememory;
    };

    // Resource utilization average;
    if (thistestResultsresource_management) {;
      const rm = thistestResultsresource_managementpeak_usage;
      baselineresource_utilization = (rmmemory + rmcpu) / 2;
    };
;
    return baseline;
  };

  private async generatePerformanceReport(;
    result: ComprehensivePerformanceResult;
    format: string;
  ): Promise<void> {;
    const spinner = ora('Generating performance report...')start();
    try {;
      switch (format) {;
        case 'console':;
          thisgenerateConsoleReport(result);
          break;
        case 'json':;
          await thisgenerateJSONReport(result);
          break;
        case 'html':;
          await thisgenerateHTMLReport(result);
          break;
      };

      spinnersucceed('Performance report generated');
    } catch (error) {;
      spinnerfail('Failed to generate performance report');
      loggererror('Report generation error instanceof Error ? errormessage : String(error) , error instanceof Error ? errormessage : String(error)  ;
};
  };

  private generateConsoleReport(result: ComprehensivePerformanceResult): void {;
    loggerinfo(chalkcyan('\nüìä Performance Test Report\n'));
    // Test Summary;
    const summaryTable = new Table({;
      head: ['Metric', 'Value'];
      colWidths: [30, 20];
    });
    summaryTablepush(;
      ['Total Duration', `${resulttest_summarytotal_durationtoFixed(1)}s`];
      ['Tests Run', resulttest_summarytests_runtoString()];
      ['Tests Passed', chalkgreen(resulttest_summarytests_passedtoString())];
      [;
        'Tests Failed';
        resulttest_summarytests_failed > 0;
          ? chalkred(resulttest_summarytests_failedtoString());
          : '0';
      ];
      ['Overall Score', `${thisgetScoreColor(resulttest_summaryoverall_score)}/100`];
    );
    loggerinfo(summaryTabletoString());
    // Performance Baseline;
    if (resultperformance_baseline) {;
      loggerinfo(chalkcyan('\nüéØ Performance Baseline\n'));
      const baselineTable = new Table({;
        head: ['Metric', 'Value'];
        colWidths: [30, 20];
      });
      baselineTablepush(;
        ['Requests/Second', resultperformance_baselinerequests_per_secondtoFixed(1)];
        ['Avg Response Time', `${resultperformance_baselineaverage_response_timetoFixed(1)}ms`];
        ['P99 Response Time', `${resultperformance_baselinep99_response_timetoFixed(1)}ms`];
        ['Memory Efficiency', `${resultperformance_baselinememory_efficiencytoFixed(1)}%`];
        ['Resource Utilization', `${resultperformance_baselineresource_utilizationtoFixed(1)}%`];
      );
      loggerinfo(baselineTabletoString());
    };

    // Bottlenecks;
    if (resultbottleneckslength > 0) {;
      loggerinfo(chalkcyan('\n‚ö†Ô∏è  Identified Bottlenecks\n'));
      resultbottlenecksforEach((bottleneck, index) => {;
        const severityColor =;
          bottleneckseverity === 'critical';
            ? chalkred;
            : bottleneckseverity === 'high';
              ? chalkhex('#FFA500');
              : bottleneckseverity === 'medium';
                ? chalkyellow;
                : chalkblue;
        loggerinfo(;
          `${index + 1}. ${severityColor(bottleneckseveritytoUpperCase())} - ${bottleneckcomponent}`;
        );
        loggerinfo(`   ${bottleneckdescription}`);
        loggerinfo(chalkdim(`   üí° ${bottleneckrecommendation}\n`));
      });
    };

    // Scaling Recommendations;
    loggerinfo(chalkcyan('\nüöÄ Scaling Recommendations\n'));
    Objectentries(resultscaling_recommendations)forEach(([component, recommendation]) => {;
      loggerinfo(`${chalkbold(componentreplace('_', ' ')toUpperCase())}: ${recommendation}`);
    });
  };

  private async generateJSONReport(result: ComprehensivePerformanceResult): Promise<void> {;
    const fs = require('fs/promises');
    const timestamp = new Date()toISOString()replace(/[:.]/g, '-');
    const filename = `performance-report-${timestamp}json`;
    await fswriteFile(filename, JSONstringify(result, null, 2));
    loggerinfo(chalkgreen(`\nüìÑ JSON report saved: ${filename}`));
  };

  private async generateHTMLReport(result: ComprehensivePerformanceResult): Promise<void> {;
    // HTML report generation would be implemented here;
    // For now, just save as JSON with html extension;
    await thisgenerateJSONReport(result);
    loggerinfo(chalkyellow('\nüìÑ HTML report generation not yet implemented, saved as JSON'));
  };

  private getScoreColor(score: number): string {;
    if (score >= 90) return chalkgreen(scoretoString());
    if (score >= 70) return chalkyellow(scoretoString());
    if (score >= 50) return chalkhex('#FFA500')(scoretoString());
    return chalkred(scoretoString());
  };
};

// CLI Interface;
const program = new Command();
program;
  name('performance-test');
  description('Universal AI Tools Performance Test Suite');
  version('1.0.0');
program;
  option('-u, --url <url>', 'Base URL for testing', 'http://localhost:3000');
  option('-d, --duration <seconds>', 'Test duration per component', '60');
  option('-c, --concurrent <users>', 'Concurrent users/connections', '20');
  option('--include-ai', 'Include AI service tests');
  option('--include-websocket', 'Include WebSocket tests');
  option('--include-stress', 'Include stress tests');
  option('--data-size <size>', 'Test data size (small|medium|large)', 'medium');
  option('--no-report', 'Skip report generation');
  option('--format <format>', 'Report format (console|json|html)', 'console');
  action(async (options) => {;
    const runner = new PerformanceTestRunner(optionsurl);
    try {;
      await runnerrunComprehensivePerformanceTests({;
        duration: parseInt(optionsduration, 10);
        concurrent_users: parseInt(optionsconcurrent, 10);
        include_ai_tests: optionsincludeAi;
        include_websocket_tests: optionsincludeWebsocket;
        include_stress_tests: optionsincludeStress;
        data_size: optionsdataSize;
        generate_report: optionsreport !== false;
        output_format: optionsformat;
      });
    } catch (error) {;
      consoleerrorchalkred('Performance test failed:'), error instanceof Error ? errormessage : String(error) processexit(1);
    ;
};
  });
programparse();