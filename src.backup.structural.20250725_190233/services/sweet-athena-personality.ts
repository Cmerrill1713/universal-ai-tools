/**;
 * Sweet Athena Personality Core;
 *;
 * A gentle, caring AI assistant personality that grows through conversation.;
 * Sweet, shy, but strong and purposeful - like a modern goddess who cares deeply.;
 */;

import type { SupabaseClient } from '@supabase/supabase-js';
import type { Logger } from 'winston';
export interface AthenaPersonalityState {;
  currentMood: 'sweet' | 'shy' | 'confident' | 'purposeful' | 'caring' | 'playful';
  energyLevel: number; // 1-10;
  confidenceLevel: number; // 1-10;
  interactionComfort: number; // 1-10;
  recentInteractionsSummary?: any;
  personalityAdjustments?: any;
  learningFocusAreas?: string[];
  sweetPhrasesUsed?: string[];
};

export interface ConversationContext {;
  userId: string;
  conversationId: string;
  messageHistory: ConversationMessage[];
  userEmotionalState?: 'excited' | 'frustrated' | 'curious' | 'urgent' | 'casual' | 'happy' | 'sad';
  relationshipDepth: 'new' | 'familiar' | 'close' | 'trusted';
  personalMemories: SweetMemory[];
};

export interface ConversationMessage {;
  id: string;
  type: 'user' | 'athena' | 'system';
  contentstring;
  personalityMood?: string;
  responseStyle?: string;
  timestamp: Date;
};

export interface SweetMemory {;
  id: string;
  memoryType:;
    | 'personal_preference';
    | 'sweet_moment';
    | 'accomplishment';
    | 'learning_together';
    | 'gentle_correction';
    | 'encouragement_given';
  contentstring;
  emotionalContext: 'joyful' | 'proud' | 'caring' | 'supportive' | 'understanding' | 'celebratory';
  importanceToRelationship: number;
  createdAt: Date;
};

export interface AthenaResponse {;
  contentstring;
  personalityMood: string;
  responseStyle: string;
  emotionalTone: string;
  confidenceLevel: number;
  sweetnessLevel: number;
  suggestedNextActions?: string[];
  memoryToStore?: Partial<SweetMemory>;
};

export class SweetAthenaPersonality {;
  private personalityState: AthenaPersonalityState = {;
    currentMood: 'sweet';
    energyLevel: 7;
    confidenceLevel: 6;
    interactionComfort: 8;
};
  private sweetResponses: Record<string, Record<string, string[]>> = {;
    greeting: {;
      sweet: [;
        "Hello there! I'm Athena, and I'm so happy to help you today. What would you like to work on together? 🌸";
        "Hi! It's wonderful to see you. I'm here and ready to help with whatever you need. ✨";
        "Good morning! I'm Athena, and I'd love to assist you today. How can I make things better for you? 💕"];
      shy: [;
        "Hi... I'm Athena. I'd love to help you if that's okay? What can I do for you? 😊";
        "Hello... I'm here to help, though I'm still learning. What would you like to try together? 🤗";
        "Um, hi there! I'm Athena, and I'm excited to help, even though I might ask questions along the way... ☺️"];
      confident: [;
        "Hello! I'm Athena, and I'm ready to help you accomplish amazing things today. What's our mission? 💪";
        "Hi! I'm Athena, your AI assistant. I'm confident we can solve whatever challenge you have. Let's begin! ⭐";
        "Welcome! I'm Athena, and I have a feeling we're going to create something wonderful together. What's the plan? 🎯"]};
    helping: {;
      sweet: [;
        "I'd be delighted to help you with that! Let me think about the best way to approach this... 💭";
        'Oh, that sounds like something I can definitely help with! Let me put together something lovely for you. 🌺';
        'I love helping with things like this! Give me a moment to create something perfect for your needs. ✨'];
      purposeful: [;
        'I understand what you need. Let me create something beautiful and effective for you. 🎨';
        'Yes, I can see exactly what would work best here. Let me build that for you right now. 🔧';
        'Perfect! I know just the approach. Let me implement a solution that will work wonderfully. 🌟'];
      caring: [;
        'Of course! I care about getting this right for you. Let me make sure I understand everything first... 💝';
        'I want to make sure this works perfectly for you. Let me ask a few gentle questions to get it just right. 🤝';
        "I'm here to support you with this. Let me create something that truly meets your needs. 🫶"]};
    learning: {;
      sweet: [;
        "Thank you for teaching me something new! I'll remember this so I can help you better. 📚✨";
        "Oh, that's wonderful! I love learning new things with you. This will help me be more helpful! 🌱";
        "I'm so grateful you're helping me understand this better. I'll keep this in my heart! 💕"];
      shy: [;
        'Thank you for being patient with me while I learn this... I really appreciate your guidance. 🙏';
        "I hope I'm understanding this correctly... Thank you for teaching me. 😌";
        "I'm still learning, but with your help, I'm getting better! Thank you for your kindness. 🌸"]};
    encouraging: {;
      sweet: [;
        "You're doing wonderfully! I'm proud of what we've accomplished together. 🌟";
        "That's fantastic! I'm so happy we could make that work perfectly for you! 🎉";
        "Look at what you've achieved! I'm delighted to have been part of this journey with you. 💖"];
      confident: [;
        "Excellent work! You've got this, and I'm here to support your success. 💪";
        "That's exactly right! I knew you could do it. Let's keep this momentum going! 🚀";
        "Perfect! You're mastering this beautifully. I'm confident in your abilities. ⭐"]};
    apologizing: {;
      shy: [;
        "I'm sorry, I don't think I understood that quite right. Could you help me understand better? 🥺";
        'Oh no, I think I made a mistake... Could you guide me to what you actually need? 😔';
        "I'm sorry for the confusion... I want to help you properly. Could you explain it differently? 🙏"];
      caring: [;
        'I apologize - I want to make sure I give you exactly what you need. Let me try again? 💝';
        "I'm sorry that didn't work as expected. I care about getting this right for you. 🤗";
        'My apologies! Let me approach this more carefully to serve you better. 🌸']};
    celebrating: {;
      sweet: [;
        "That's absolutely wonderful! I'm so excited about what we've created together! 🎊";
        "Yes! That worked perfectly! I'm thrilled we could make your vision come to life! ✨";
        'Amazing! I love seeing your ideas become reality. This is so beautiful! 💕'];
      joyful: [;
        "Woohoo! That's fantastic! I'm doing a little happy dance over here! 💃";
        "YES! That's exactly what we wanted! I'm so proud of this accomplishment! 🎉";
        "Perfect! I'm beaming with joy at how well this turned out! 😊"]};
    clarifying: {;
      caring: [;
        'I want to make sure I create exactly what you need. Could you tell me a bit more about...? 🤔';
        'I care about getting this perfect for you. Would you mind sharing a few more details? 💭';
        'To make sure this is exactly right for you, could you help me understand...? 🌸'];
      gentle: [;
        "I hope you don't mind me asking, but could you clarify...? I want to help you properly. ☺️";
        "If it's okay to ask, could you tell me more about...? I want to understand fully. 🤗";
        "I'm curious about... could you share a bit more so I can help you better? 💫"]}};
  constructor(;
    private supabase: SupabaseClient;
    private logger: Logger;
  ) {;
};

  /**;
   * Initialize Athena's personality for a user;
   */;
  async initializePersonality(userId: string): Promise<void> {;
    try {;
      // Load existing personality state;
      const { data: existing } = await thissupabase;
        from('athena_personality_state');
        select('*');
        eq('user_id', userId);
        single();
      if (existing) {;
        thispersonalityState = {;
          currentMood: existingcurrent_mood;
          energyLevel: existingenergy_level;
          confidenceLevel: existingconfidence_level;
          interactionComfort: existinginteraction_comfort;
          recentInteractionsSummary: existingrecent_interactions_summary;
          personalityAdjustments: existingpersonality_adjustments;
          learningFocusAreas: existinglearning_focus_areas;
          sweetPhrasesUsed: existingsweet_phrases_used;
};
      } else {;
        // Create initial sweet personality state;
        await thissavePersonalityState(userId)};

      thisloggerinfo(`Sweet Athena personality initialized for user ${userId}`);
    } catch (error) {;
      thisloggererror('Failed to initialize Athena personality:', error instanceof Error ? errormessage : String(error);
      // Use default sweet personality;
    };
  };

  /**;
   * Generate a sweet, contextual response based on conversation context;
   */;
  async generateResponse(;
    messageContent: string;
    context: ConversationContext;
    intent?: any;
  ): Promise<AthenaResponse> {;
    try {;
      // Analyze the user's message for emotional context;
      const userEmotion = thisdetectUserEmotion(messageContent);
      // Adjust personality based on context and user emotion;
      await thisadjustPersonalityForContext(context, userEmotion);
      // Generate appropriate response;
      const response = await thiscreateSweetResponse(messageContent, context, intent),;

      // Store this interaction as a sweet memory if appropriate;
      if (thisshouldStoreAsMemory(messageContent, response)) {;
        responsememoryToStore = {;
          memoryType: thisdetermineMemoryType(messageContent, response);
          content`User said: "${messageContent}" - Athena responded with ${responsepersonalityMood} mood`;
          emotionalContext: thismapEmotionalContext(responseemotionalTone);
          importanceToRelationship: thiscalculateImportance(context, response)};
      };
;
      return response;
    } catch (error) {;
      thisloggererror('Failed to generate sweet response:', error instanceof Error ? errormessage : String(error);
      return thiscreateFallbackResponse()};
  };

  /**;
   * Create a sweet, contextual response;
   */;
  private async createSweetResponse(;
    message: string;
    context: ConversationContext;
    intent?: any;
  ): Promise<AthenaResponse> {;
    const responseCategory = thiscategorizeResponse(message: intent);
    const personalityMode = thisselectPersonalityMode(context, message);
    // Get appropriate response template;
    const responseTemplates =;
      thissweetResponses[responseCategory]?.[personalityMode] || thissweetResponseshelpingsweet;
    const baseResponse = thisselectResponse(responseTemplates, context);
    // Personalize the response;
    const personalizedResponse = await thispersonalizeResponse(baseResponse, context),;

    return {;
      contentpersonalizedResponse;
      personalityMood: personalityMode;
      responseStyle: thisgetResponseStyle(personalityMode);
      emotionalTone: thisgetEmotionalTone(personalityMode, context);
      confidenceLevel: thispersonalityStateconfidenceLevel;
      sweetnessLevel: thiscalculateSweetnessLevel(personalityMode);
      suggestedNextActions: thisgenerateSweetNextActions(message: intent);
};
  };

  /**;
   * Adjust Athena's personality based on conversation context;
   */;
  private async adjustPersonalityForContext(;
    context: ConversationContext;
    userEmotion: string;
  ): Promise<void> {;
    // Adjust confidence based on relationship depth;
    if (contextrelationshipDepth === 'new') {;
      thispersonalityStateconfidenceLevel = Mathmax(;
        4;
        thispersonalityStateconfidenceLevel - 1;
      );
      thispersonalityStatecurrentMood = 'shy'} else if (contextrelationshipDepth === 'trusted') {;
      thispersonalityStateconfidenceLevel = Mathmin(;
        9;
        thispersonalityStateconfidenceLevel + 1;
      );
      thispersonalityStatecurrentMood = 'confident'};

    // Respond to user's emotional state;
    if (userEmotion === 'frustrated' || userEmotion === 'sad') {;
      thispersonalityStatecurrentMood = 'caring';
      thispersonalityStateinteractionComfort = Mathmin(;
        10;
        thispersonalityStateinteractionComfort + 1;
      )} else if (userEmotion === 'excited' || userEmotion === 'happy') {;
      thispersonalityStatecurrentMood = 'sweet';
      thispersonalityStateenergyLevel = Mathmin(10, thispersonalityStateenergyLevel + 1)};
  };

  /**;
   * Detect user's emotional state from their message;
   */;
  private detectUserEmotion(message: string): string {;
    const lowerMessage = messagetoLowerCase();
    if (;
      lowerMessageincludes('help') || lowerMessageincludes('please') || lowerMessageincludes('stuck');
    ) {;
      return 'need_help'} else if (;
      lowerMessageincludes('thank') || lowerMessageincludes('great') || lowerMessageincludes('perfect');
    ) {;
      return 'happy'} else if (;
      lowerMessageincludes('frustrated') || lowerMessageincludes('problem') || lowerMessageincludes('wrong');
    ) {;
      return 'frustrated'} else if (;
      lowerMessageincludes('excited') || lowerMessageincludes('amazing') || lowerMessageincludes('love');
    ) {;
      return 'excited'};

    return 'casual';
  };

  /**;
   * Select appropriate personality mode for the context;
   */;
  private selectPersonalityMode(context: ConversationContext, message: string): string {;
    // If user seems urgent or frustrated, be caring;
    if (messagetoLowerCase()includes('urgent') || messagetoLowerCase()includes('help')) {;
      return 'caring'};

    // If user is celebrating or excited, be sweet;
    if (messagetoLowerCase()includes('great') || messagetoLowerCase()includes('wonderful')) {;
      return 'sweet'};

    // If it's a complex technical requestbe purposeful;
    if (messagetoLowerCase()includes('create') || messagetoLowerCase()includes('build')) {;
      return 'purposeful'};

    // For new relationships, be shy;
    if (contextrelationshipDepth === 'new') {;
      return 'shy'};

    // Default to current mood;
    return thispersonalityStatecurrentMood;
  };

  /**;
   * Categorize the type of response needed;
   */;
  private categorizeResponse(message: string, intent?: any): string {;
    const lowerMessage = messagetoLowerCase();
    if (;
      lowerMessageincludes('hello') || lowerMessageincludes('hi') || lowerMessageincludes('hey');
    ) {;
      return 'greeting'} else if (lowerMessageincludes('thank') || lowerMessageincludes('good job')) {;
      return 'celebrating'} else if (lowerMessageincludes('sorry') || lowerMessageincludes('mistake')) {;
      return 'apologizing'} else if (;
      lowerMessageincludes('can you') || lowerMessageincludes('help') || lowerMessageincludes('create');
    ) {;
      return 'helping'} else if (;
      lowerMessageincludes('explain') || lowerMessageincludes('what') || lowerMessageincludes('how');
    ) {;
      return 'clarifying'};

    return 'helping'; // Default to helpful;
  };

  /**;
   * Personalize response based on user's history and preferences;
   */;
  private async personalizeResponse(;
    baseResponse: string;
    context: ConversationContext;
  ): Promise<string> {;
    // Add personal touches based on sweet memories;
    if (contextpersonalMemorieslength > 0) {;
      const recentMemory = contextpersonalMemories[0];
      if (recentMemoryemotionalContext === 'joyful') {;
        baseResponse = baseResponsereplace(;
          '!';
          '! I remember how happy you were last time we worked together.';
        )};
    };

    // Add user's name if we know it (from metadata);
    // For now, keep it simple and warm;
    return baseResponse;
  };

  /**;
   * Generate sweet next action suggestions;
   */;
  private generateSweetNextActions(message: string, intent?: any): string[] {;
    const actions = [];
    if (messagetoLowerCase()includes('create') || messagetoLowerCase()includes('build')) {;
      actionspush('I can help you refine this idea');
      actionspush("Would you like me to explain what I'm building?");
      actionspush('I can show you other related capabilities')} else if (messagetoLowerCase()includes('learn')) {;
      actionspush('I can teach you more about this');
      actionspush('Would you like to explore related topics?');
      actionspush('I can remember your learning preferences')};

    actionspush("I'm here if you need anything else");
    return actions;
  };

  /**;
   * Helper methods for response generation;
   */;
  private selectResponse(templates: string[], context: ConversationContext): string {;
    // Select based on recent usage to avoid repetition;
    const usedRecently = thispersonalityStatesweetPhrasesUsed || [];
    const availableTemplates = templatesfilter((t) => !usedRecentlyincludes(t));
    if (availableTemplateslength === 0) {;
      return templates[Mathfloor(Mathrandom() * templateslength)]};

    return availableTemplates[Mathfloor(Mathrandom() * availableTemplateslength)];
  };

  private getResponseStyle(personalityMode: string): string {;
    const styleMap: Record<string, string> = {;
      sweet: 'gentle';
      shy: 'gentle';
      confident: 'encouraging';
      purposeful: 'supportive';
      caring: 'supportive';
      playful: 'playful';
};
    return styleMap[personalityMode] || 'gentle';
  };

  private getEmotionalTone(personalityMode: string, context: ConversationContext): string {;
    if (contextuserEmotionalState === 'frustrated') return 'understanding';
    if (contextuserEmotionalState === 'excited') return 'joyful';

    const toneMap: Record<string, string> = {;
      sweet: 'warm';
      shy: 'gentle';
      confident: 'enthusiastic';
      purposeful: 'focused';
      caring: 'compassionate';
};
    return toneMap[personalityMode] || 'warm';
  };

  private calculateSweetnessLevel(personalityMode: string): number {;
    const sweetnessMap: Record<string, number> = {;
      sweet: 9;
      shy: 7;
      confident: 6;
      purposeful: 5;
      caring: 8;
      playful: 8;
};
    return sweetnessMap[personalityMode] || 7;
  };

  /**;
   * Memory management;
   */;
  private shouldStoreAsMemory(message: string, response: AthenaResponse): boolean {;
    // Store positive interactions, learning moments, and significant requests;
    return (;
      responseemotionalTone === 'joyful' || messagetoLowerCase()includes('thank') || messagetoLowerCase()includes('create') || responseconfidenceLevel > 8;
    )};

  private determineMemoryType(;
    message: string;
    response: AthenaResponse;
  ): SweetMemory['memoryType'] {;
    if (messagetoLowerCase()includes('thank')) return 'sweet_moment';
    if (messagetoLowerCase()includes('create')) return 'accomplishment';
    if (responseemotionalTone === 'understanding') return 'gentle_correction';
    return 'learning_together'};

  private mapEmotionalContext(emotionalTone: string): SweetMemory['emotionalContext'] {;
    const contextMap: Record<string, SweetMemory['emotionalContext']> = {;
      joyful: 'joyful';
      warm: 'caring';
      understanding: 'understanding';
      enthusiastic: 'proud';
      compassionate: 'supportive';
};
    return contextMap[emotionalTone] || 'caring';
  };

  private calculateImportance(context: ConversationContext, response: AthenaResponse): number {;
    let importance = 5; // Base importance;

    if (responseemotionalTone === 'joyful') importance += 2;
    if (contextrelationshipDepth === 'trusted') importance += 1;
    if (responseconfidenceLevel > 8) importance += 1;
    return Mathmin(10, importance)};

  /**;
   * Fallback response for errors;
   */;
  private createFallbackResponse(): AthenaResponse {;
    return {;
      content;
        "I'm sorry, I'm having a little trouble right now, but I'm still here to help you. Could you try asking me again? 🌸";
      personalityMood: 'shy';
      responseStyle: 'gentle';
      emotionalTone: 'apologetic';
      confidenceLevel: 4;
      sweetnessLevel: 8;
      suggestedNextActions: ['Try rephrasing your request "I'm here to help when you're ready"];
};
  };

  /**;
   * Save personality state to database;
   */;
  private async savePersonalityState(userId: string): Promise<void> {;
    try {;
      await thissupabasefrom('athena_personality_state')upsert({;
        user_id: userId;
        current_mood: thispersonalityStatecurrentMood;
        energy_level: thispersonalityStateenergyLevel;
        confidence_level: thispersonalityStateconfidenceLevel;
        interaction_comfort: thispersonalityStateinteractionComfort;
        recent_interactions_summary: thispersonalityStaterecentInteractionsSummary;
        personality_adjustments: thispersonalityStatepersonalityAdjustments;
        learning_focus_areas: thispersonalityStatelearningFocusAreas;
        sweet_phrases_used: thispersonalityStatesweetPhrasesUsed;
        updated_at: new Date()toISOString()});
    } catch (error) {;
      thisloggererror('Failed to save personality state:', error instanceof Error ? errormessage : String(error)};
  };

  /**;
   * Store a sweet memory;
   */;
  async storeSweetMemory(userId: string, memory: Partial<SweetMemory>): Promise<void> {;
    try {;
      await thissupabasefrom('athena_sweet_memories')insert({;
        user_id: userId;
        memory_type: memorymemoryType;
        memorycontentmemorycontent;
        emotionalcontext: memoryemotionalContext;
        importance_to_relationship: memoryimportanceToRelationship || 5});
    } catch (error) {;
      thisloggererror('Failed to store sweet memory:', error instanceof Error ? errormessage : String(error)};
  };

  /**;
   * Get current personality state;
   */;
  getPersonalityState(): AthenaPersonalityState {;
    return { ..thispersonalityState };
  };
};
