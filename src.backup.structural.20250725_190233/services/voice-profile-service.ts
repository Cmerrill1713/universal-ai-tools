import { LogContext, logger } from '../utils/enhanced-logger';
import { type KokoroVoiceProfile, kokoroTTS } from './kokoro-tts-service';
interface VoiceProfile {;
  voice_id: string;
  pitch: number;
  speaking_rate: number;
  stability: number;
  similarity_boost: number;
  style: number;
  use_speaker_boost: boolean;
  description: string;
  emotional_range: {;
    warmth: number;
    breathiness: number;
    clarity: number;
    expressiveness: number;
  ;
};
};

interface PersonalityProfile {;
  name: string;
  description: string;
  base_profile: Partial<VoiceProfile>;
  sweetness_modifiers: {;
    pitch_multiplier: number;
    warmth_multiplier: number;
    breathiness_multiplier: number;
    speaking_rate_adjustment: number;
  ;
};
};

/**;
 * VoiceProfileService manages voice personalities and dynamic voice modulation.;
 * Provides 5 distinct personality profiles with sweetness-based parameter adjustment.;
 *;
 * Personalities:;
 * - Sweet: Warm, gentle, and inviting (default);
 * - Shy: Soft, reserved, endearing;
 * - Confident: Clear, assured, professional;
 * - Caring: Nurturing, empathetic, soothing;
 * - Playful: Bubbly, energetic, expressive;
 *;
 * Features:;
 * - Dynamic sweetness level adjustment (0.0-1.0);
 * - Voice parameter optimization per personality;
 * - ElevenLabs and OpenAI voice mapping;
 * - Emotional state modulation;
 */;
export class VoiceProfileService {;
  // Personality profiles with base settings and sweetness modifiers;
  private personalities: Record<string, PersonalityProfile> = {;
    sweet: {;
      name: 'Sweet';
      description: 'Warm, gentle, and inviting voice with a hint of sweetness';
      base_profile: {;
        pitch: 1.1;
        speaking_rate: 0.95;
        stability: 0.75;
        similarity_boost: 0.8;
        style: 0.6;
        use_speaker_boost: true;
        description: 'A warm and inviting voice that sounds caring and approachable';
      ;
};
      sweetness_modifiers: {;
        pitch_multiplier: 1.05;
        warmth_multiplier: 1.2;
        breathiness_multiplier: 1.1;
        speaking_rate_adjustment: -0.05;
      ;
};
    };
    shy: {;
      name: 'Shy';
      description: 'Soft, gentle voice with a touch of reserved sweetness';
      base_profile: {;
        pitch: 1.15;
        speaking_rate: 0.9;
        stability: 0.65;
        similarity_boost: 0.7;
        style: 0.4;
        use_speaker_boost: false;
        description: 'A soft, slightly hesitant voice that sounds endearing';
      };
      sweetness_modifiers: {;
        pitch_multiplier: 1.08;
        warmth_multiplier: 1.0;
        breathiness_multiplier: 1.3;
        speaking_rate_adjustment: -0.1;
      ;
};
    };
    confident: {;
      name: 'Confident';
      description: 'Clear, assured voice with professional warmth';
      base_profile: {;
        pitch: 1.0;
        speaking_rate: 1.0;
        stability: 0.85;
        similarity_boost: 0.9;
        style: 0.7;
        use_speaker_boost: true;
        description:;
          'A clear, confident voice that commands attention while remaining approachable';
      };
      sweetness_modifiers: {;
        pitch_multiplier: 1.02;
        warmth_multiplier: 1.1;
        breathiness_multiplier: 0.9;
        speaking_rate_adjustment: 0;
      ;
};
    };
    caring: {;
      name: 'Caring';
      description: 'Nurturing, soothing voice full of empathy';
      base_profile: {;
        pitch: 1.05;
        speaking_rate: 0.92;
        stability: 0.8;
        similarity_boost: 0.85;
        style: 0.5;
        use_speaker_boost: true;
        description: 'A nurturing voice that conveys genuine care and understanding';
      ;
};
      sweetness_modifiers: {;
        pitch_multiplier: 1.03;
        warmth_multiplier: 1.3;
        breathiness_multiplier: 1.15;
        speaking_rate_adjustment: -0.03;
      ;
};
    };
    playful: {;
      name: 'Playful';
      description: 'Bubbly, expressive voice with dynamic energy';
      base_profile: {;
        pitch: 1.08;
        speaking_rate: 1.05;
        stability: 0.6;
        similarity_boost: 0.75;
        style: 0.8;
        use_speaker_boost: true;
        description: 'An energetic, expressive voice that sounds fun and engaging';
      };
      sweetness_modifiers: {;
        pitch_multiplier: 1.1;
        warmth_multiplier: 1.15;
        breathiness_multiplier: 1.0;
        speaking_rate_adjustment: 0.05;
      ;
};
    };
  };
  private voiceIdMappings: Record<string, string> = {;
    // ElevenLabs voice IDs for attractive female voices;
    sweet: 'EXAVITQu4vr4xnSDxMaL', // Sarah - warm and friendly;
    shy: 'MF3mGyEYCl7XYWbV9V6O', // Elli - soft and gentle;
    confident: '21m00Tcm4TlvDq8ikWAM', // Rachel - clear and professional;
    caring: 'AZnzlk1XvdvUeBnXmlld', // Domi - nurturing and kind;
    playful: 'XB0fDUnXU5powFXDhCwa', // Charlotte - bubbly and expressive;
  };
  // Fallback OpenAI voice mappings;
  private openAIVoiceMappings: Record<string, string> = {;
    sweet: 'nova';
    shy: 'shimmer';
    confident: 'alloy';
    caring: 'echo';
    playful: 'fable';
  ;
};
  getVoiceProfile(personality: string, sweetnessLevel = 0.7): VoiceProfile {;
    const personalityProfile = thispersonalities[personality] || thispersonalitiessweet;
    const baseProfile = personalityProfilebase_profile;
    const modifiers = personalityProfilesweetness_modifiers;
    // Apply sweetness level to modify the voice characteristics;
    const adjustedProfile: VoiceProfile = {;
      voice_id: thisvoiceIdMappings[personality] || thisvoiceIdMappingssweet;
      pitch: (baseProfilepitch || 1.0) * (1 + (modifierspitch_multiplier - 1) * sweetnessLevel);
      speaking_rate:;
        (baseProfilespeaking_rate || 1.0) + modifiersspeaking_rate_adjustment * sweetnessLevel;
      stability: baseProfilestability || 0.75;
      similarity_boost: baseProfilesimilarity_boost || 0.8;
      style: baseProfilestyle || 0.6;
      use_speaker_boost:;
        baseProfileuse_speaker_boost !== undefined ? baseProfileuse_speaker_boost : true;
      description: baseProfiledescription || '';
      emotional_range: {;
        warmth: 0.7 * modifierswarmth_multiplier * sweetnessLevel;
        breathiness: 0.3 * modifiersbreathiness_multiplier * sweetnessLevel;
        clarity: 1.0 - 0.2 * sweetnessLevel, // Slightly less clarity with more sweetness;
        expressiveness: 0.6 + 0.2 * sweetnessLevel, // More expressive with sweetness;
      };
    };
    // Ensure values are within valid ranges;
    adjustedProfilepitch = Mathmax(0.5, Mathmin(2.0, adjustedProfilepitch));
    adjustedProfilespeaking_rate = Mathmax(0.5, Mathmin(1.5, adjustedProfilespeaking_rate));
    adjustedProfilestability = Mathmax(0, Mathmin(1, adjustedProfilestability));
    adjustedProfilesimilarity_boost = Mathmax(0, Mathmin(1, adjustedProfilesimilarity_boost));
    adjustedProfilestyle = Mathmax(0, Mathmin(1, adjustedProfilestyle));
    loggerinfo(;
      `Generated voice profile for ${personality} with sweetness ${sweetnessLevel}`;
      LogContextAVATAR;
      {;
        pitch: adjustedProfilepitch;
        speaking_rate: adjustedProfilespeaking_rate;
        emotional_range: adjustedProfileemotional_range;
      ;
};
    );
    return adjustedProfile;
  };

  getAllProfiles(): PersonalityProfile[] {;
    return Objectvalues(thispersonalities);
  };

  getOpenAIVoiceId(personality: string): string {;
    return thisopenAIVoiceMappings[personality] || 'nova';
  };

  async updateVoiceConfiguration(;
    personality: string;
    voiceId: string;
    settings?: any;
  ): Promise<unknown> {;
    // Update the voice ID mapping;
    thisvoiceIdMappings[personality] = voiceId;
    // Update base profile settings if provided;
    if (settings && thispersonalities[personality]) {;
      const profile = thispersonalities[personality];
      if (settingspitch_adjustment !== undefined) {;
        profilebase_profilepitch =;
          (profilebase_profilepitch || 1.0) + settingspitch_adjustment;
      };

      if (settingsspeaking_rate !== undefined) {;
        profilebase_profilespeaking_rate = settingsspeaking_rate;
      };

      if (settingsvolume_gain_db !== undefined) {;
        // Store volume gain for audio processing;
        profilebase_profilestyle = Mathmax(;
          0;
          Mathmin(1, (profilebase_profilestyle || 0.5) + settingsvolume_gain_db / 40);
        );
      };
    };

    return {;
      personality;
      voice_id: voiceId;
      settings: thispersonalities[personality]?base_profile;
    ;
};
  };

  getEmotionalParameters(personality: string, sweetnessLevel: number, emotion?: string): any {;
    const profile = thisgetVoiceProfile(personality, sweetnessLevel);
    // Adjust parameters based on emotion;
    const emotionalAdjustments: Record<string, unknown> = {;
      happy: {;
        pitch_multiplier: 1.1;
        speaking_rate_multiplier: 1.05;
        style_boost: 0.1;
      ;
};
      sad: {;
        pitch_multiplier: 0.95;
        speaking_rate_multiplier: 0.9;
        style_boost: -0.1;
      ;
};
      excited: {;
        pitch_multiplier: 1.15;
        speaking_rate_multiplier: 1.1;
        style_boost: 0.2;
      ;
};
      calm: {;
        pitch_multiplier: 0.98;
        speaking_rate_multiplier: 0.95;
        style_boost: -0.05;
      ;
};
      flirty: {;
        pitch_multiplier: 1.05;
        speaking_rate_multiplier: 0.98;
        style_boost: 0.15;
        breathiness_boost: 0.2;
      ;
};
    };
    const adjustment = emotionalAdjustments[emotion || 'neutral'] || {;
      pitch_multiplier: 1.0;
      speaking_rate_multiplier: 1.0;
      style_boost: 0;
    ;
};
    return {;
      pitch: profilepitch * adjustmentpitch_multiplier;
      speaking_rate: profilespeaking_rate * adjustmentspeaking_rate_multiplier;
      style: Mathmax(0, Mathmin(1, profilestyle + adjustmentstyle_boost));
      stability: profilestability;
      similarity_boost: profilesimilarity_boost;
      emotionalcontext: emotion;
      breathiness: profileemotional_rangebreathiness + (adjustmentbreathiness_boost || 0);
    ;
};
  };

  /**;
   * Get Kokoro-compatible voice profile based on personality and settings;
   */;
  getKokoroVoiceProfile(personality: string, sweetnessLevel = 0.7): KokoroVoiceProfile | null {;
    try {;
      const kokoroProfiles = kokoroTTSgetVoiceProfiles();
      // Map personality to Kokoro profile;
      const profileMap: Record<string, string> = {;
        sweet: 'athena-sweet';
        shy: 'athena-sweet', // Use sweet for shy as they're similar;
        confident: 'athena-confident';
        caring: 'athena-warm';
        playful: 'athena-playful';
      ;
};
      const kokoroProfileId = profileMap[personality] || 'athena-sweet';
      const baseProfile = kokoroProfilesfind((p) => pid === kokoroProfileId);
      if (!baseProfile) {;
        loggerwarn(`Kokoro profile not found for personality: ${personality}`, LogContextAVATAR);
        return null;
      };

      // Apply sweetness level adjustments;
      const adjustedProfile: KokoroVoiceProfile = {;
        ..baseProfile;
        pitch: baseProfilepitch + (sweetnessLevel - 0.5) * 0.4, // Adjust pitch based on sweetness;
        speed: baseProfilespeed - (sweetnessLevel - 0.5) * 0.2, // Slower = sweeter;
      };
      // Ensure values are within valid ranges;
      adjustedProfilepitch = Mathmax(-2.0, Mathmin(2.0, adjustedProfilepitch));
      adjustedProfilespeed = Mathmax(0.5, Mathmin(2.0, adjustedProfilespeed));
      return adjustedProfile;
    } catch (error) {;
      loggererror('Error getting Kokoro voice profile', LogContextAVATAR, { error instanceof Error ? errormessage : String(error));
      return null;
    };
  };

  /**;
   * Get enhanced voice configuration with provider-specific optimizations;
   */;
  getEnhancedVoiceConfig(;
    personality: string;
    sweetnessLevel: number;
    provider: 'kokoro' | 'openai' | 'elevenlabs' = 'kokoro';
  ): any {;
    const baseProfile = thisgetVoiceProfile(personality, sweetnessLevel);
    switch (provider) {;
      case 'kokoro':;
        const kokoroProfile = thisgetKokoroVoiceProfile(personality, sweetnessLevel);
        return {;
          provider: 'kokoro';
          profile: kokoroProfile;
          baseProfile;
          optimizations: {;
            temperature: 0.7;
            topP: 0.9;
            tokenLength: 150;
          ;
};
        };
      case 'openai':;
        return {;
          provider: 'openai';
          voice: thisgetOpenAIVoiceId(personality);
          baseProfile;
          optimizations: {;
            model: 'tts-1-hd';
            response_format: 'mp3';
            speed: baseProfilespeaking_rate;
          ;
};
        };
      case 'elevenlabs':;
        return {;
          provider: 'elevenlabs';
          voice_id: baseProfilevoice_id;
          baseProfile;
          optimizations: {;
            model_id: 'eleven_turbo_v2';
            voice_settings: {;
              stability: baseProfilestability;
              similarity_boost: baseProfilesimilarity_boost;
              style: baseProfilestyle;
              use_speaker_boost: baseProfileuse_speaker_boost;
            ;
};
          };
        };
      default:;
        return baseProfile;
    };
  };

  /**;
   * Dynamically adjust voice parameters based on context;
   */;
  adjustVoiceForContext(;
    baseProfile: VoiceProfile;
    context: {;
      textLength?: number;
      emotionalTone?: string;
      urgency?: 'low' | 'medium' | 'high';
      audience?: 'child' | 'adult' | 'professional';
    ;
};
  ): VoiceProfile {;
    const adjustedProfile = { ..baseProfile };
    // Adjust for text length;
    if (contexttextLength) {;
      if (contexttextLength > 1000) {;
        // Longer text - speak slightly faster and more clearly;
        adjustedProfilespeaking_rate *= 1.1;
        adjustedProfilestability = Mathmin(1, adjustedProfilestability + 0.1);
      } else if (contexttextLength < 50) {;
        // Short text - speak more expressively;
        adjustedProfilestyle = Mathmin(1, adjustedProfilestyle + 0.2);
      };
    };

    // Adjust for urgency;
    if (contexturgency) {;
      switch (contexturgency) {;
        case 'high':;
          adjustedProfilespeaking_rate *= 1.2;
          adjustedProfilepitch *= 1.05;
          break;
        case 'low':;
          adjustedProfilespeaking_rate *= 0.9;
          adjustedProfilepitch *= 0.98;
          break;
      };
    };

    // Adjust for audience;
    if (contextaudience) {;
      switch (contextaudience) {;
        case 'child':;
          adjustedProfilepitch *= 1.1;
          adjustedProfilespeaking_rate *= 0.9;
          adjustedProfilestyle = Mathmin(1, adjustedProfilestyle + 0.3);
          break;
        case 'professional':;
          adjustedProfilespeaking_rate *= 1.05;
          adjustedProfilestability = Mathmin(1, adjustedProfilestability + 0.2);
          adjustedProfilestyle = Mathmax(0, adjustedProfilestyle - 0.1);
          break;
      };
    };

    // Ensure all values remain within valid ranges;
    adjustedProfilepitch = Mathmax(0.5, Mathmin(2.0, adjustedProfilepitch));
    adjustedProfilespeaking_rate = Mathmax(0.5, Mathmin(1.5, adjustedProfilespeaking_rate));
    adjustedProfilestability = Mathmax(0, Mathmin(1, adjustedProfilestability));
    adjustedProfilesimilarity_boost = Mathmax(0, Mathmin(1, adjustedProfilesimilarity_boost));
    adjustedProfilestyle = Mathmax(0, Mathmin(1, adjustedProfilestyle));
    loggerdebug('Voice profile adjusted for context', LogContextAVATAR, {;
      originalProfile: baseProfile;
      adjustedProfile;
      context;
    });
    return adjustedProfile;
  };

  /**;
   * Get voice profile statistics and analytics;
   */;
  getVoiceProfileStats(): {;
    totalProfiles: number;
    availablePersonalities: string[];
    defaultSettings: any;
    kokoroIntegration: boolean;
  } {;
    return {;
      totalProfiles: Objectkeys(thispersonalities)length;
      availablePersonalities: Objectkeys(thispersonalities);
      defaultSettings: {;
        defaultSweetnessLevel: 0.7;
        defaultPersonality: 'sweet';
        supportedFormats: ['mp3', 'wav'];
        supportedProviders: ['kokoro', 'openai', 'elevenlabs'];
      };
      kokoroIntegration: kokoroTTSgetVoiceProfiles()length > 0;
    ;
};
  };

  /**;
   * Validate voice configuration;
   */;
  validateVoiceConfig(config: any): {;
    isValid: boolean;
    errors: string[];
    warnings: string[];
  } {;
    const errors: string[] = [];
    const warnings: string[] = [];
    // Check personality;
    if (configpersonality && !thispersonalities[configpersonality]) {;
      errorspush(`Invalid personality: ${configpersonality}`);
    };

    // Check sweetness level;
    if (configsweetness_level !== undefined) {;
      if (;
        typeof configsweetness_level !== 'number' || configsweetness_level < 0 || configsweetness_level > 1;
      ) {;
        errorspush('Sweetness level must be a number between 0 and 1');
      };
    };

    // Check voice settings;
    if (configvoice_settings) {;
      const settings = configvoice_settings;
      if (;
        settingsstability !== undefined && (typeof settingsstability !== 'number' || settingsstability < 0 || settingsstability > 1);
      ) {;
        errorspush('Stability must be a number between 0 and 1');
      };

      if (;
        settingssimilarity_boost !== undefined && (typeof settingssimilarity_boost !== 'number' || settingssimilarity_boost < 0 || settingssimilarity_boost > 1);
      ) {;
        errorspush('Similarity boost must be a number between 0 and 1');
      };
    };

    // Check provider compatibility;
    if (configprovider === 'kokoro' && kokoroTTSgetVoiceProfiles()length === 0) {;
      warningspush('Kokoro provider requested but no Kokoro profiles available');
    };

    return {;
      isValid: errorslength === 0;
      errors;
      warnings;
    ;
};
  };
};
