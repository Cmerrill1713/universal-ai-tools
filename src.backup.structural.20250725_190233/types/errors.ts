/**;
 * Error Types and Constants for Consistent Error Handling;
 * Shared between frontend and backend for uniform errorhandling;
 */;

// Error Codes - Consistent across frontend and backend;
export enum ErrorCode {;
  // Authentication & Authorization;
  UNAUTHORIZED = 'UNAUTHORIZED';
  FORBIDDEN = 'FORBIDDEN';
  INVALID_API_KEY = 'INVALID_API_KEY';
  TOKEN_EXPIRED = 'TOKEN_EXPIRED';
  INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS';
  // Validation;
  VALIDATION_ERROR = 'VALIDATION_ERROR';
  INVALID_REQUEST = 'INVALID_REQUEST';
  MISSING_REQUIRED_FIELD = 'MISSING_REQUIRED_FIELD';
  INVALID_FORMAT = 'INVALID_FORMAT';
  REQUEST_TOO_LARGE = 'REQUEST_TOO_LARGE';
  // Agent Related;
  AGENT_NOT_FOUND = 'AGENT_NOT_FOUND';
  AGENT_UNAVAILABLE = 'AGENT_UNAVAILABLE';
  AGENT_EXECUTION_ERROR = 'AGENT_EXECUTION_ERROR';
  AGENT_TIMEOUT = 'AGENT_TIMEOUT';
  AGENT_OVERLOAD = 'AGENT_OVERLOAD';
  // Orchestration;
  ORCHESTRATION_ERROR = 'ORCHESTRATION_ERROR';
  COORDINATION_FAILED = 'COORDINATION_FAILED';
  ORCHESTRATION_TIMEOUT = 'ORCHESTRATION_TIMEOUT';
  INVALID_ORCHESTRATION_MODE = 'INVALID_ORCHESTRATION_MODE';
  // Memory & Knowledge;
  MEMORY_NOT_FOUND = 'MEMORY_NOT_FOUND';
  MEMORY_STORAGE_ERROR = 'MEMORY_STORAGE_ERROR';
  KNOWLEDGE_SEARCH_ERROR = 'KNOWLEDGE_SEARCH_ERROR';
  EMBEDDING_ERROR = 'EMBEDDING_ERROR';
  // Tools;
  TOOL_NOT_FOUND = 'TOOL_NOT_FOUND';
  TOOL_EXECUTION_ERROR = 'TOOL_EXECUTION_ERROR';
  TOOL_TIMEOUT = 'TOOL_TIMEOUT';
  INVALID_TOOL_PARAMETERS = 'INVALID_TOOL_PARAMETERS';
  // System & Infrastructure;
  INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR';
  SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE';
  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED';
  CIRCUIT_BREAKER_OPEN = 'CIRCUIT_BREAKER_OPEN';
  DATABASE_ERROR = 'DATABASE_ERROR';
  EXTERNAL_SERVICE_ERROR = 'EXTERNAL_SERVICE_ERROR';
  // Network & Communication;
  NETWORK_ERROR = 'NETWORK_ERROR';
  TIMEOUT = 'TIMEOUT';
  CONNECTION_ERROR = 'CONNECTION_ERROR';
  WEBSOCKET_ERROR = 'WEBSOCKET_ERROR';
  // File & Upload;
  FILE_NOT_FOUND = 'FILE_NOT_FOUND';
  FILE_TOO_LARGE = 'FILE_TOO_LARGE';
  INVALID_FILE_TYPE = 'INVALID_FILE_TYPE';
  UPLOAD_ERROR = 'UPLOAD_ERROR';
  // Speech & Audio;
  SPEECH_SYNTHESIS_ERROR = 'SPEECH_SYNTHESIS_ERROR';
  AUDIO_PROCESSING_ERROR = 'AUDIO_PROCESSING_ERROR';
  VOICE_NOT_AVAILABLE = 'VOICE_NOT_AVAILABLE';
  // Configuration;
  CONFIGURATION_ERROR = 'CONFIGURATION_ERROR';
  FEATURE_NOT_ENABLED = 'FEATURE_NOT_ENABLED';
  INVALID_CONFIGURATION = 'INVALID_CONFIGURATION';
};

// Error Severity Levels;
export enum ErrorSeverity {;
  LOW = 'low';
  MEDIUM = 'medium';
  HIGH = 'high';
  CRITICAL = 'critical';
};

// Structured Error Interface;
export interface AppError {;
  code: ErrorCode;
  message: string;
  severity: ErrorSeverity;
  details?: string | Record<string, unknown>;
  timestamp: string;
  requestId?: string;
  userId?: string;
  sessionId?: string;
  component?: string;
  stack?: string;
  context?: Record<string, unknown>;
};

// Error Response for API;
export interface ErrorResponse {;
  success: false;
  error instanceof Error ? errormessage : String(error) AppError;
  meta?: {;
    requestId: string;
    timestamp: string;
    version: string;
  ;
};
};

// Validation Error Details;
export interface ValidationError {;
  field: string;
  value: any;
  message: string;
  constraint?: string;
;
};

export interface ValidationErrorResponse extends ErrorResponse {;
  error instanceof Error ? errormessage : String(error) AppError & {;
    code: ErrorCodeVALIDATION_ERROR;
    validationErrors: ValidationError[];
  ;
};
};

// Rate Limit Error Details;
export interface RateLimitError extends AppError {;
  code: ErrorCodeRATE_LIMIT_EXCEEDED;
  retryAfter: number; // seconds;
  limit: number;
  remaining: number;
  resetTime: string;
;
};

// Agent Error Details;
export interface AgentError extends AppError {;
  agentId: string;
  agentName: string;
  task?: string;
  executionTime?: number;
;
};

// Tool Error Details;
export interface ToolError extends AppError {;
  toolName: string;
  parameters?: Record<string, unknown>;
  executionTime?: number;
;
};

// System Error Details;
export interface SystemError extends AppError {;
  systemComponent: string;
  resourceUsage?: {;
    memory: number;
    cpu: number;
  ;
};
  dependencyStatus?: Record<string, 'healthy' | 'degraded' | 'unhealthy'>;
};

// Error Factory Functions for consistent errorcreation;
export class ErrorFactory {;
  static createValidationError(;
    message: string;
    validationErrors: ValidationError[];
    requestId?: string;
  ): ValidationErrorResponse {;
    return {;
      success: false;
      error instanceof Error ? errormessage : String(error){;
        code: ErrorCodeVALIDATION_ERROR;
        message;
        severity: ErrorSeverityMEDIUM;
        timestamp: new Date()toISOString();
        requestId;
        validationErrors;
      ;
};
    };
  };

  static createAgentError(;
    agentId: string;
    agentName: string;
    message: string;
    details?: any;
  ): AgentError {;
    return {;
      code: ErrorCodeAGENT_EXECUTION_ERROR;
      message;
      severity: ErrorSeverityHIGH;
      timestamp: new Date()toISOString();
      agentId;
      agentName;
      details;
    ;
};
  };

  static createRateLimitError(limit: number, retryAfter: number): RateLimitError {;
    return {;
      code: ErrorCodeRATE_LIMIT_EXCEEDED;
      message: `Rate limit exceeded. Maximum ${limit} requests allowed.`;
      severity: ErrorSeverityMEDIUM;
      timestamp: new Date()toISOString();
      retryAfter;
      limit;
      remaining: 0;
      resetTime: new Date(Datenow() + retryAfter * 1000)toISOString();
    ;
};
  };

  static createSystemError(component: string, message: string, details?: any): SystemError {;
    return {;
      code: ErrorCodeINTERNAL_SERVER_ERROR;
      message;
      severity: ErrorSeverityCRITICAL;
      timestamp: new Date()toISOString();
      systemComponent: component;
      details;
    ;
};
  };
};

// HTTP Status Code Mapping;
export const ErrorCodeToHttpStatus: Record<ErrorCode, number> = {;
  [ErrorCodeUNAUTHORIZED]: 401;
  [ErrorCodeFORBIDDEN]: 403;
  [ErrorCodeINVALID_API_KEY]: 401;
  [ErrorCodeTOKEN_EXPIRED]: 401;
  [ErrorCodeINSUFFICIENT_PERMISSIONS]: 403;
  [ErrorCodeVALIDATION_ERROR]: 400;
  [ErrorCodeINVALID_REQUEST]: 400;
  [ErrorCodeMISSING_REQUIRED_FIELD]: 400;
  [ErrorCodeINVALID_FORMAT]: 400;
  [ErrorCodeREQUEST_TOO_LARGE]: 413;
  [ErrorCodeAGENT_NOT_FOUND]: 404;
  [ErrorCodeAGENT_UNAVAILABLE]: 503;
  [ErrorCodeAGENT_EXECUTION_ERROR]: 500;
  [ErrorCodeAGENT_TIMEOUT]: 408;
  [ErrorCodeAGENT_OVERLOAD]: 503;
  [ErrorCodeORCHESTRATION_ERROR]: 500;
  [ErrorCodeCOORDINATION_FAILED]: 500;
  [ErrorCodeORCHESTRATION_TIMEOUT]: 408;
  [ErrorCodeINVALID_ORCHESTRATION_MODE]: 400;
  [ErrorCodeMEMORY_NOT_FOUND]: 404;
  [ErrorCodeMEMORY_STORAGE_ERROR]: 500;
  [ErrorCodeKNOWLEDGE_SEARCH_ERROR]: 500;
  [ErrorCodeEMBEDDING_ERROR]: 500;
  [ErrorCodeTOOL_NOT_FOUND]: 404;
  [ErrorCodeTOOL_EXECUTION_ERROR]: 500;
  [ErrorCodeTOOL_TIMEOUT]: 408;
  [ErrorCodeINVALID_TOOL_PARAMETERS]: 400;
  [ErrorCodeINTERNAL_SERVER_ERROR]: 500;
  [ErrorCodeSERVICE_UNAVAILABLE]: 503;
  [ErrorCodeRATE_LIMIT_EXCEEDED]: 429;
  [ErrorCodeCIRCUIT_BREAKER_OPEN]: 503;
  [ErrorCodeDATABASE_ERROR]: 500;
  [ErrorCodeEXTERNAL_SERVICE_ERROR]: 502;
  [ErrorCodeNETWORK_ERROR]: 500;
  [ErrorCodeTIMEOUT]: 408;
  [ErrorCodeCONNECTION_ERROR]: 500;
  [ErrorCodeWEBSOCKET_ERROR]: 500;
  [ErrorCodeFILE_NOT_FOUND]: 404;
  [ErrorCodeFILE_TOO_LARGE]: 413;
  [ErrorCodeINVALID_FILE_TYPE]: 400;
  [ErrorCodeUPLOAD_ERROR]: 500;
  [ErrorCodeSPEECH_SYNTHESIS_ERROR]: 500;
  [ErrorCodeAUDIO_PROCESSING_ERROR]: 500;
  [ErrorCodeVOICE_NOT_AVAILABLE]: 404;
  [ErrorCodeCONFIGURATION_ERROR]: 500;
  [ErrorCodeFEATURE_NOT_ENABLED]: 501;
  [ErrorCodeINVALID_CONFIGURATION]: 500;
;
};