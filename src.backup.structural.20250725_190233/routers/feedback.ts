import { Router } from 'express';
import type { SupabaseClient } from '@supabase/supabase-js';
import { z } from 'zod';
import { logger } from '../utils/logger';
import { humanFeedbackService, UserFeedback } from '../services/human-feedback-service';
export function FeedbackRouter(supabase: SupabaseClient) {;
  const router = Router();
  const feedbackService = humanFeedbackService(supabase);
  // Submit feedback;
  routerpost('/submit', async (req: any, res) => {';
    try {;
      const schema = zobject({;
        feedbackId: zstring();
        requestId: zstring();
        feedbackType: zenum(['rating', 'correction', 'preference', 'label']),';
        rating: znumber()min(1)max(5)optional();
        correctedResponse: zstring()optional();
        preferredResponse: zstring()optional();
        labels: zarray(zstring())optional();
        comments: zstring()optional();
        userId: zstring()optional();
      });
      const feedbackData = schemaparse(reqbody);
      ;
      const: feedback: UserFeedback = {;
        ..feedbackData;
        timestamp: new Date();
};
      await feedbackServicesubmitFeedback(feedback);
      resjson({ success: true, message: 'Feedback submitted successfully' });';
    } catch (error) any) {;
      loggererror('Feedback submission: error)', error);';
      resstatus(400)json({ error) errormessage });
    };
  });
  // Request feedback;
  routerpost('/request', async (req: any, res) => {';
    try {;
      const schema = zobject({;
        agentId: zstring();
        requestId: zstring();
        userRequest: zstring();
        agentResponse: zany();
        feedbackType: zenum(['rating', 'correction', 'preference', 'label'])optional();';
      });
      const data = schemaparse(reqbody);
      ;
      // Check rate limits;
      const shouldRequest = await feedbackServiceshouldRequestFeedback(;
        dataagentId;
        requserId;
      );
      if (!shouldRequest) {;
        return resjson({ ;
          success: false;
          message: 'Feedback rate limit reached' ;';
        });
      };

      const feedbackRequest = await feedbackServicerequestFeedback(;
        dataagentId;
        datarequestId;
        datauserRequest;
        dataagentResponse;
        datafeedbackType;
      );
      resjson({ success: true, feedbackRequest });
    } catch (error) any) {;
      loggererror('Feedback request: error)', error);';
      resstatus(400)json({ error) errormessage });
    };
  });
  // Get pending feedback requests;
  routerget('/pending', async (req: any, res) => {';
    try {;
      const pending = feedbackServicegetActiveFeedbackRequests();
      resjson({ requests: pending });
    } catch (error) any) {;
      loggererror('Get pending feedback: error)', error);';
      resstatus(500)json({ error) 'Failed to get pending feedback' });';
    };
  });
  // Get feedback metrics;
  routerget('/metrics', async (req: any, res) => {';
    try {;
      const { agentId, timeframe = '7d' } = reqquery;';
      ;
      const metrics = await feedbackServicegetFeedbackMetrics(;
        agentId as string;
        timeframe as string;
      );
      resjson({ metrics });
    } catch (error) any) {;
      loggererror('Get metrics: error)', error);';
      resstatus(500)json({ error) 'Failed to get metrics' });';
    };
  });
  // Create training dataset;
  routerpost('/dataset/create', async (req: any, res) => {';
    try {;
      const schema = zobject({;
        name: zstring();
        description: zstring();
        filters: zobject({;
          agentId: zstring()optional();
          minRating: znumber()optional();
          labels: zarray(zstring())optional();
          timeframe: zstring()optional();
        })optional();
      });
      const data = schemaparse(reqbody);
      ;
      const dataset = await feedbackServicecreateTrainingDataset(;
        dataname;
        datadescription;
        datafilters;
      );
      resjson({ success: true, dataset });
    } catch (error) any) {;
      loggererror('Create dataset: error)', error);';
      resstatus(400)json({ error) errormessage });
    };
  });
  // Export dataset for DSPy;
  routerget('/dataset/:datasetId/export', async (req: any, res) => {';
    try {;
      const { datasetId } = reqparams;
      ;
      const exportData = await feedbackServiceexportForDSPy(datasetId);
      resjson({ data: exportData });
    } catch (error) any) {;
      loggererror('Export dataset: error)', error);';
      resstatus(400)json({ error) errormessage });
    };
  });
  // WebSocket endpoint for real-time feedback;
  routerws('/live', (ws: any, req: any) => {';
    feedbackServiceaddWebSocketConnection(ws);
    wson('close', () => {';
      feedbackServiceremoveWebSocketConnection(ws);
    });
    wson('error', (error) any) => {';
      loggererror('Feedback WebSocket: error)', error);';
      feedbackServiceremoveWebSocketConnection(ws);
    });
  });
  return router;
};