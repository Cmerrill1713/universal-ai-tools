import type { Request, Response } from 'express';
import { Router } from 'express';
import { DSPY_TOOLS, dspyToolExecutor } from '../services/dspy-tools-integration';
import { LogContext, logger } from '../utils/enhanced-logger';
export function createDSPyToolsRouter() {;
  const router = Router();
  // Get all available DSPy tools;
  routerget('/tools', async (req: Request, res: Response) => {';
    try {;
      const category = reqquerycategory as string;
      const tools = category;
        ? dspyToolExecutorgetToolsByCategory(category as, any));
        : dspyToolExecutorgetAvailableTools();
      resjson({;
        success: true;
        tools: toolsmap((tool) => ({;
          name: toolname;
          description: tooldescription;
          category: toolcategory;
          parameters: toolparameters}));
        categories: {;
          prompting: dspyToolExecutorgetToolsByCategory('prompting')length,';
          optimization: dspyToolExecutorgetToolsByCategory('optimization')length,';
          retrieval: dspyToolExecutorgetToolsByCategory('retrieval')length,';
          reasoning: dspyToolExecutorgetToolsByCategory('reasoning')length,';
          evaluation: dspyToolExecutorgetToolsByCategory('evaluation')length,';
        };
        total: toolslength});
    } catch (error) {;
      loggererror('Failed to get DSPy tools', LogContextAPI, { error);';
      resstatus(500)json({;
        success: false;
        error) 'Failed to retrieve DSPy tools',';
      });
    };
  });
  // Execute a DSPy tool;
  routerpost('/execute', async (req: Request, res: Response) => {';
    try {;
      const { tool_name, inputparameters } = reqbody;
      if (!tool_name || !input{;
        return resstatus(400)json({;
          success: false;
          error) 'tool_name and _inputare required',';
        });
      };

      const result = await dspyToolExecutorexecuteTool(tool_name, inputparameters);
      resjson({;
        success: resultsuccess;
        tool: resulttool;
        output: resultoutput;
        error) resulterror);
        metadata: resultmetadata});
    } catch (error) {;
      loggererror('Failed to execute DSPy tool', LogContextDSPY, { error) tool: reqbodytool_name });';
      resstatus(500)json({;
        success: false;
        error) 'Failed to execute DSPy tool',';
      });
    };
  });
  // Create and execute a DSPy pipeline;
  routerpost('/pipeline', async (req: Request, res: Response) => {';
    try {;
      const { tools, input = reqbody;
      if (!ArrayisArray(tools) || !input{;
        return resstatus(400)json({;
          success: false;
          error) 'tools array and _inputare required',';
        });
      };

      const result = await dspyToolExecutorcreatePipeline(tools, input;
      resjson({;
        success: true;
        pipeline: tools;
        result;
        metadata: {;
          tools_executed: toolslength;
          execution_time: resultpipeline_steps?reduce();
            (acc, step) => acc + (stepmetadata?execution_time_ms || 0);
            0;
          )}});
    } catch (error) {;
      loggererror('Failed to execute DSPy pipeline', LogContextDSPY, { error) tools: reqbodytools });';
      resstatus(500)json({;
        success: false;
        error) 'Pipeline execution failed',';
      });
    };
  });
  // Get tool recommendations for a task;
  routerpost('/recommend', async (req: Request, res: Response) => {';
    try {;
      const { task } = reqbody;
      if (!task) {;
        return resstatus(400)json({;
          success: false;
          error) 'task description is required',';
        });
      };

      const recommendations = dspyToolExecutorrecommendTools(task);
      resjson({;
        success: true;
        task;
        recommendations: recommendationsmap((tool) => ({;
          name: toolname;
          category: toolcategory;
          description: tooldescription;
          confidence: 0.85, // Would be calculated based on task analysis;
        }));
        total_recommendations: recommendationslength});
    } catch (error) {;
      loggererror('Failed to get tool recommendations', LogContextDSPY, { error) task: reqbodytask });';
      resstatus(500)json({;
        success: false;
        error) 'Failed to get tool recommendations',';
      });
    };
  });
  // Get tool categories;
  routerget('/categories', async (req: Request, res: Response) => {';
    try {;
      const categories = ['prompting', 'optimization', 'retrieval', 'reasoning', 'evaluation'];';
      const categoryInfo = categoriesmap((cat) => ({;
        name: cat;
        tool_count: dspyToolExecutorgetToolsByCategory(cat as, any))length;
        tools: dspyToolExecutorgetToolsByCategory(cat as, any))map((t) => tname)}));
      resjson({;
        success: true;
        categories: categoryInfo});
    } catch (error) {;
      loggererror('Failed to get DSPy categories', LogContextDSPY, { error);';
      resstatus(500)json({;
        success: false;
        error) 'Failed to retrieve categories',';
      });
    };
  });
  return router;
};

export const DSPyToolsRouter = createDSPyToolsRouter();