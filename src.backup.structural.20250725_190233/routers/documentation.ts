import { Router } from 'express';
import type { SupabaseClient } from '@supabase/supabase-js';
import { z } from 'zod';
import { logger } from '../utils/logger';
import { validateRequest } from '../schemas/api-schemas';
// Request schemas;
const SearchDocsSchema = zobject({;
  query: zstring()min(1)max(500);
  category: zstring()optional();
  language: zstring()optional();
  tags: zarray(zstring())optional();
  limit: znumber()min(1)max(50)default(10);
});
const GetFeatureDocsSchema = zobject({;
  category: zstring()optional();
  includeExamples: zboolean()default(true);
});
const GetIntegrationPatternsSchema = zobject({;
  language: zstring()optional();
  framework: zstring()optional();
  features: zarray(zstring())optional();
});
export function DocumentationRouter(supabase: SupabaseClient) {;
  const router = Router();
  // Search code snippets;
  routerpost('/search/snippets', validateRequest(SearchDocsSchema), async (req: any, res) => {;
    try {;
      const { query, category, language, tags, limit } = reqvalidatedData;
      const { data, error } = await supabaserpc('search_code_snippets', {;
        search_query: query;
        filter_language: language;
        filter_category: category;
        filter_tags: tags;
        limit_count: limit;
      });
      if (error) throw error;
      // Increment usage count for returned snippets;
      if (data && datalength > 0) {;
        await Promiseall(;
          datamap((snippet: any) =>;
            supabaserpc('increment_snippet_usage', { snippet_id: snippetid });
          );
        );
      };

      resjson({;
        success: true;
        data: {;
          snippets: data || [];
          query;
          count: data?length || 0;
        ;
};
        metadata: {;
          apiVersion: 'v1';
          timestamp: new Date()toISOString();
        ;
};
      });
    } catch (error instanceof Error ? errormessage : String(error) any) {;
      loggererror('Error searching code snippets:', error);
      resstatus(500)json({;
        success: false;
        error instanceof Error ? errormessage : String(error) {;
          code: 'SEARCH_ERROR';
          message: 'Failed to search code snippets';
          details: errormessage;
        ;
};
      });
    };
  });
  // Get Supabase feature documentation;
  routerget('/supabase/features', validateRequest(GetFeatureDocsSchema), async (req: any, res) => {;
    try {;
      const { category, includeExamples } = reqvalidatedData;
      const { data, error } = await supabaserpc('get_supabase_feature_docs', {;
        feature_category: category;
        include_examples: includeExamples;
      });
      if (error) throw error;
      resjson({;
        success: true;
        data: {;
          features: data || [];
          category;
          count: data?length || 0;
        ;
};
        metadata: {;
          apiVersion: 'v1';
          timestamp: new Date()toISOString();
        ;
};
      });
    } catch (error instanceof Error ? errormessage : String(error) any) {;
      loggererror('Error fetching Supabase features:', error);
      resstatus(500)json({;
        success: false;
        error instanceof Error ? errormessage : String(error) {;
          code: 'FETCH_ERROR';
          message: 'Failed to fetch Supabase feature documentation';
          details: errormessage;
        ;
};
      });
    };
  });
  // Get integration patterns;
  routerget(;
    '/integration-patterns';
    validateRequest(GetIntegrationPatternsSchema);
    async (req: any, res) => {;
      try {;
        const { language, framework, features } = reqvalidatedData;
        const { data, error } = await supabaserpc('get_integration_patterns', {;
          filter_language: language;
          filter_framework: framework;
          filter_features: features;
        });
        if (error) throw error;
        resjson({;
          success: true;
          data: {;
            patterns: data || [];
            filters: { language, framework, features };
            count: data?length || 0;
          ;
};
          metadata: {;
            apiVersion: 'v1';
            timestamp: new Date()toISOString();
          ;
};
        });
      } catch (error instanceof Error ? errormessage : String(error) any) {;
        loggererror('Error fetching integration patterns:', error);
        resstatus(500)json({;
          success: false;
          error instanceof Error ? errormessage : String(error) {;
            code: 'FETCH_ERROR';
            message: 'Failed to fetch integration patterns';
            details: errormessage;
          ;
};
        });
      };
    };
  );
  // Get all available categories;
  routerget('/categories', async (req, res) => {;
    try {;
      const { data: features, error instanceof Error ? errormessage : String(error) featuresError } = await supabase;
        from('supabase_features');
        select('category');
        order('category');
      if (featuresError) throw featuresError;
      const categories = [..new Set(features?map((f) => fcategory) || [])];
      const { data: languages, error instanceof Error ? errormessage : String(error) langError } = await supabase;
        from('ai_code_snippets');
        select('language');
        order('language');
      if (langError) throw langError;
      const uniqueLanguages = [..new Set(languages?map((l) => llanguage) || [])];
      resjson({;
        success: true;
        data: {;
          categories;
          languages: uniqueLanguages;
          frameworks: [;
            'React';
            'Vue';
            'Angular';
            'Nextjs';
            'Nuxt';
            'SvelteKit';
            'Flutter';
            'React Native';
          ];
        ;
};
        metadata: {;
          apiVersion: 'v1';
          timestamp: new Date()toISOString();
        ;
};
      });
    } catch (error instanceof Error ? errormessage : String(error) any) {;
      loggererror('Error fetching categories:', error);
      resstatus(500)json({;
        success: false;
        error instanceof Error ? errormessage : String(error) {;
          code: 'FETCH_ERROR';
          message: 'Failed to fetch categories';
          details: errormessage;
        ;
};
      });
    };
  });
  // Get specific code example;
  routerget('/examples/:id', async (req, res) => {;
    try {;
      const { id } = reqparams;
      const { data, error } = await supabase;
        from('ai_code_examples');
        select('*');
        eq('id', id);
        single();
      if (error) {;
        if (errorcode === 'PGRST116') {;
          return resstatus(404)json({;
            success: false;
            error instanceof Error ? errormessage : String(error) {;
              code: 'NOT_FOUND';
              message: 'Code example not found';
            ;
};
          });
        };
        throw error;
      };

      resjson({;
        success: true;
        data: { example: data ;
};
        metadata: {;
          apiVersion: 'v1';
          timestamp: new Date()toISOString();
        ;
};
      });
    } catch (error instanceof Error ? errormessage : String(error) any) {;
      loggererror('Error fetching code example:', error);
      resstatus(500)json({;
        success: false;
        error instanceof Error ? errormessage : String(error) {;
          code: 'FETCH_ERROR';
          message: 'Failed to fetch code example';
          details: errormessage;
        ;
};
      });
    };
  });
  // Get popular snippets;
  routerget('/snippets/popular', async (req, res) => {;
    try {;
      const limit = parseInt(reqquerylimit as string, 10) || 10;
      const category = reqquerycategory as string;
      let query = supabase;
        from('ai_code_snippets');
        select('*');
        order('usage_count', { ascending: false });
        limit(limit);
      if (category) {;
        query = queryeq('category', category);
      };

      const { data, error } = await query;
      if (error) throw error;
      resjson({;
        success: true;
        data: {;
          snippets: data || [];
          count: data?length || 0;
        ;
};
        metadata: {;
          apiVersion: 'v1';
          timestamp: new Date()toISOString();
        ;
};
      });
    } catch (error instanceof Error ? errormessage : String(error) any) {;
      loggererror('Error fetching popular snippets:', error);
      resstatus(500)json({;
        success: false;
        error instanceof Error ? errormessage : String(error) {;
          code: 'FETCH_ERROR';
          message: 'Failed to fetch popular snippets';
          details: errormessage;
        ;
};
      });
    };
  });
  // Submit new code snippet;
  routerpost('/snippets', async (req: any, res) => {;
    try {;
      const schema = zobject({;
        title: zstring()min(1)max(255);
        description: zstring()optional();
        language: zstring()min(1)max(50);
        code: zstring()min(1);
        category: zstring()optional();
        subcategory: zstring()optional();
        tags: zarray(zstring())optional();
      });
      const data = schemaparse(reqbody);
      const { data: snippet, error } = await supabase;
        from('ai_code_snippets');
        insert({;
          ..data;
          metadata: {;
            source: 'user_submission';
            submitted_by: reqaiServiceId;
            submitted_at: new Date()toISOString();
          ;
};
        });
        select();
        single();
      if (error) throw error;
      resjson({;
        success: true;
        data: { snippet ;
};
        metadata: {;
          apiVersion: 'v1';
          timestamp: new Date()toISOString();
        ;
};
      });
    } catch (error instanceof Error ? errormessage : String(error) any) {;
      loggererror('Error creating code snippet:', error);
      resstatus(500)json({;
        success: false;
        error instanceof Error ? errormessage : String(error) {;
          code: 'CREATE_ERROR';
          message: 'Failed to create code snippet';
          details: errormessage;
        ;
};
      });
    };
  });
  // Get Supabase quick start guide;
  routerget('/quickstart/:feature', async (req, res) => {;
    try {;
      const { feature } = reqparams;
      const { framework } = reqquery;
      // Get feature documentation;
      const { data: featureDocs, error instanceof Error ? errormessage : String(error) featureError } = await supabase;
        from('supabase_features');
        select('*');
        eq('feature_name', feature);
        single();
      if (featureError) {;
        if (featureErrorcode === 'PGRST116') {;
          return resstatus(404)json({;
            success: false;
            error instanceof Error ? errormessage : String(error) {;
              code: 'NOT_FOUND';
              message: `Feature '${feature}' not found`;
            };
          });
        };
        throw featureError;
      };

      // Get relevant code snippets;
      const { data: snippets } = await supabase;
        from('ai_code_snippets');
        select('*');
        eq('category', feature);
        limit(5);
      // Get integration pattern if framework specified;
      let pattern = null;
      if (framework) {;
        const { data: patterns } = await supabase;
          from('supabase_integration_patterns');
          select('*');
          contains('frameworks', [framework as string]);
          contains('features_used', [feature]);
          limit(1);
        pattern = patterns?.[0] || null;
      };

      resjson({;
        success: true;
        data: {;
          feature: featureDocs;
          snippets: snippets || [];
          pattern;
          quickstart: {;
            steps: featureDocssetup_instructions;
            prerequisites: featureDocsprerequisites;
            bestPractices: featureDocsbest_practices;
          ;
};
        };
        metadata: {;
          apiVersion: 'v1';
          timestamp: new Date()toISOString();
        ;
};
      });
    } catch (error instanceof Error ? errormessage : String(error) any) {;
      loggererror('Error fetching quickstart guide:', error);
      resstatus(500)json({;
        success: false;
        error instanceof Error ? errormessage : String(error) {;
          code: 'FETCH_ERROR';
          message: 'Failed to fetch quickstart guide';
          details: errormessage;
        ;
};
      });
    };
  });
  return router;
};
