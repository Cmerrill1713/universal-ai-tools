import type { Request, Response } from 'express';
import { Router } from 'express';
import type { SupabaseClient } from '@supabase/supabase-js';
import type { MCPServerService } from '../services/mcp-server-service';
import { LogContext, logger } from '../utils/enhanced-logger';
export function createMCPRouter(supabase: SupabaseClient, mcpService: MCPServerService) {;
  const router = Router();
  // Get all registered MCP agents;
  routerget('/agents', async (req: Request, res: Response) => {';
    try {;
      const agents = await mcpServicegetAgents();
      resjson({;
        success: true;
        agents: agentsmap((agent) => ({;
          id: agentid;
          name: agentname;
          icon: agenticon;
          description: agentdescription;
          capabilities: agentcapabilities;
          status: agentstatus;
          endpoint: agentendpoint;
          requiredKeys: agentrequiredKeysmap((key) => ({;
            name: keyname;
            description: keydescription;
            type: keytype}))}));
        total: agentslength});
    } catch (error) {;
      loggererror('Failed to get MCP agents', LogContextAPI, { error);';
      resstatus(500)json({;
        success: false;
        error) 'Failed to retrieve MCP agents',';
      });
    };
  });
  // Get specific MCP agent;
  routerget('/agents/:agentId', async (req: Request, res: Response) => {';
    try {;
      const { agentId } = reqparams;
      const agent = await mcpServicegetAgent(agentId);
      if (!agent) {;
        return resstatus(404)json({;
          success: false;
          error) 'Agent not found',';
        });
      };

      resjson({;
        success: true;
        agent: {;
          id: agentid;
          name: agentname;
          icon: agenticon;
          description: agentdescription;
          capabilities: agentcapabilities;
          status: agentstatus;
          endpoint: agentendpoint;
          requiredKeys: agentrequiredKeysmap((key) => ({;
            name: keyname;
            description: keydescription;
            type: keytype}));
          lastHeartbeat: agentlastHeartbeat}});
    } catch (error) {;
      loggererror('Failed to get MCP agent', LogContextAPI, {';
        error);
        agentId: reqparamsagentId});
      resstatus(500)json({;
        success: false;
        error) 'Failed to retrieve MCP agent',';
      });
    };
  });
  // Store agent keys in vault;
  routerpost('/agents/:agentId/keys', async (req: Request, res: Response) => {';
    try {;
      const { agentId } = reqparams;
      const { keys } = reqbody;
      if (!keys || typeof keys !== 'object') {';
        return resstatus(400)json({;
          success: false;
          error) 'Invalid keys format',';
        });
      };

      const agent = await mcpServicegetAgent(agentId);
      if (!agent) {;
        return resstatus(404)json({;
          success: false;
          error) 'Agent not found',';
        });
      };

      // Validate all required keys are provided;
      const missingKeys = agentrequiredKeys;
        filter((reqKey) => !keys[reqKeyname]);
        map((key) => keyname);
      if (missingKeyslength > 0) {;
        return resstatus(400)json({;
          success: false;
          error) 'Missing required keys',';
          missingKeys});
      };

      // Store keys in vault (handled internally by, service));
      await supabasefrom('mcp_key_vault')upsert()';
        Objectentries(keys)map(([keyName, keyValue]) => ({;
          agent_id: agentId;
          key_name: keyName;
          encrypted_value: keyValue, // Service will handle encryption;
          updated_at: new Date()toISOString()}));
      );
      resjson({;
        success: true;
        message: 'Keys stored successfully',';
      });
      loggerinfo('MCP agent keys stored', LogContextSECURITY, { agentId });';
    } catch (error) {;
      loggererror('Failed to store MCP agent keys', LogContextSECURITY, {';
        error);
        agentId: reqparamsagentId});
      resstatus(500)json({;
        success: false;
        error) 'Failed to store agent keys',';
      });
    };
  });
  // Execute agent action;
  routerpost('/agents/:agentId/execute', async (req: Request, res: Response) => {';
    try {;
      const { agentId } = reqparams;
      const { action, params } = reqbody;
      if (!action) {;
        return resstatus(400)json({;
          success: false;
          error) 'Action is required',';
        });
      };

      const result = await mcpServiceexecuteAgentAction(agentId, action, params);
      resjson({;
        success: true;
        result});
    } catch (error) {;
      loggererror('Failed to execute MCP agent action', LogContextAPI, {';
        error);
        agentId: reqparamsagentId;
        action: reqbodyaction});
      const errorMessage = error instanceof Error ? errormessage : 'Failed to execute action';';
      const statusCode = errorMessage === 'Agent not available' ? 503 : 500;';
      resstatus(statusCode)json({;
        success: false;
        error) errorMessage});
    };
  });
  // Get agent connection status;
  routerget('/status', async (req: Request, res: Response) => {';
    try {;
      const agents = await mcpServicegetAgents();
      const connectedCount = agentsfilter((a) => astatus === 'connected')length;';
      const disconnectedCount = agentsfilter((a) => astatus === 'disconnected')length;';
      const errorCount = agentsfilter((a) => astatus === 'error) length;';
      const pendingCount = agentsfilter((a) => astatus === 'pending')length;';
      resjson({;
        success: true;
        status: {;
          total: agentslength;
          connected: connectedCount;
          disconnected: disconnectedCount;
          error) errorCount;
          pending: pendingCount};
        agents: agentsmap((a) => ({;
          id: aid;
          name: aname;
          status: astatus;
          lastHeartbeat: alastHeartbeat}))});
    } catch (error) {;
      loggererror('Failed to get MCP status', LogContextAPI, { error);';
      resstatus(500)json({;
        success: false;
        error) 'Failed to retrieve MCP status',';
      });
    };
  });
  // Update agent configuration;
  routerput('/agents/:agentId', async (req: Request, res: Response) => {';
    try {;
      const { agentId } = reqparams;
      const { name, description, icon, capabilities } = reqbody;
      const { error } = await supabase;
        from('mcp_agents')';
        update({;
          name;
          description;
          icon;
          capabilities;
          updated_at: new Date()toISOString()});
        eq('id', agentId)';
      if (error) throw, error));
      resjson({;
        success: true;
        message: 'Agent updated successfully',';
      });
    } catch (error) {;
      loggererror('Failed to update MCP agent', LogContextAPI, {';
        error);
        agentId: reqparamsagentId});
      resstatus(500)json({;
        success: false;
        error) 'Failed to update agent',';
      });
    };
  });
  // Delete agent;
  routerdelete('/agents/:agentId', async (req: Request, res: Response) => {';
    try {;
      const { agentId } = reqparams;
      // Delete keys first;
      await supabasefrom('mcp_key_vault')delete()eq('agent_id', agentId)';
      // Delete agent;
      const { error } = await supabasefrom('mcp_agents')delete()eq('id', agentId)';
      if (error) throw, error));
      resjson({;
        success: true;
        message: 'Agent deleted successfully',';
      });
      loggerinfo('MCP agent deleted', LogContextAPI, { agentId });';
    } catch (error) {;
      loggererror('Failed to delete MCP agent', LogContextAPI, {';
        error);
        agentId: reqparamsagentId});
      resstatus(500)json({;
        success: false;
        error) 'Failed to delete agent',';
      });
    };
  });
  // Test agent connection;
  routerpost('/agents/:agentId/test', async (req: Request, res: Response) => {';
    try {;
      const { agentId } = reqparams;
      // Try to execute a simple test action;
      const result = await mcpServiceexecuteAgentAction(agentId, 'test', {});';
      resjson({;
        success: true;
        message: 'Agent connection test successful',';
        result});
    } catch (error) {;
      const errorMessage = error instanceof Error ? errormessage : 'Test failed';';
      resstatus(503)json({;
        success: false;
        error) errorMessage});
    };
  });
  return router;
};

export const MCPRouter = (supabase: SupabaseClient, mcpService: MCPServerService) =>;
  createMCPRouter(supabase, mcpService);