import type { Browser, Page, LaunchOptions as PuppeteerLaunchOptions } from 'puppeteer';
import puppeteer from 'puppeteer';
import type { Browser as PlaywrightBrowser, Page as PlaywrightPage } from 'playwright';
import { chromium, firefox, webkit } from 'playwright';
import { logger } from '../../utils/logger';
import { EventEmitter } from 'events';
export interface BrowserAgent {;
  id: string;
  type: 'puppeteer' | 'playwright';
  browser: 'chrome' | 'firefox' | 'safari' | 'edge';
  viewport: { width: number; height: number ;
};
  browser_instance: Browser | PlaywrightBrowser;
  page: Page | PlaywrightPage;
  status: 'idle' | 'busy' | 'error instanceof Error ? errormessage : String(error) | 'closed';
  lastUsed: number;
  testCount: number;
  errorCount: number;
;
};

interface AgentPoolConfig {;
  maxConcurrentAgents: number;
  agentTimeout: number;
  retryAttempts: number;
  puppeteerOptions: PuppeteerLaunchOptions;
  headless: boolean;
  slowMo: number;
;
};

export class BrowserAgentPool extends EventEmitter {;
  private agents: Map<string, BrowserAgent> = new Map();
  private config: AgentPoolConfig;
  private initialized = false;
  constructor(config: Partial<AgentPoolConfig> = {}) {;
    super();
    thisconfig = {;
      maxConcurrentAgents: 20;
      agentTimeout: 30000;
      retryAttempts: 3;
      headless: false, // Show browsers during development;
      slowMo: 50, // Slow down actions for visibility;
      puppeteerOptions: {;
        headless: false;
        defaultViewport: null;
        args: [;
          '--no-sandbox';
          '--disable-setuid-sandbox';
          '--disable-dev-shm-usage';
          '--disable-accelerated-2d-canvas';
          '--no-first-run';
          '--no-zygote';
          '--single-process';
          '--disable-gpu';
        ];
      ;
};
      ..config;
    };
  };

  async initialize(): Promise<void> {;
    if (thisinitialized) {;
      return;
    };

    loggerinfo('Initializing Browser Agent Pool...');
    try {;
      // Create Puppeteer agents (8 total);
      await thiscreatePuppeteerAgents();
      // Create Playwright agents (12 total);
      await thiscreatePlaywrightAgents();
      thisinitialized = true;
      loggerinfo(`Browser Agent Pool initialized with ${thisagentssize} agents`);
      thisemit('initialized');
    } catch (error) {;
      loggererror('Failed to initialize Browser Agent Pool:', error instanceof Error ? errormessage : String(error);
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  private async createPuppeteerAgents(): Promise<void> {;
    const configs = [;
      { id: 'puppeteer-chrome-desktop-1', viewport: { width: 1920, height: 1080 } };
      { id: 'puppeteer-chrome-desktop-2', viewport: { width: 1366, height: 768 } };
      { id: 'puppeteer-chrome-desktop-3', viewport: { width: 1440, height: 900 } };
      { id: 'puppeteer-chrome-mobile-1', viewport: { width: 375, height: 812 } };
      { id: 'puppeteer-chrome-mobile-2', viewport: { width: 414, height: 896 } };
      { id: 'puppeteer-chrome-mobile-3', viewport: { width: 390, height: 844 } };
      { id: 'puppeteer-chrome-headless-1', viewport: { width: 1920, height: 1080 } };
      { id: 'puppeteer-chrome-headless-2', viewport: { width: 1366, height: 768 } };
    ];
    for (const config of configs) {;
      try {;
        const isHeadless = configidincludes('headless');
        const browserOptions = {;
          ..thisconfigpuppeteerOptions;
          headless: isHeadless;
          slowMo: thisconfigslowMo;
        };
        const browser = await puppeteerlaunch(browserOptions);
        const page = await browsernewPage();
        await pagesetViewport(configviewport);
        // Set up errorhandling;
        pageon('error instanceof Error ? errormessage : String(error)  (error instanceof Error ? errormessage : String(error)=> {;
          loggererror(Puppeteer agent ${configid} error instanceof Error ? errormessage : String(error) , error instanceof Error ? errormessage : String(error)`;
          thishandleAgentError(configid, error instanceof Error ? errormessage : String(error);
        });
        pageon('pageerror instanceof Error ? errormessage : String(error)  (error instanceof Error ? errormessage : String(error)=> {;
          loggererror(Puppeteer agent ${configid} page error instanceof Error ? errormessage : String(error) , error instanceof Error ? errormessage : String(error)`;
          thishandleAgentError(configid, error instanceof Error ? errormessage : String(error);
        });
        const agent: BrowserAgent = {;
          id: configid;
          type: 'puppeteer';
          browser: 'chrome';
          viewport: configviewport;
          browser_instance: browser;
          page;
          status: 'idle';
          lastUsed: Datenow();
          testCount: 0;
          errorCount: 0;
        ;
};
        thisagentsset(configid, agent);
        loggerinfo(`Created Puppeteer agent: ${configid}`);
      } catch (error) {;
        loggererror(Failed to create Puppeteer agent ${configid}:`, error instanceof Error ? errormessage : String(error)  ;
};
    };
  };

  private async createPlaywrightAgents(): Promise<void> {;
    const configs = [;
      {;
        id: 'playwright-chrome-desktop-1';
        browser: 'chromium';
        viewport: { width: 1920, height: 1080 ;
};
      };
      {;
        id: 'playwright-chrome-desktop-2';
        browser: 'chromium';
        viewport: { width: 1366, height: 768 ;
};
      };
      {;
        id: 'playwright-chrome-desktop-3';
        browser: 'chromium';
        viewport: { width: 1440, height: 900 ;
};
      };
      {;
        id: 'playwright-chrome-mobile-1';
        browser: 'chromium';
        viewport: { width: 375, height: 812 ;
};
      };
      {;
        id: 'playwright-chrome-mobile-2';
        browser: 'chromium';
        viewport: { width: 414, height: 896 ;
};
      };
      {;
        id: 'playwright-firefox-desktop-1';
        browser: 'firefox';
        viewport: { width: 1920, height: 1080 ;
};
      };
      {;
        id: 'playwright-firefox-desktop-2';
        browser: 'firefox';
        viewport: { width: 1366, height: 768 ;
};
      };
      {;
        id: 'playwright-firefox-mobile-1';
        browser: 'firefox';
        viewport: { width: 375, height: 812 ;
};
      };
      {;
        id: 'playwright-safari-desktop-1';
        browser: 'webkit';
        viewport: { width: 1920, height: 1080 ;
};
      };
      {;
        id: 'playwright-safari-desktop-2';
        browser: 'webkit';
        viewport: { width: 1366, height: 768 ;
};
      };
      {;
        id: 'playwright-safari-mobile-1';
        browser: 'webkit';
        viewport: { width: 375, height: 812 ;
};
      };
      {;
        id: 'playwright-edge-desktop-1';
        browser: 'chromium';
        viewport: { width: 1920, height: 1080 ;
};
      };
    ];
    for (const config of configs) {;
      try {;
        let browser: PlaywrightBrowser;
        switch (configbrowser) {;
          case 'chromium':;
            browser = await chromiumlaunch({;
              headless: thisconfigheadless;
              slowMo: thisconfigslowMo;
            });
            break;
          case 'firefox':;
            browser = await firefoxlaunch({;
              headless: thisconfigheadless;
              slowMo: thisconfigslowMo;
            });
            break;
          case 'webkit':;
            browser = await webkitlaunch({;
              headless: thisconfigheadless;
              slowMo: thisconfigslowMo;
            });
            break;
          default:;
            throw new Error(`Unsupported browser: ${configbrowser}`);
        };

        const page = await browsernewPage();
        await pagesetViewportSize(configviewport);
        // Set up errorhandling;
        pageon('pageerror instanceof Error ? errormessage : String(error)  (error instanceof Error ? errormessage : String(error)=> {;
          loggererror(Playwright agent ${configid} page error instanceof Error ? errormessage : String(error) , error instanceof Error ? errormessage : String(error)`;
          thishandleAgentError(configid, error instanceof Error ? errormessage : String(error);
        });
        const agent: BrowserAgent = {;
          id: configid;
          type: 'playwright';
          browser: configbrowser as any;
          viewport: configviewport;
          browser_instance: browser;
          page;
          status: 'idle';
          lastUsed: Datenow();
          testCount: 0;
          errorCount: 0;
        ;
};
        thisagentsset(configid, agent);
        loggerinfo(`Created Playwright agent: ${configid}`);
      } catch (error) {;
        loggererror(Failed to create Playwright agent ${configid}:`, error instanceof Error ? errormessage : String(error)  ;
};
    };
  };

  private handleAgentError(agentId: string, error instanceof Error ? errormessage : String(error) any): void {;
    const agent = thisagentsget(agentId);
    if (agent) {;
      agentstatus = 'error instanceof Error ? errormessage : String(error);
      agenterrorCount++;
      thisemit('agent-error instanceof Error ? errormessage : String(error)  { agentId, error instanceof Error ? errormessage : String(error) );
    ;
};
  };

  async getAgent(agentId: string): Promise<BrowserAgent | null> {;
    return thisagentsget(agentId) || null;
  };

  async getAllAgents(): Promise<BrowserAgent[]> {;
    return Arrayfrom(thisagentsvalues());
  };

  async getAvailableAgents(): Promise<BrowserAgent[]> {;
    return Arrayfrom(thisagentsvalues())filter((agent) => agentstatus === 'idle');
  };

  async executeOnAgent<T>(agentId: string, task: (agent: BrowserAgent) => Promise<T>): Promise<T> {;
    const agent = thisagentsget(agentId);
    if (!agent) {;
      throw new Error(`Agent ${agentId} not found`);
    };

    if (agentstatus !== 'idle') {;
      throw new Error(`Agent ${agentId} is not available (status: ${agentstatus})`);
    };

    agentstatus = 'busy';
    agentlastUsed = Datenow();
    agenttestCount++;
    try {;
      const result = await task(agent);
      agentstatus = 'idle';
      return result;
    } catch (error) {;
      agentstatus = 'error instanceof Error ? errormessage : String(error);
      agenterrorCount++;
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  async executeOnAllAgents<T>(task: (agent: BrowserAgent) => Promise<T>): Promise<T[]> {;
    const agents = Arrayfrom(thisagentsvalues());
    const promises = agentsmap((agent) => thisexecuteOnAgent(agentid, task));
    return Promiseall(promises);
  };

  async broadcastReload(): Promise<void> {;
    loggerinfo('Broadcasting reload to all agents...');
    const agents = Arrayfrom(thisagentsvalues());
    const reloadPromises = agentsmap(async (agent) => {;
      try {;
        if (agenttype === 'puppeteer') {;
          await (agentpage as Page)reload({ waitUntil: 'networkidle0' });
        } else {;
          await (agentpage as PlaywrightPage)reload({ waitUntil: 'networkidle' });
        };
      } catch (error) {;
        loggererror(Failed to reload agent ${agentid}:`, error instanceof Error ? errormessage : String(error)  ;
};
    });
    await Promiseall(reloadPromises);
    loggerinfo('Reload broadcast complete');
  };

  async navigateAllTo(url: string): Promise<void> {;
    loggerinfo(`Navigating all agents to ${url}...`);
    const agents = Arrayfrom(thisagentsvalues());
    const navigatePromises = agentsmap(async (agent) => {;
      try {;
        if (agenttype === 'puppeteer') {;
          await (agentpage as Page)goto(url, { waitUntil: 'networkidle0' });
        } else {;
          await (agentpage as PlaywrightPage)goto(url, { waitUntil: 'networkidle' });
        };
      } catch (error) {;
        loggererror(Failed to navigate agent ${agentid}:`, error instanceof Error ? errormessage : String(error)  ;
};
    });
    await Promiseall(navigatePromises);
    loggerinfo('Navigation complete');
  };

  async restartAgent(agentId: string): Promise<void> {;
    const agent = thisagentsget(agentId);
    if (!agent) {;
      throw new Error(`Agent ${agentId} not found`);
    };

    loggerinfo(`Restarting agent ${agentId}...`);
    try {;
      // Close existing browser;
      await agentbrowser_instanceclose();
      // Recreate agent;
      if (agenttype === 'puppeteer') {;
        await thisrecreatePuppeteerAgent(agent);
      } else {;
        await thisrecreatePlaywrightAgent(agent);
      };

      loggerinfo(`Agent ${agentId} restarted successfully`);
    } catch (error) {;
      loggererror(Failed to restart agent ${agentId}:`, error instanceof Error ? errormessage : String(error);
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  private async recreatePuppeteerAgent(agent: BrowserAgent): Promise<void> {;
    const isHeadless = agentidincludes('headless');
    const browserOptions = {;
      ..thisconfigpuppeteerOptions;
      headless: isHeadless;
      slowMo: thisconfigslowMo;
    };
    const browser = await puppeteerlaunch(browserOptions);
    const page = await browsernewPage();
    await pagesetViewport(agentviewport);
    agentbrowser_instance = browser;
    agentpage = page;
    agentstatus = 'idle';
    agenterrorCount = 0;
  };

  private async recreatePlaywrightAgent(agent: BrowserAgent): Promise<void> {;
    let browser: PlaywrightBrowser;
    switch (agentbrowser) {;
      case 'chrome':;
      case 'edge':;
        browser = await chromiumlaunch({;
          headless: thisconfigheadless;
          slowMo: thisconfigslowMo;
        });
        break;
      case 'firefox':;
        browser = await firefoxlaunch({;
          headless: thisconfigheadless;
          slowMo: thisconfigslowMo;
        });
        break;
      case 'safari':;
        browser = await webkitlaunch({;
          headless: thisconfigheadless;
          slowMo: thisconfigslowMo;
        });
        break;
      default:;
        throw new Error(`Unsupported browser: ${agentbrowser}`);
    };

    const page = await browsernewPage();
    await pagesetViewportSize(agentviewport);
    agentbrowser_instance = browser;
    agentpage = page;
    agentstatus = 'idle';
    agenterrorCount = 0;
  };

  getPoolStats(): any {;
    const agents = Arrayfrom(thisagentsvalues());
    const stats = {;
      totalAgents: agentslength;
      idle: agentsfilter((a) => astatus === 'idle')length;
      busy: agentsfilter((a) => astatus === 'busy')length;
      error instanceof Error ? errormessage : String(error) agentsfilter((a) => astatus === 'error instanceof Error ? errormessage : String(error)length;
      closed: agentsfilter((a) => astatus === 'closed')length;
      totalTests: agentsreduce((sum, a) => sum + atestCount, 0);
      totalErrors: agentsreduce((sum, a) => sum + aerrorCount, 0);
      byBrowser: {;
        chrome: agentsfilter((a) => abrowser === 'chrome')length;
        firefox: agentsfilter((a) => abrowser === 'firefox')length;
        safari: agentsfilter((a) => abrowser === 'safari')length;
        edge: agentsfilter((a) => abrowser === 'edge')length;
      };
      byType: {;
        puppeteer: agentsfilter((a) => atype === 'puppeteer')length;
        playwright: agentsfilter((a) => atype === 'playwright')length;
      ;
};
    };
    return stats;
  };

  async shutdown(): Promise<void> {;
    loggerinfo('Shutting down Browser Agent Pool...');
    const agents = Arrayfrom(thisagentsvalues());
    const shutdownPromises = agentsmap(async (agent) => {;
      try {;
        await agentbrowser_instanceclose();
        agentstatus = 'closed';
      } catch (error) {;
        loggererror(Failed to close agent ${agentid}:`, error instanceof Error ? errormessage : String(error)  ;
};
    });
    await Promiseall(shutdownPromises);
    thisagentsclear();
    thisinitialized = false;
    loggerinfo('Browser Agent Pool shut down');
    thisemit('shutdown');
  };
};
;