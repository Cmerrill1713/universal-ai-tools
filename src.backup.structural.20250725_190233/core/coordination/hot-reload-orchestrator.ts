#!/usr/bin/env tsx;
import { HotReloadMonitor } from './hot-reload-monitor';
import { BrowserAgentPool } from './agent-pool';
import { UIValidator } from '../browser/ui-validator';
import { PerformanceMonitor } from './performance-monitor';
import { SelfHealingAgent } from '../agents/self-healing-agent';
import { dspyService } from '../../services/dspy-service';
import { logger } from '../../utils/logger';
import { EventEmitter } from 'events';
export interface OrchestratorConfig {;
  maxConcurrentAgents: number;
  headless: boolean;
  slowMo: number;
  enableSelfHealing: boolean;
  enablePerformanceMonitoring: boolean;
  debounceMs: number;
  testTimeout: number;
  reportInterval: number;
;
};

export class HotReloadOrchestrator extends EventEmitter {;
  private config: OrchestratorConfig;
  private hotReloadMonitor!: HotReloadMonitor;
  private agentPool!: BrowserAgentPool;
  private uiValidator!: UIValidator;
  private performanceMonitor!: PerformanceMonitor;
  private selfHealingAgent!: SelfHealingAgent;
  // Enhanced coordination now provided by DSPy service;
  private isRunning = false;
  private reportInterval: NodeJSTimeout | null = null;
  constructor(config: Partial<OrchestratorConfig> = {}) {;
    super();
    thisconfig = {;
      maxConcurrentAgents: 20, // Increased from 14 to 20;
      headless: false;
      slowMo: 50;
      enableSelfHealing: true;
      enablePerformanceMonitoring: true;
      debounceMs: 1000;
      testTimeout: 30000;
      reportInterval: 30000, // Report every 30 seconds;
      ..config;
    };
    thisinitializeComponents();
    thissetupEventHandlers();
  };

  private initializeComponents(): void {;
    // Initialize agent pool;
    thisagentPool = new BrowserAgentPool({;
      maxConcurrentAgents: thisconfigmaxConcurrentAgents;
      headless: thisconfigheadless;
      slowMo: thisconfigslowMo;
      agentTimeout: thisconfigtestTimeout;
    });
    // Initialize UI validator;
    thisuiValidator = new UIValidator();
    // Initialize performance monitor;
    thisperformanceMonitor = new PerformanceMonitor();
    // Initialize self-healing agent;
    thisselfHealingAgent = new SelfHealingAgent(;);
      thisagentPool;
      thisuiValidator;
      thisperformanceMonitor;
    );
    // Enhanced coordination now provided by DSPy service;
    loggerinfo('🎯 DSPy service will handle coordination');
    // Initialize hot reload monitor;
    thishotReloadMonitor = new HotReloadMonitor({;
      debounceMs: thisconfigdebounceMs;
      maxConcurrentTests: thisconfigmaxConcurrentAgents;
      testTimeout: thisconfigtestTimeout;
    });
  };

  private setupEventHandlers(): void {;
    // Hot reload events;
    thishotReloadMonitoron('reload-start', (data) => {;
      loggerinfo(`🔄 Hot reload started for ${datafilePath}`);
      thisemit('reload-start', data);
    });
    thishotReloadMonitoron('reload-complete', (data) => {;
      if (datasuccess) {;
        loggerinfo(`✅ Hot reload completed successfully in ${dataduration}ms`);
      } else {;
        loggererror(❌ Hot reload failed after ${dataduration}ms`);
      };
      thisemit('reload-complete', data);
    });
    thishotReloadMonitoron('reload-failed', (data) => {;
      loggererror(💥 Hot reload failed: ${JSONstringify(datavalidationResults)}`);
      thisemit('reload-failed', data);
      // Trigger enhanced coordination for complex failures;
      if (datavalidationResults && datavalidationResultslength > 0) {;
        thistriggerEnhancedCoordination(data);
      };
    });
    // Agent pool events;
    thisagentPoolon('initialized', () => {;
      loggerinfo(;
        `🚀 Agent pool initialized with ${thisagentPoolgetPoolStats()totalAgents} agents`;
      );
      thisemit('agents-ready');
    });
    thisagentPoolon('agent-error instanceof Error ? errormessage : String(error)  (data) => {;
      loggererror(🚨 Agent error instanceof Error ? errormessage : String(error) ${dataagentId} - ${dataerrormessage}`);
      thisemit('agent-error instanceof Error ? errormessage : String(error)  data);
    });
    // Self-healing events;
    thisselfHealingAgenton('issue-reported', (issue: any) => {;
      loggerwarn(`🔧 Issue reported: ${issuedescription} (${issueseverity})`);
      thisemit('issue-reported', issue);
    });
    thisselfHealingAgenton('issue-healed', (data: any) => {;
      loggerinfo(`🎯 Issue healed: ${dataissuedescription} in ${dataresultduration}ms`);
      thisemit('issue-healed', data);
    });
    thisselfHealingAgenton('issue-heal-failed', (data: any) => {;
      loggererror(⚠️ Failed to heal issue: ${dataissuedescription}`);
      thisemit('issue-heal-failed', data);
    });
  };

  async start(): Promise<void> {;
    if (thisisRunning) {;
      loggerwarn('Hot Reload Orchestrator is already running');
      return;
    };

    thisisRunning = true;
    loggerinfo('🎬 Starting Hot Reload Orchestrator...');
    try {;
      // Start components in order;
      loggerinfo('📊 Starting performance monitor...');
      if (thisconfigenablePerformanceMonitoring) {;
        await thisperformanceMonitorstart();
      };

      loggerinfo('🤖 Initializing browser agent pool...');
      await thisagentPoolinitialize();
      loggerinfo('🩺 Starting self-healing agent...');
      if (thisconfigenableSelfHealing) {;
        await thisselfHealingAgentstart();
      };

      loggerinfo('👁️ Starting hot reload monitor...');
      await thishotReloadMonitorstart();
      // Navigate all agents to the UI;
      loggerinfo('🧭 Navigating agents to UI...');
      await thisagentPoolnavigateAllTo('http://localhost:5173');
      // Run initial validation;
      loggerinfo('🧪 Running initial validation...');
      await thisrunInitialValidation();
      // Start reporting;
      thisstartReporting();
      loggerinfo('🎉 Hot Reload Orchestrator started successfully!');
      loggerinfo(`📈 Monitoring ${thisagentPoolgetPoolStats()totalAgents} browser agents`);
      loggerinfo(`🔄 Hot reload monitoring active for file changes`);
      loggerinfo(`🎯 Self-healing: ${thisconfigenableSelfHealing ? 'ENABLED' : 'DISABLED'}`);
      loggerinfo(;
        `📊 Performance monitoring: ${thisconfigenablePerformanceMonitoring ? 'ENABLED' : 'DISABLED'}`;
      );
      thisemit('started');
    } catch (error) {;
      loggererror('❌ Failed to start Hot Reload Orchestrator:', error instanceof Error ? errormessage : String(error);
      thisisRunning = false;
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  async stop(): Promise<void> {;
    if (!thisisRunning) {;
      loggerwarn('Hot Reload Orchestrator is not running');
      return;
    };

    thisisRunning = false;
    loggerinfo('🛑 Stopping Hot Reload Orchestrator...');
    try {;
      // Stop reporting;
      if (thisreportInterval) {;
        clearInterval(thisreportInterval);
        thisreportInterval = null;
      };

      // Stop components in reverse order;
      loggerinfo('🔄 Stopping hot reload monitor...');
      await thishotReloadMonitorstop();
      loggerinfo('🩺 Stopping self-healing agent...');
      await thisselfHealingAgentstop();
      loggerinfo('🤖 Shutting down browser agent pool...');
      await thisagentPoolshutdown();
      loggerinfo('📊 Stopping performance monitor...');
      await thisperformanceMonitorstop();
      loggerinfo('✅ Hot Reload Orchestrator stopped successfully');
      thisemit('stopped');
    } catch (error) {;
      loggererror('❌ Error stopping Hot Reload Orchestrator:', error instanceof Error ? errormessage : String(error);
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  private async runInitialValidation(): Promise<void> {;
    try {;
      const agents = await thisagentPoolgetAllAgents();
      const validationPromises = agentsmap((agent) => thisuiValidatorvalidateAgent(agent));
      const results = await Promiseall(validationPromises);
      const successCount = resultsfilter((r: any) => rsuccess)length;
      const totalCount = resultslength;
      loggerinfo(`🧪 Initial validation complete: ${successCount}/${totalCount} agents passed`);
      if (successCount < totalCount) {;
        loggerwarn(`⚠️ ${totalCount - successCount} agents failed initial validation`);
        // Report failures as issues for self-healing;
        resultsforEach((result: any) => {;
          if (!resultsuccess) {;
            thisselfHealingAgentreportIssue({;
              agentId: resultagentId;
              type: 'ui';
              description: `Initial validation failed: ${resulterrorsjoin(', ')}`;
              severity: 'medium';
              context: result;
            });
          };
        });
      };
    } catch (error) {;
      loggererror('❌ Initial validation failed:', error instanceof Error ? errormessage : String(error)  ;
};
  };

  private startReporting(): void {;
    thisreportInterval = setInterval(() => {;
      try {;
        thisgenerateAndLogReport();
      } catch (error) {;
        loggererror('Error generating report:', error instanceof Error ? errormessage : String(error)  ;
};
    }, thisconfigreportInterval);
  };

  private generateAndLogReport(): void {;
    const poolStats = thisagentPoolgetPoolStats();
    const issueStats = thisselfHealingAgentgetIssueStats();
    const recentResults = thishotReloadMonitorgetLatestResults();
    const report = ``;
🎯 Hot Reload Orchestrator Status Report;
═══════════════════════════════════════;
📊 Agent Pool Status: • Total Agents: ${poolStatstotalAgents;
};
  • Idle: ${poolStatsidle;
};
  • Busy: ${poolStatsbusy;
};
  • Error: ${poolStatserror;
  • Total Tests: ${poolStatstotalTests;
};
  • Total Errors: ${poolStatstotalErrors;
};

🔧 Self-Healing Status: • Total Issues: ${issueStatstotal;
};
  • Resolved: ${issueStatsresolved;
};
  • Unresolved: ${issueStatsunresolved;
};
  • Critical: ${issueStatsbySeveritycritical;
};
  • High: ${issueStatsbySeverityhigh;
};

🔄 Latest Hot Reload:;
  ${;
    recentResults;
      ? `• File: ${recentResultsfilePath}`;
     • Duration: ${recentResultsduration}ms;
     • Success: ${recentResultssuccess ? '✅' : '❌';
};
     • Validation: ${recentResultsvalidationResultsfilter((r: any) => rsuccess)length}/${recentResultsvalidationResultslength} passed``;
      : '• No recent reloads';
  ;
};

📈 Browser Coverage: • Chrome: ${poolStatsbyBrowserchrome;
};
  • Firefox: ${poolStatsbyBrowserfirefox}  ;
  • Safari: ${poolStatsbyBrowsersafari;
};
  • Edge: ${poolStatsbyBrowseredge;
};
    `trim();`;
    loggerinfo(report);
  };

  async forceValidation(): Promise<void> {;
    loggerinfo('🔍 Running manual validation...');
    await thisrunInitialValidation();
  ;
};

  async forceReload(): Promise<void> {;
    loggerinfo('🔄 Running manual reload...');
    await thisagentPoolbroadcastReload();
  ;
};

  async restartAgent(agentId: string): Promise<void> {;
    loggerinfo(`🔄 Restarting agent ${agentId}...`);
    await thisagentPoolrestartAgent(agentId);
  };

  getStatus(): any {;
    return {;
      isRunning: thisisRunning;
      config: thisconfig;
      agentPool: thisagentPoolgetPoolStats();
      issues: thisselfHealingAgentgetIssueStats();
      latestReload: thishotReloadMonitorgetLatestResults();
    ;
};
  };

  generateDetailedReport(): string {;
    const poolStats = thisagentPoolgetPoolStats();
    const issueStats = thisselfHealingAgentgetIssueStats();
    const performanceReport = thisperformanceMonitorgenerateReport();
    const healingReport = thisselfHealingAgentgenerateReport();
    return ``;
Hot Reload Orchestrator Detailed Report;
======================================;
${new Date()toISOString()};

Agent Pool Status:;
${JSONstringify(poolStats, null, 2)};

Performance Report: ${performanceReport;
};

Self-Healing Report: ${healingReport;
};

Configuration:;
${JSONstringify(thisconfig, null, 2)};
    `trim();`;
  };

  private async triggerEnhancedCoordination(failureData: any): Promise<void> {;
    try {;
      loggerinfo('🎯 Triggering enhanced agent coordination for failure resolution...');
      // Extract problem description from failure data;
      const problemDescription = thisextractProblemDescription(failureData);
      // Create context for coordination;
      const context = {;
        failureData;
        timestamp: Datenow();
        orchestratorConfig: thisconfig;
        agentPoolStats: thisagentPoolgetPoolStats();
        systemState: await thisgatherSystemState();
      };
      // Trigger DSPy coordinated group fix;
      const availableAgents = ['researcher', 'executor', 'validator', 'monitor', 'ui-tester'];
      const coordination = await dspyServicecoordinateAgents(;
        problemDescription;
        availableAgents;
        context;
      );
      loggerinfo(`✅ DSPy coordination completed: ${coordinationsuccess ? 'SUCCESS' : 'FAILED'}`);
      loggerinfo(`🤖 Selected agents: ${coordinationselectedAgents}`);
      thisemit('enhanced-coordination-started', { plan: coordination });
    } catch (error) {;
      loggererror('❌ Enhanced coordination failed:', error instanceof Error ? errormessage : String(error);
      thisemit('enhanced-coordination-failed', {;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
      });
    };
  };

  private extractProblemDescription(failureData: any): string {;
    if (failureDatavalidationResults) {;
      const errors = failureDatavalidationResults;
        map((result: any) => resulterror instanceof Error ? errormessage : String(error) | resultmessage);
        filter(Boolean);
        join('; ');
      return `Hot reload validation failed: ${errors}`;
    };

    if (failureDataerror instanceof Error ? errormessage : String(error){;
      return `Hot reload error instanceof Error ? errormessage : String(error) ${failureDataerror instanceof Error ? errormessage : String(error);`;
    };

    return 'Hot reload system failure detected';
  };

  private async gatherSystemState(): Promise<unknown> {;
    const state: any = {;
      agentPool: thisagentPoolgetPoolStats();
      selfHealing: thisselfHealingAgentgetIssueStats();
      timestamp: Datenow();
    ;
};
    if (thisconfigenablePerformanceMonitoring) {;
      stateperformance = thisperformanceMonitorgetMetrics();
    };
;
    return state;
  };

  async getEnhancedCoordinationStats(): Promise<unknown> {;
    // Return DSPy service status and basic coordination stats;
    const dspyStatus = dspyServicegetStatus();
    const agentPoolStats = thisagentPoolgetPoolStats();
    return {;
      dspyService: {;
        connected: dspyStatusconnected;
        initialized: dspyStatusinitialized;
        queueSize: dspyStatusqueueSize;
      ;
};
      agentPool: agentPoolStats;
      coordinationMode: 'dspy-enhanced';
    ;
};
  };
};

// CLI execution;
if (importmetaurl === `file://${processargv[1]}`) {;
  async function main() {;
    const orchestrator = new HotReloadOrchestrator({;
      headless: processargvincludes('--headless');
      maxConcurrentAgents: parseInt(;
        processargvfind((arg) => argstartsWith('--agents='))?split('=')[1] || '20';
      );
      slowMo: parseInt(;
        processargvfind((arg) => argstartsWith('--slowmo='))?split('=')[1] || '50';
      );
      enableSelfHealing: !processargvincludes('--no-healing');
      enablePerformanceMonitoring: !processargvincludes('--no-performance');
    });
    // Handle graceful shutdown;
    const shutdown = async () => {;
      loggerinfo('🛑 Shutting down...');
      await orchestratorstop();
      processexit(0);
    };
    processon('SIGINT', shutdown);
    processon('SIGTERM', shutdown);
    try {;
      await orchestratorstart();
      // Keep the process alive and report enhanced coordination stats;
      setInterval(async () => {;
        const stats = await orchestratorgetEnhancedCoordinationStats();
        loggerinfo(;
          `📊 Enhanced Coordination Stats: ${statsactivePlans} active plans, ${statssuccessRate}% success rate`;
        );
      }, 30000); // Report every 30 seconds;
    } catch (error) {;
      loggererror('❌ Failed to start orchestrator:', error instanceof Error ? errormessage : String(error) processexit(1);
    ;
};
  };

  main()catch((error instanceof Error ? errormessage : String(error)=> {;
    loggererror('❌ Orchestrator error instanceof Error ? errormessage : String(error) , error instanceof Error ? errormessage : String(error);
    processexit(1);
  });
};

// Export for module use;
export default HotReloadOrchestrator;