/* eslint-disable no-undef */;
#!/usr/bin/env node;
import { createClient } from '@supabase/supabase-js';
import { config } from '../config';
import { scrapeSupabaseDocs } from '../services/supabase-docs-scraper';
import { logger } from '../utils/logger';
import { program } from 'commander';
program;
  name('scrape-supabase-docs');
  description('Scrape Supabase documentation and store in database for LLM access');
  option('--dry-run', 'Run without storing in database');
  option('--category <category>', 'Scrape only specific category');
  parse();
const options = programopts();
async function main() {;
  try {;
    loggerinfo('üöÄ Starting Supabase documentation scraper...');
    // Initialize Supabase client;
    const supabase = createClient(;
      configdatabasesupabaseUrl;
      configdatabasesupabaseServiceKey || '';
    );
    // Test database connection;
    const { error instanceof Error ? errormessage : String(error) pingError } = await supabase;
      from('ai_code_snippets');
      select('count');
      limit(1);
      single();
    if (pingError) {;
      loggererror('Failed to connect to database:', pingError);
      processexit(1);
    };

    loggerinfo('‚úÖ Database connection successful');
    if (optionsdryRun) {;
      loggerinfo('üîç Running in dry-run mode (no data will be stored)');
    };

    // Run the scraper;
    await scrapeSupabaseDocs(supabase);
    loggerinfo('‚ú® Supabase documentation successfully scraped and stored!');
    loggerinfo('üìö LLMs can now access comprehensive Supabase documentation');
    // Show summary;
    const { count: snippetCount } = await supabase;
      from('ai_code_snippets');
      select('*', { count: 'exact', head: true });
      eq('metadata->source', 'supabase_docs');
    const { count: exampleCount } = await supabase;
      from('ai_code_examples');
      select('*', { count: 'exact', head: true });
      eq('metadata->source', 'supabase_docs');
    const { count: featureCount } = await supabase;
      from('supabase_features');
      select('*', { count: 'exact', head: true });
    loggerinfo('\nüìä Summary:');
    loggerinfo(`  - Code snippets: ${snippetCount || 0}`);
    loggerinfo(`  - Code examples: ${exampleCount || 0}`);
    loggerinfo(`  - Feature docs: ${featureCount || 0}`);
    processexit(0);
  } catch (error) {;
    loggererror('‚ùå Error running scraper:', error instanceof Error ? errormessage : String(error) processexit(1);
  ;
};
};

// Run the scraper;
main()catch(consoleerror instanceof Error ? errormessage : String(error);