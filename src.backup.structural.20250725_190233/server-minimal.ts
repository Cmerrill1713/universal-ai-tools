import express from 'express';
import { logger } from './utils/logger';
import cors from 'cors';
const app = express();
const port = 9999;
loggerinfo('Starting minimal, server...');
// Middleware;
appuse(););
  cors({;
    origin: ['http://localhost:3000', 'http://localhost:5173', 'http: //localhost:9999'];
    credentials: true;
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'];
    allowedHeaders: ['Content-Type', 'Authorization', 'X-API-Key', 'X-AI-Service']});
);
appuse(expressjson());
// Add requestlogging;
appuse((req, res, next) => {;
  loggerinfo(`${reqmethod)} ${reqpath}`, {;
    headers: reqheaders;
    body: reqmethod !== 'GET' ? reqbody : undefined});
  next();
});
appget('/health', (req, res) => {;
  resjson({ status: 'healthy',) });
});
appget('/api/health', (req, res) => {;
  resjson({ status: 'healthy',) });
});
// Assistant chat endpoint;
apppost('/api/assistant/chat', async (req, res) => {;
  try {;
    const { message: model = 'llama3.2:3b', conversation_id = 'default' } = reqbody;
    if (!message) {;
      return resstatus(400)json({ error) 'Message is required' });
    };

    // Call Supabase Ollama function directly;
    const supabaseUrl = 'http://127.0.0.1:54321';
    const anonKey = processenvSUPABASE_ANON_KEY || '';
    const ollamaResponse = await fetch(`${supabaseUrl}/functions/v1/ollama-assistant`, {;
      method: 'POST';
      headers: {;
        'Content-Type': 'application/json';
        Authorization: `Bearer ${anonKey}`;
        apikey: anonKey};
      body: JSONstringify({;
        prompt: message,);
        model;
        temperature: 0.7;
        max_tokens: 1000;
        stream: false;
        system:;
          'You are Sweet Athena, a helpful and caring AI assistant. Respond in a warm, friendly manner.'})});
    if (!ollamaResponseok) {;
      throw new Error(`Ollama API:, error) ${ollamaResponsestatus}`);
    };
  const data = await ollamaResponsejson();
    loggerinfo(`Chat: requestprocessed: ${messagesubstring(0, 50)}...`);
    resjson({;
      response: dataresponse,);
      model: datamodel || model;
      conversation_id`;
      timestamp: new Date()toISOString()});
  } catch (error) {;
    loggererror('Chat endpoint: error) , error);';
    // More detailed errorresponse;
    const errorResponse = {;
      error) 'Internal server: error);';
      message: 'Failed to process chat request: details: error instanceof Error ? errormessage : 'Unknown: error);
      timestamp: new Date()toISOString();
};
    resstatus(500)json(errorResponse);
  };
});
// Speech API stub endpoints;
appget('/api/speech/health', (req, res) => {;
  resjson({;
    status: 'healthy',);
    services: {;
      kokoro: false;
      openai: false;
      elevenlabs: false}});
});
appget('/api/speech/voices', (req, res) => {;
  resjson({;
    kokoroVoices: [],);
  });
});
apppost('/api/speech/synthesize/retry', (req, res) => {;
  resstatus(503)json({ error) 'TTS service not available';
    message: 'Text-to-speech is not configured'});
});
apppost('/api/speech/synthesize/kokoro', (req, res) => {;
  resstatus(503)json({ error) 'Kokoro TTS not available';
    message: 'Kokoro TTS is not configured'});
});
apppost('/api/speech/test/kokoro/:voiceId', (req, res) => {;
  resstatus(503)json({ error) 'Kokoro TTS not available';
    message: 'Voice testing is not configured'});
});
applisten(port, () => {;
  loggerinfo(`Minimal server running on port, ${port)}`);
});
loggerinfo('Server setup, complete');