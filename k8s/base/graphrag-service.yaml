apiVersion: apps/v1
kind: Deployment
metadata:
  name: graphrag-service
  namespace: universal-ai-tools
  labels:
    app: graphrag-service
    tier: backend
    component: knowledge-graph
    version: v1.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: graphrag-service
  template:
    metadata:
      labels:
        app: graphrag-service
        tier: backend
        component: knowledge-graph
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: graphrag-service
        image: universal-ai-tools/graphrag-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 9000
          name: metrics
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "info"
        - name: SERVICE_NAME
          value: "graphrag-service"
        - name: GRAPHRAG_HOST
          value: "0.0.0.0"
        - name: GRAPHRAG_PORT
          value: "8000"
        - name: METRICS_PORT
          value: "9000"
        - name: GRAPHRAG_WORKERS
          value: "4"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: database-url
        - name: NEO4J_URI
          value: "bolt://neo4j:7687"
        - name: NEO4J_USER
          value: "neo4j"
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: neo4j-secret
              key: password
        - name: REDIS_URL
          value: "redis://redis:6379"
        - name: QDRANT_URL
          value: "http://qdrant:6333"
        - name: EMBEDDING_MODEL
          value: "all-MiniLM-L6-v2"
        - name: OTEL_SERVICE_NAME
          value: "graphrag-service"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector:4317"
        resources:
          requests:
            memory: "512Mi"
            cpu: "1000m"
          limits:
            memory: "2Gi"
            cpu: "3000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      restartPolicy: Always
      terminationGracePeriodSeconds: 45
---
apiVersion: v1
kind: Service
metadata:
  name: graphrag-service
  namespace: universal-ai-tools
  labels:
    app: graphrag-service
    tier: backend
    component: knowledge-graph
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 9000
    targetPort: 9000
    protocol: TCP
  selector:
    app: graphrag-service
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: graphrag-service-pdb
  namespace: universal-ai-tools
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: graphrag-service
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: graphrag-service-hpa
  namespace: universal-ai-tools
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: graphrag-service
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 25
        periodSeconds: 120