# GitLab CI/CD Pipeline for Universal AI Tools
# This pipeline handles both Node.js and Rust services

stages:
  - build
  - test
  - security
  - deploy-staging
  - deploy-production
  - post-deploy

variables:
  NODE_VERSION: "18"
  RUST_VERSION: "1.75"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Node.js Services
nodejs-build:
  stage: build
  image: node:${NODE_VERSION}-alpine
  script:
    - cd nodejs-api-server
    - npm ci
    - npm run build
  artifacts:
    paths:
      - nodejs-api-server/dist/
    expire_in: 1 hour
  only:
    - main
    - develop
    - merge_requests

# Rust Services
rust-build:
  stage: build
  image: rust:${RUST_VERSION}-alpine
  before_script:
    - apk add --no-cache musl-dev
  script:
    - cd rust-services
    - chmod +x build-all.sh
    - ./build-all.sh
  artifacts:
    paths:
      - rust-services/*/target/release/
    expire_in: 1 hour
  only:
    - main
    - develop
    - merge_requests

# Node.js Tests
nodejs-test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - nodejs-build
  script:
    - cd nodejs-api-server
    - npm ci
    - npm test
    - npm run test:integration || echo "Integration tests completed with warnings"
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  artifacts:
    reports:
      junit: nodejs-api-server/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: nodejs-api-server/coverage/cobertura-coverage.xml
  only:
    - main
    - develop
    - merge_requests

# Rust Tests
rust-test:
  stage: test
  image: rust:${RUST_VERSION}-alpine
  dependencies:
    - rust-build
  before_script:
    - apk add --no-cache musl-dev
  script:
    - cd rust-services
    - for service in */; do
        if [ -f "$service/Cargo.toml" ]; then
          echo "Testing $service"
          cd "$service"
          cargo test --verbose
          cd ..
        fi
      done
  artifacts:
    reports:
      junit: rust-services/*/target/test-results.xml
  only:
    - main
    - develop
    - merge_requests

# Security Scanning
security-scan:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy fs --format gitlab --output trivy-report.json .
  artifacts:
    reports:
      sast: trivy-report.json
  allow_failure: true
  only:
    - main
    - develop
    - merge_requests

# Dependency Scanning
dependency-scan:
  stage: security
  image: node:${NODE_VERSION}-alpine
  script:
    - cd nodejs-api-server
    - npm audit --audit-level moderate --json > audit-report.json || true
  artifacts:
    reports:
      dependency_scanning: nodejs-api-server/audit-report.json
  allow_failure: true
  only:
    - main
    - develop
    - merge_requests

# AI Services Testing
ai-services-test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - nodejs-build
  script:
    - cd nodejs-api-server
    - npm ci
    - npm start &
    - sleep 15
    - |
      # Test all AI service endpoints
      curl -f http://localhost:9999/api/health || exit 1
      curl -f http://localhost:9999/api/dspy/status || echo "DSPy test failed"
      curl -f http://localhost:9999/api/mlx/status || echo "MLX test failed"
      curl -f http://localhost:9999/api/parameters/status || echo "Parameters test failed"
      curl -f http://localhost:9999/api/gitlab/status || echo "GitLab test failed"
    - pkill -f "npm start" || true
  only:
    - main
    - develop
    - merge_requests

# Docker Build
docker-build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t universal-ai-tools:$CI_COMMIT_SHA .
    - docker tag universal-ai-tools:$CI_COMMIT_SHA universal-ai-tools:latest
  only:
    - main
    - develop

# Deploy to Staging
deploy-staging:
  stage: deploy-staging
  image: alpine:latest
  dependencies:
    - nodejs-build
    - rust-build
    - nodejs-test
    - rust-test
  script:
    - echo "Deploying to staging environment..."
    - |
      # Add your staging deployment commands here
      # This could be:
      # - Deploying to a staging server
      # - Pushing to a staging Docker registry
      # - Updating staging infrastructure
      echo "Staging deployment completed"
  environment:
    name: staging
    url: https://staging.universal-ai-tools.com
  only:
    - develop
  when: manual

# Deploy to Production
deploy-production:
  stage: deploy-production
  image: alpine:latest
  dependencies:
    - nodejs-build
    - rust-build
    - nodejs-test
    - rust-test
    - security-scan
  script:
    - echo "Deploying to production environment..."
    - |
      # Add your production deployment commands here
      # This could be:
      # - Deploying to production servers
      # - Pushing to production Docker registry
      # - Updating production infrastructure
      echo "Production deployment completed"
  environment:
    name: production
    url: https://universal-ai-tools.com
  only:
    - main
  when: manual

# Post-deployment Testing
post-deploy-test:
  stage: post-deploy
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - deploy-staging
    - deploy-production
  script:
    - echo "Running post-deployment tests..."
    - |
      # Add post-deployment health checks here
      # This could be:
      # - Health check endpoints
      # - Smoke tests
      # - Performance tests
      echo "Post-deployment tests completed"
  when: on_success
  allow_failure: true

# Cleanup
cleanup:
  stage: post-deploy
  image: alpine:latest
  script:
    - echo "Cleaning up temporary files..."
    - |
      # Add cleanup commands here
      # This could be:
      # - Removing temporary files
      # - Cleaning up Docker images
      # - Archiving old artifacts
      echo "Cleanup completed"
  when: always
  allow_failure: true

# Performance Testing
performance-test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - nodejs-build
  script:
    - cd nodejs-api-server
    - npm ci
    - npm start &
    - sleep 15
    - |
      # Run performance tests
      npm run test:performance || echo "Performance tests completed with warnings"
    - pkill -f "npm start" || true
  artifacts:
    reports:
      performance: nodejs-api-server/performance-report.json
  only:
    - main
    - develop
  when: manual

# Code Quality Analysis
code-quality:
  stage: test
  image: node:${NODE_VERSION}-alpine
  script:
    - cd nodejs-api-server
    - npm ci
    - npm run lint -- --format json --output-file eslint-report.json || true
    - npm run format -- --check || true
  artifacts:
    reports:
      codequality: nodejs-api-server/eslint-report.json
  only:
    - main
    - develop
    - merge_requests