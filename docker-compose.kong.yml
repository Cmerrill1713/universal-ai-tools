# Kong API Gateway Docker Compose
# Extends the main docker-compose.full.yml with Kong Gateway

version: '3.8'

services:
  # Kong Database
  kong-database:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - universal-ai-network

  # Kong Database Migration
  kong-migration:
    image: kong:3.4-alpine
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - universal-ai-network

  # Kong API Gateway
  kong:
    image: kong:3.4-alpine
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002, 0.0.0.0:8445 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_STATUS_LISTEN: 0.0.0.0:8100
      KONG_PLUGINS: bundled,prometheus,rate-limiting,cors,request-id,correlation-id,request-size-limiting
    ports:
      - "8000:8000"     # Proxy HTTP
      - "8443:8443"     # Proxy HTTPS
      - "8001:8001"     # Admin API HTTP
      - "8444:8444"     # Admin API HTTPS
      - "8002:8002"     # Admin GUI HTTP
      - "8445:8445"     # Admin GUI HTTPS
      - "8100:8100"     # Status/Health
    volumes:
      - ./kong:/etc/kong
    depends_on:
      kong-migration:
        condition: service_completed_successfully
      node-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
    networks:
      - universal-ai-network

  # Konga - Kong Admin GUI (Optional)
  konga:
    image: pantsel/konga:0.14.9
    environment:
      TOKEN_SECRET: "universal-ai-tools-konga-secret"
      DB_ADAPTER: postgres
      DB_URI: postgresql://kong:kong@kong-database:5432/konga
      NODE_ENV: production
    ports:
      - "1337:1337"
    depends_on:
      - kong-database
    networks:
      - universal-ai-network

  # Kong Deck (Configuration Management)
  kong-deck:
    image: kong/deck:1.35.0
    volumes:
      - ./kong:/kong-config
    command: |
      sh -c "
        echo 'Waiting for Kong to be ready...'
        while ! nc -z kong 8001; do sleep 1; done
        echo 'Syncing Kong configuration...'
        deck sync --kong-addr http://kong:8001 --state /kong-config/kong.yaml
        echo 'Kong configuration applied successfully!'
      "
    depends_on:
      kong:
        condition: service_healthy
    networks:
      - universal-ai-network

volumes:
  kong_data:
    driver: local

networks:
  universal-ai-network:
    external: true