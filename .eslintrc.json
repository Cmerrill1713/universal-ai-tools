{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module",
    "project": ["./tsconfig.eslint.json"]
  },
  "plugins": [
    "@typescript-eslint",
    "import",
    "prettier",
    "security",
    "sonarjs",
    "unused-imports",
    "simple-import-sort"
  ],
  "env": {
    "node": true,
    "es2022": true
  },
  "globals": {
    "fetch": "readonly",
    "Request": "readonly",
    "Response": "readonly",
    "Headers": "readonly"
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:security/recommended",
    "plugin:sonarjs/recommended",
    "prettier"
  ],
  "rules": {
    // TypeScript specific rules
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": true,
        "allowTypedFunctionExpressions": true
      }
    ],
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/consistent-type-imports": "warn",
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/no-misused-promises": "error",
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/strict-boolean-expressions": [
      "error",
      {
        "allowNullableBoolean": true,
        "allowNullableString": true
      }
    ],

    // Import rules
    "import/order": [
      "warn",
      {
        "groups": ["builtin", "external", "internal", "parent", "sibling", "index"],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    "sort-imports": "off",
    "simple-import-sort/imports": "warn",
    "simple-import-sort/exports": "warn",
    "unused-imports/no-unused-imports": "warn",
    "import/no-duplicates": "warn",

    // General rules
    "no-console": ["warn", { "allow": ["warn", "error"] }],
    "no-debugger": "warn",
    "no-alert": "error",
    "no-magic-numbers": [
      "off",
      {
        "ignore": [0, 1, -1],
        "ignoreArrayIndexes": true,
        "enforceConst": true
      }
    ],
    "prefer-const": "warn",
    "no-var": "warn",
    "eqeqeq": ["error", "always"],
    "curly": ["error", "all"],
    "no-throw-literal": "error",
    "prefer-promise-reject-errors": "error",

    // Code quality
    "complexity": ["warn", 10],
    "max-depth": ["warn", 3],
    "max-lines": ["warn", 500],
    "max-lines-per-function": ["warn", 50],
    "max-params": ["warn", 4],
    "max-statements": ["warn", 15],

    // Security
    "security/detect-object-injection": "error",
    "security/detect-non-literal-regexp": "error",
    "security/detect-unsafe-regex": "error",

    // SonarJS rules
    "sonarjs/cognitive-complexity": ["error", 15],
    "sonarjs/no-duplicate-string": ["error", 5],
    "sonarjs/no-identical-functions": "error",
    "sonarjs/no-collapsible-if": "error",
    "sonarjs/no-collection-size-mischeck": "error",
    "sonarjs/no-duplicated-branches": "error",
    "sonarjs/no-identical-conditions": "error",
    "sonarjs/no-inverted-boolean-check": "error",
    "sonarjs/no-redundant-boolean": "error",
    "sonarjs/no-unused-collection": "error",
    "sonarjs/no-useless-catch": "error",
    "sonarjs/prefer-object-literal": "error",
    "sonarjs/prefer-single-boolean-return": "error",

    // Additional rules for catching syntax errors
    "@typescript-eslint/no-unused-expressions": "error",
    "@typescript-eslint/no-invalid-this": "error",
    "@typescript-eslint/no-extra-parens": "warn",
    "@typescript-eslint/no-extra-semi": "error",
    "@typescript-eslint/semi": ["error", "always"],
    "@typescript-eslint/quotes": ["error", "single", { "avoidEscape": true }],
    "@typescript-eslint/comma-dangle": ["error", "never"],
    "no-unreachable": "error",
    "no-unused-labels": "error",
    "no-undef": "off",
    "no-constant-condition": "warn",
    "no-irregular-whitespace": "error",
    "valid-typeof": "error",
    "no-empty": ["warn", { "allowEmptyCatch": true }]
  },
  "overrides": [
    {
      "files": ["*.test.ts", "*.spec.ts"],
      "env": {
        "jest": true
      },
      "rules": {
        "no-magic-numbers": "off",
        "max-lines-per-function": "off",
        "max-statements": "off"
      }
    },
    {
      "files": ["*.js"],
      "env": {
        "node": true
      },
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    }
  ],
  "settings": {
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "./tsconfig.json"
      }
    }
  },
  "ignorePatterns": [
    "dist/",
    "build/",
    "node_modules/",
    "coverage/",
    "*.min.js",
    "ui/",
    "archive/",
    "backups/",
    "claude-flow/",
    "serena/",
    "installer/",
    "mcp-servers/",
    "public/",
    "examples/",
    "venv/",
    "worktrees/",
    "temp/",
    "uploads/",
    "iOS Working App/",
    "macOS-App/",
    "Universal AI Tools Native/",
    "src/tests/**"
  ]
}
