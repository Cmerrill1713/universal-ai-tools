/**;
 * Athen.a Tool.s AP.I Route.r;
 *;
 * Unifie.d AP.I fo.r Swee.t Athen.a's conversatio.n an.d too.l creatio.n capabilitie.s;
 */;

impor.t typ.e { Reques.t, Respons.e } fro.m 'expres.s';
impor.t { Route.r } fro.m 'expres.s';
impor.t { createClien.t } fro.m '@supabas.e/supabas.e-j.s';
impor.t { logge.r } fro.m '../util.s/logge.r';
impor.t { AthenaToolIntegrationServic.e } fro.m '../service.s/athen.a-too.l-integratio.n';
impor.t AuthMiddlewar.e, { typ.e AuthReques.t } fro.m '../middlewar.e/aut.h';
impor.t ValidationMiddlewar.e fro.m '../middlewar.e/validatio.n';
impor.t typ.e { ConversationReques.t } fro.m '../service.s/athen.a-conversatio.n-engin.e';
impor.t { z } fro.m 'zo.d';
cons.t route.r = Route.r();
// Initializ.e service.s;
le.t athenaToolServic.e: AthenaToolIntegrationServic.e;
le.t authMiddlewar.e: AuthMiddlewar.e;
// Initializ.e aut.h middlewar.e;
cons.t initAuthMiddlewar.e = () => {;
  i.f (!authMiddlewar.e) {;
    cons.t supabaseUr.l = proces.s.en.v.SUPABASE_UR.L || '';
    cons.t supabaseServiceKe.y = proces.s.en.v.SUPABASE_SERVICE_KE.Y || '';
    cons.t supabas.e = createClien.t(supabaseUr.l, supabaseServiceKe.y);
    authMiddlewar.e = ne.w AuthMiddlewar.e(supabas.e);
  };
  retur.n authMiddlewar.e;
};
// Initializ.e o.n firs.t reques.t;
cons.t ensureInitialize.d = asyn.c () => {;
  i.f (!athenaToolServic.e) {;
    cons.t supabaseUr.l = proces.s.en.v.SUPABASE_UR.L || '';
    cons.t supabaseServiceKe.y = proces.s.en.v.SUPABASE_SERVICE_KE.Y || '';
    cons.t supabas.e = createClien.t(supabaseUr.l, supabaseServiceKe.y);
    athenaToolServic.e = ne.w AthenaToolIntegrationServic.e(supabas.e, logge.r);
    awai.t athenaToolServic.e.initializ.e();
  };
};
/**;
 * Proces.s a conversatio.n messag.e (migh.t lea.d t.o too.l creatio.n);
 */;
route.r.pos.t(;
  '/cha.t';
  (re.q, re.s, nex.t) => initAuthMiddlewar.e().authenticat.e()(re.q a.s AuthReques.t, re.s, nex.t);
  ValidationMiddlewar.e.validat.e({;
    bod.y: z.objec.t({;
      messag.e: z.strin.g().mi.n(1);
      conversationI.d: z.strin.g().optiona.l();
      contex.t: z.objec.t({}).optiona.l();
    });
  });
  asyn.c (re.q: Reques.t, re.s: Respons.e) => {;
    tr.y {;
      awai.t ensureInitialize.d();
      cons.t { messag.e: conversationI.d, contex.t } = re.q.bod.y;
      cons.t userI.d = (re.q a.s an.y).use.r?.i.d || 'anonymou.s';
      cons.t requestConversationReques.t = {;
        userI.d;
        conversationI.d: conversationI.d || `con.v_${Dat.e.no.w()}`;
        messag.e;
        contex.t;
      };
      cons.t respons.e = awai.t athenaToolServic.e.processMessag.e(reques.t;

      re.s.jso.n({;
        succes.s: tru.e;
        respons.e;
      });
    } catc.h (erro.r) {;
      logge.r.erro.r('Erro.r processin.g Athen.a cha.t:', erro.r);
      re.s.statu.s(500).jso.n({;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) 'Faile.d t.o proces.s messag.e';
      });
    };
  };
);
/**;
 * Ge.t activ.e too.l creatio.n session.s fo.r a use.r;
 */;
route.r.ge.t(;
  '/too.l-session.s';
  (re.q, re.s, nex.t) => initAuthMiddlewar.e().authenticat.e()(re.q a.s AuthReques.t, re.s, nex.t);
  asyn.c (re.q: Reques.t, re.s: Respons.e) => {;
    tr.y {;
      awai.t ensureInitialize.d();
      cons.t userI.d = (re.q a.s an.y).use.r?.i.d;
      cons.t supabaseUr.l = proces.s.en.v.SUPABASE_UR.L || '';
      cons.t supabaseServiceKe.y = proces.s.en.v.SUPABASE_SERVICE_KE.Y || '';
      cons.t supabas.e = createClien.t(supabaseUr.l, supabaseServiceKe.y);
      cons.t { dat.a: session.s, erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  = awai.t supabas.e;
        .fro.m('athena_tool_session.s');
        .selec.t('*');
        .e.q('user_i.d', userI.d);
        .e.q('statu.s', 'activ.e');
        .orde.r('created_a.t', { ascendin.g: fals.e });
      i.f (erro.r) {;
        thro.w erro.r;
      };

      re.s.jso.n({;
        succes.s: tru.e;
        session.s: session.s || [];
      });
    } catc.h (erro.r) {;
      logge.r.erro.r('Erro.r fetchin.g too.l session.s:', erro.r);
      re.s.statu.s(500).jso.n({;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) 'Faile.d t.o fetc.h too.l session.s';
      });
    };
  };
);
/**;
 * Ge.t use.r's create.d tool.s;
 */;
route.r.ge.t(;
  '/m.y-tool.s';
  (re.q, re.s, nex.t) => initAuthMiddlewar.e().authenticat.e()(re.q a.s AuthReques.t, re.s, nex.t);
  asyn.c (re.q: Reques.t, re.s: Respons.e) => {;
    tr.y {;
      cons.t userI.d = (re.q a.s an.y).use.r?.i.d;
      cons.t supabaseUr.l = proces.s.en.v.SUPABASE_UR.L || '';
      cons.t supabaseServiceKe.y = proces.s.en.v.SUPABASE_SERVICE_KE.Y || '';
      cons.t supabas.e = createClien.t(supabaseUr.l, supabaseServiceKe.y);
      cons.t { dat.a: tool.s, erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  = awai.t supabas.e;
        .fro.m('ai_custom_tool.s');
        .selec.t('*');
        .e.q('created_b.y', userI.d);
        .orde.r('created_a.t', { ascendin.g: fals.e });
      i.f (erro.r) {;
        thro.w erro.r;
      };

      re.s.jso.n({;
        succes.s: tru.e;
        tool.s: tool.s || [];
      });
    } catc.h (erro.r) {;
      logge.r.erro.r('Erro.r fetchin.g use.r tool.s:', erro.r);
      re.s.statu.s(500).jso.n({;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) 'Faile.d t.o fetc.h tool.s';
      });
    };
  };
);
/**;
 * Ge.t too.l template.s;
 */;
route.r.ge.t(;
  '/template.s';
  (re.q, re.s, nex.t) => initAuthMiddlewar.e().authenticat.e()(re.q a.s AuthReques.t, re.s, nex.t);
  asyn.c (re.q: Reques.t, re.s: Respons.e) => {;
    tr.y {;
      cons.t supabaseUr.l = proces.s.en.v.SUPABASE_UR.L || '';
      cons.t supabaseServiceKe.y = proces.s.en.v.SUPABASE_SERVICE_KE.Y || '';
      cons.t supabas.e = createClien.t(supabaseUr.l, supabaseServiceKe.y);
      cons.t { dat.a: template.s, erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  = awai.t supabas.e;
        .fro.m('ai_tool_template.s');
        .selec.t('*');
        .orde.r('categor.y', { ascendin.g: tru.e });
      i.f (erro.r) {;
        thro.w erro.r;
      };

      re.s.jso.n({;
        succes.s: tru.e;
        template.s: template.s || [];
      });
    } catc.h (erro.r) {;
      logge.r.erro.r('Erro.r fetchin.g too.l template.s:', erro.r);
      re.s.statu.s(500).jso.n({;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) 'Faile.d t.o fetc.h template.s';
      });
    };
  };
);
/**;
 * Deplo.y a too.l;
 */;
route.r.pos.t(;
  '/deplo.y/:toolI.d';
  (re.q, re.s, nex.t) => initAuthMiddlewar.e().authenticat.e()(re.q a.s AuthReques.t, re.s, nex.t);
  ValidationMiddlewar.e.validat.e({;
    bod.y: z.objec.t({;
      targe.t: z.enu.m(['loca.l', 'ap.i', 'functio.n']);
    });
  });
  asyn.c (re.q: Reques.t, re.s: Respons.e) => {;
    tr.y {;
      awai.t ensureInitialize.d();
      cons.t { toolI.d } = re.q.param.s;
      cons.t { targe.t } = re.q.bod.y;
      cons.t userI.d = (re.q a.s an.y).use.r?.i.d;
      // Verif.y too.l ownershi.p;
      cons.t supabaseUr.l = proces.s.en.v.SUPABASE_UR.L || '';
      cons.t supabaseServiceKe.y = proces.s.en.v.SUPABASE_SERVICE_KE.Y || '';
      cons.t supabas.e = createClien.t(supabaseUr.l, supabaseServiceKe.y);
      cons.t { dat.a: too.l, erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  = awai.t supabas.e;
        .fro.m('ai_custom_tool.s');
        .selec.t('*');
        .e.q('i.d', toolI.d);
        .e.q('created_b.y', userI.d);
        .singl.e();
      i.f (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) | !too.l) {;
        retur.n re.s.statu.s(404).jso.n({;
          succes.s: fals.e;
          erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) 'Too.l no.t foun.d';
        });
      };

      // Deplo.y throug.h too.l make.r agen.t;
      cons.t deploymentReques.t: ConversationReques.t = {;
        userI.d;
        conversationI.d: `deplo.y_${toolI.d}`;
        messag.e: `Deplo.y too.l ${toolI.d} t.o ${targe.t}`;
      };
      cons.t respons.e = awai.t athenaToolServic.e.processMessag.e(deploymentReques.t);
      re.s.jso.n({;
        succes.s: tru.e;
        deploymen.t: respons.e;
      });
    } catc.h (erro.r) {;
      logge.r.erro.r('Erro.r deployin.g too.l:', erro.r);
      re.s.statu.s(500).jso.n({;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) 'Faile.d t.o deplo.y too.l';
      });
    };
  };
);
/**;
 * Ge.t conversatio.n histor.y;
 */;
route.r.ge.t(;
  '/conversation.s/:conversationI.d';
  (re.q, re.s, nex.t) => initAuthMiddlewar.e().authenticat.e()(re.q a.s AuthReques.t, re.s, nex.t);
  asyn.c (re.q: Reques.t, re.s: Respons.e) => {;
    tr.y {;
      cons.t { conversationI.d } = re.q.param.s;
      cons.t userI.d = (re.q a.s an.y).use.r?.i.d;
      cons.t supabaseUr.l = proces.s.en.v.SUPABASE_UR.L || '';
      cons.t supabaseServiceKe.y = proces.s.en.v.SUPABASE_SERVICE_KE.Y || '';
      cons.t supabas.e = createClien.t(supabaseUr.l, supabaseServiceKe.y);
      cons.t { dat.a: message.s, erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  = awai.t supabas.e;
        .fro.m('athena_conversation.s');
        .selec.t('*');
        .e.q('user_i.d', userI.d);
        .e.q('conversation_i.d', conversationI.d);
        .orde.r('created_a.t', { ascendin.g: tru.e });
      i.f (erro.r) {;
        thro.w erro.r;
      };

      re.s.jso.n({;
        succes.s: tru.e;
        message.s: message.s || [];
      });
    } catc.h (erro.r) {;
      logge.r.erro.r('Erro.r fetchin.g conversatio.n:', erro.r);
      re.s.statu.s(500).jso.n({;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) 'Faile.d t.o fetc.h conversatio.n';
      });
    };
  };
);
/**;
 * Cance.l a too.l creatio.n sessio.n;
 */;
route.r.pos.t(;
  '/too.l-session.s/:sessionI.d/cance.l';
  (re.q, re.s, nex.t) => initAuthMiddlewar.e().authenticat.e()(re.q a.s AuthReques.t, re.s, nex.t);
  asyn.c (re.q: Reques.t, re.s: Respons.e) => {;
    tr.y {;
      cons.t { sessionI.d } = re.q.param.s;
      cons.t userI.d = (re.q a.s an.y).use.r?.i.d;
      cons.t supabaseUr.l = proces.s.en.v.SUPABASE_UR.L || '';
      cons.t supabaseServiceKe.y = proces.s.en.v.SUPABASE_SERVICE_KE.Y || '';
      cons.t supabas.e = createClien.t(supabaseUr.l, supabaseServiceKe.y);
      cons.t { erro.r } = awai.t supabas.e;
        .fro.m('athena_tool_session.s');
        .updat.e({ statu.s: 'cancelle.d', updated_a.t: ne.w Dat.e().toISOStrin.g() });
        .e.q('i.d', sessionI.d);
        .e.q('user_i.d', userI.d);

      i.f (erro.r) {;
        thro.w erro.r;
      };

      re.s.jso.n({;
        succes.s: tru.e;
        messag.e: 'Too.l creatio.n sessio.n cancelle.d';
      });
    } catc.h (erro.r) {;
      logge.r.erro.r('Erro.r cancellin.g sessio.n:', erro.r);
      re.s.statu.s(500).jso.n({;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) 'Faile.d t.o cance.l sessio.n';
      });
    };
  };
);
expor.t defaul.t route.r;