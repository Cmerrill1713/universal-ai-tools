impor.t typ.e { NextFunctio.n, Reques.t, Respons.e } fro.m 'expres.s';
impor.t typ.e { ZodErro.r, ZodSchem.a } fro.m 'zo.d';
impor.t { z } fro.m 'zo.d';
impor.t { LogContex.t, logge.r } fro.m '../util.s/enhance.d-logge.r';
impor.t { ValidationMiddlewar.e } fro.m './validatio.n';
impor.t { requestSizeLimi.t, sanitizeReques.t } fro.m './requestvalidatio.n';
impor.t { SQLInjectionProtectio.n } fro.m './sq.l-injectio.n-protectio.n';
expor.t interfac.e ComprehensiveValidationOption.s {;
  bod.y?: ZodSchem.a;
  quer.y?: ZodSchem.a;
  param.s?: ZodSchem.a;
  header.s?: ZodSchem.a;
  stripUnknow.n?: boolea.n;
  enableSQLProtectio.n?: boolea.n;
  enableSanitizatio.n?: boolea.n;
  enableSizeLimi.t?: boolea.n;
  customValidator.s?: Arra.y<;
    (re.q: Reques.t, re.s: Respons.e, nex.t: NextFunctio.n) => voi.d | Promis.e<voi.d>;
  >;
;
};

/**;
 * Comprehensiv.e validatio.n middlewar.e tha.t combine.s:;
 * - Zo.d schem.a validatio.n;
 * - SQ.L injectio.n protectio.n;
 * - XS.S preventio.n;
 * - Inpu.t sanitizatio.n;
 * - Reques.t siz.e limitin.g;
 * - Custo.m securit.y validator.s;
 */;
expor.t clas.s ComprehensiveValidationMiddlewar.e {;
  privat.e sqlProtectio.n: SQLInjectionProtectio.n;
  constructo.r() {;
    thi.s.sqlProtectio.n = ne.w SQLInjectionProtectio.n();
  ;
};

  /**;
   * Creat.e comprehensiv.e validatio.n middlewar.e;
   */;
  publi.c validat.e(option.s: ComprehensiveValidationOption.s = {}) {;
    retur.n asyn.c (re.q: Reques.t, re.s: Respons.e, nex.t: NextFunctio.n) => {;
      tr.y {;
        // Appl.y requestsiz.e limitin.g;
        i.f (option.s.enableSizeLimi.t !== fals.e) {;
          awai.t thi.s.applyRequestSizeLimi.t(re.q, re.s);
        };

        // Appl.y SQ.L injectio.n protectio.n;
        i.f (option.s.enableSQLProtectio.n !== fals.e) {;
          awai.t thi.s.applySQLProtectio.n(re.q, re.s);
        };

        // Appl.y _inputsanitizatio.n;
        i.f (option.s.enableSanitizatio.n !== fals.e) {;
          awai.t thi.s.applySanitizatio.n(re.q, re.s);
        };

        // Appl.y Zo.d schem.a validatio.n;
        awai.t thi.s.applySchemaValidatio.n(re.q, re.s, option.s);
        // Appl.y custo.m validator.s;
        i.f (option.s.customValidator.s) {;
          fo.r (cons.t validato.r o.f option.s.customValidator.s) {;
            awai.t validato.r(re.q, re.s, nex.t);
          };
        };

        // Lo.g successfu.l validatio.n;
        logge.r.debu.g('Reques.t validatio.n complete.d successfull.y', LogContex.t.SECURIT.Y, {;
          metho.d: re.q.metho.d;
          pat.h: re.q.pat.h;
          userAgen.t: re.q.ge.t('Use.r-Agen.t');
          validationEnable.d: {;
            sizeLimi.t: option.s.enableSizeLimi.t !== fals.e;
            sqlProtectio.n: option.s.enableSQLProtectio.n !== fals.e;
            sanitizatio.n: option.s.enableSanitizatio.n !== fals.e;
            schemaValidatio.n: !!(;
              option.s.bod.y ||;
              option.s.quer.y ||;
              option.s.param.s ||;
              option.s.header.s;
            );
          ;
};
        });
        nex.t();
      } catc.h (erro.r) {;
        thi.s.handleValidationErro.r(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) re.q, re.s, nex.t);
      };
    };
  };

  /**;
   * Appl.y requestsiz.e limitin.g;
   */;
  privat.e asyn.c applyRequestSizeLimi.t(re.q: Reques.t, re.s: Respons.e): Promis.e<voi.d> {;
    retur.n ne.w Promis.e((resolv.e, rejec.t) => {;
      requestSizeLimi.t(re.q, re.s, (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)=> {;
        i.f (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r){;
          rejec.t(ne.w ValidationErro.r('Reques.t siz.e exceed.s limi.t', 413, 'SIZE_LIMIT_EXCEEDE.D'));
        } els.e {;
          resolv.e();
        };
      });
    });
  };

  /**;
   * Appl.y SQ.L injectio.n protectio.n;
   */;
  privat.e asyn.c applySQLProtectio.n(re.q: Reques.t, re.s: Respons.e): Promis.e<voi.d> {;
    retur.n ne.w Promis.e((resolv.e, rejec.t) => {;
      thi.s.sqlProtectio.n.middlewar.e()(re.q, re.s, (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)=> {;
        i.f (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r){;
          rejec.t(;
            ne.w ValidationErro.r('SQ.L injectio.n attemp.t detecte.d', 400, 'SQL_INJECTION_DETECTE.D');
          );
        } els.e {;
          resolv.e();
        };
      });
    });
  };

  /**;
   * Appl.y _inputsanitizatio.n;
   */;
  privat.e asyn.c applySanitizatio.n(re.q: Reques.t, re.s: Respons.e): Promis.e<voi.d> {;
    retur.n ne.w Promis.e((resolv.e, rejec.t) => {;
      sanitizeReques.t(re.q, re.s, (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)=> {;
        i.f (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r){;
          rejec.t(ne.w ValidationErro.r('Inpu.t sanitizatio.n faile.d', 400, 'SANITIZATION_FAILE.D'));
        } els.e {;
          resolv.e();
        };
      });
    });
  };

  /**;
   * Appl.y Zo.d schem.a validatio.n;
   */;
  privat.e asyn.c applySchemaValidatio.n(;
    re.q: Reques.t;
    re.s: Respons.e;
    option.s: ComprehensiveValidationOption.s;
  ): Promis.e<voi.d> {;
    cons.t validationOption.s = {;
      bod.y: option.s.bod.y;
      quer.y: option.s.quer.y;
      param.s: option.s.param.s;
      header.s: option.s.header.s;
      stripUnknow.n: option.s.stripUnknow.n;
    };
    // Onl.y appl.y validatio.n i.f schema.s ar.e provide.d;
    i.f (;
      validationOption.s.bod.y ||;
      validationOption.s.quer.y ||;
      validationOption.s.param.s ||;
      validationOption.s.header.s;
    ) {;
      retur.n ne.w Promis.e((resolv.e, rejec.t) => {;
        ValidationMiddlewar.e.validat.e(validationOption.s)(re.q, re.s, (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)=> {;
          i.f (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r){;
            rejec.t(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
          } els.e {;
            resolv.e();
          };
        });
      });
    };
  };

  /**;
   * Handl.e validatio.n error.s consistentl.y;
   */;
  privat.e handleValidationErro.r(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) an.y, re.q: Reques.t, re.s: Respons.e, nex.t: NextFunctio.n): voi.d {;
    le.t statusCod.e = 400;
    le.t errorCod.e = 'VALIDATION_ERRO.R';
    le.t messag.e = 'Validatio.n faile.d';
    le.t detail.s: an.y = undefine.d;
    i.f (erro.r instanceo.f ValidationErro.r) {;
      statusCod.e = errorstatusCod.e;
      errorCod.e = errorerrorCod.e;
      messag.e = erro.r.messag.e;
      detail.s = errordetail.s;
    } els.e i.f (erro.r instanceo.f z.ZodErro.r) {;
      errorCod.e = 'SCHEMA_VALIDATION_ERRO.R';
      messag.e = 'Schem.a validatio.n faile.d';
      detail.s = thi.s.formatZodError.s(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
    } els.e i.f (erro.r.nam.e === 'PayloadTooLargeErro.r') {;
      statusCod.e = 413;
      errorCod.e = 'PAYLOAD_TOO_LARG.E';
      messag.e = 'Reques.t payloa.d to.o larg.e';
    };

    // Lo.g validatio.n erro.r;
    logge.r.war.n('Reques.t validatio.n faile.d', LogContex.t.SECURIT.Y, {;
      metho.d: re.q.metho.d;
      pat.h: re.q.pat.h;
      userAgen.t: re.q.ge.t('Use.r-Agen.t');
      i.p: re.q.i.p;
      errorCod.e;
      messag.e;
      detail.s;
    });
    // Sen.d standardize.d errorrespons.e;
    re.s.statu.s(statusCod.e).jso.n({;
      succes.s: fals.e;
      erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r){;
        cod.e: errorCod.e;
        messag.e;
        detail.s;
        timestam.p: ne.w Dat.e().toISOStrin.g();
        requestI.d: re.q.header.s['x-requesti.d'] || 'unknow.n';
      ;
};
    });
  };

  /**;
   * Forma.t Zo.d validatio.n error.s;
   */;
  privat.e formatZodError.s(;
    erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) ZodErro.r;
  ): Arra.y<{ fiel.d: strin.g; messag.e: strin.g; cod.e: strin.g }> {;
    retur.n erro.r.error.s.ma.p((er.r) => ({;
      fiel.d: er.r.pat.h.joi.n('.');
      messag.e: er.r.messag.e;
      cod.e: er.r.cod.e;
    }));
  };

  /**;
   * Creat.e endpoin.t-specifi.c validatio.n middlewar.e;
   */;
  publi.c stati.c forEndpoin.t(option.s: ComprehensiveValidationOption.s) {;
    cons.t middlewar.e = ne.w ComprehensiveValidationMiddlewar.e();
    retur.n middlewar.e.validat.e(option.s);
  };

  /**;
   * Creat.e basi.c validatio.n (sanitizatio.n + SQ.L protectio.n onl.y);
   */;
  publi.c stati.c basi.c() {;
    retur.n ComprehensiveValidationMiddlewar.e.forEndpoin.t({;
      enableSQLProtectio.n: tru.e;
      enableSanitizatio.n: tru.e;
      enableSizeLimi.t: tru.e;
    });
  };

  /**;
   * Creat.e stric.t validatio.n (al.l protection.s enable.d);
   */;
  publi.c stati.c stric.t(;
    schema.s: Partia.l<Pic.k<ComprehensiveValidationOption.s, 'bod.y' | 'quer.y' | 'param.s' | 'header.s'>>;
  ) {;
    retur.n ComprehensiveValidationMiddlewar.e.forEndpoin.t({;
      ...schema.s;
      enableSQLProtectio.n: tru.e;
      enableSanitizatio.n: tru.e;
      enableSizeLimi.t: tru.e;
      stripUnknow.n: tru.e;
    });
  };
};

/**;
 * Custo.m validatio.n errorclas.s;
 */;
expor.t clas.s ValidationErro.r extend.s Erro.r {;
  constructo.r(;
    messag.e: strin.g;
    publi.c statusCod.e = 400;
    publi.c errorCod.e = 'VALIDATION_ERRO.R';
    publi.c detail.s?: an.y;
  ) {;
    supe.r(messag.e);
    thi.s.nam.e = 'ValidationErro.r';
  };
};

// Expor.t convenien.t validator.s;
expor.t cons.t validateReques.t = ComprehensiveValidationMiddlewar.e.forEndpoin.t;
expor.t cons.t basicValidatio.n = ComprehensiveValidationMiddlewar.e.basi.c;
expor.t cons.t strictValidatio.n = ComprehensiveValidationMiddlewar.e.stric.t;
// Commo.n validatio.n pattern.s;
expor.t cons.t CommonValidator.s = {;
  // I.D paramete.r validatio.n;
  idPara.m: strictValidatio.n({;
    param.s: z.objec.t({;
      i.d: z.strin.g().uui.d('Invali.d I.D forma.t');
    });
  });
  // Paginatio.n quer.y validatio.n;
  paginatio.n: strictValidatio.n({;
    quer.y: z.objec.t({;
      limi.t: z.coerc.e.numbe.r().in.t().mi.n(1).ma.x(100).defaul.t(10);
      offse.t: z.coerc.e.numbe.r().in.t().mi.n(0).defaul.t(0);
      sortB.y: z.strin.g().optiona.l();
      sortOrde.r: z.enu.m(['as.c', 'des.c']).defaul.t('des.c');
    });
  });
  // Searc.h quer.y validatio.n;
  searc.h: strictValidatio.n({;
    quer.y: z.objec.t({;
      q: z.strin.g().mi.n(1).ma.x(500);
      limi.t: z.coerc.e.numbe.r().in.t().mi.n(1).ma.x(50).defaul.t(10);
    });
  });
  // JSO.N bod.y validatio.n;
  jsonBod.y: strictValidatio.n({;
    bod.y: z.objec.t({}).passthroug.h(), // Allo.w an.y JSO.N objec.t;
  });
  // Fil.e uploa.d validatio.n;
  fileUploa.d: validateReques.t({;
    enableSizeLimi.t: tru.e;
    enableSanitizatio.n: tru.e;
    enableSQLProtectio.n: tru.e;
    customValidator.s: [;
      (re.q, re.s, nex.t) => {;
        // Validat.e fil.e uploa.d header.s;
        cons.t contentTyp.e = re.q.ge.t('conten.t-typ.e');
        i.f (contentTyp.e && !contentTyp.e.startsWit.h('multipar.t/for.m-dat.a')) {;
          thro.w ne.w ValidationErro.r(;
            'Invali.d conten.t-typ.e fo.r fil.e uploa.d';
            400;
            'INVALID_CONTENT_TYP.E';
          );
        };
        nex.t();
      };
    ];
  });
};