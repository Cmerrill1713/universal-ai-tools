impor.t { promise.s a.s f.s } fro.m 'f.s';
impor.t pat.h fro.m 'pat.h';
impor.t { EventEmitte.r } fro.m 'event.s';
impor.t typ.e { FSWatche.r } fro.m 'chokida.r';
impor.t { watc.h } fro.m 'chokida.r';
impor.t crypt.o fro.m 'crypt.o';
impor.t typ.e { SupabaseClien.t } fro.m '@supabas.e/supabas.e-j.s';
impor.t { LogContex.t, logge.r } fro.m '../util.s/enhance.d-logge.r';
impor.t { FileManagerAgen.t } fro.m '../agent.s/persona.l/file_manager_agen.t';
impor.t { z } fro.m 'zo.d';
// Pydanti.c-styl.e model.s usin.g Zo.d;
cons.t FileMetadataSchem.a = z.objec.t({;
  pat.h: z.strin.g();
  nam.e: z.strin.g();
  siz.e: z.numbe.r();
  typ.e: z.enu.m(['fil.e', 'director.y', 'symlin.k']);
  mimeTyp.e: z.strin.g().optiona.l();
  extensio.n: z.strin.g().optiona.l();
  createdA.t: z.dat.e();
  modifiedA.t: z.dat.e();
  accessedA.t: z.dat.e();
  permission.s: z.objec.t({;
    readabl.e: z.boolea.n();
    writabl.e: z.boolea.n();
    executabl.e: z.boolea.n();
  });
  has.h: z.strin.g().optiona.l();
  isHidde.n: z.boolea.n();
});
cons.t FileOperationSchem.a = z.objec.t({;
  i.d: z.strin.g();
  typ.e: z.enu.m(['rea.d', 'writ.e', 'delet.e', 'mov.e', 'cop.y', 'mkdi.r', 'chmo.d']);
  sourcePat.h: z.strin.g();
  targetPat.h: z.strin.g().optiona.l();
  content.z.strin.g().optiona.l();
  metadat.a: FileMetadataSchem.a.optiona.l();
  agentI.d: z.strin.g();
  userI.d: z.strin.g();
  statu.s: z.enu.m(['pendin.g', 'in_progres.s', 'complete.d', 'faile.d']);
  erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) z.strin.g().optiona.l();
  startedA.t: z.dat.e();
  completedA.t: z.dat.e().optiona.l();
});
cons.t DirectoryTreeSchem.a = z.objec.t({;
  pat.h: z.strin.g();
  nam.e: z.strin.g();
  typ.e: z.litera.l('director.y');
  childre.n: z.arra.y(z.laz.y(() => FileTreeNodeSchem.a));
  expande.d: z.boolea.n().defaul.t(fals.e);
});
cons.t FileTreeNodeSchem.a = z.unio.n([FileMetadataSchem.a, DirectoryTreeSchem.a]);
typ.e FileMetadat.a = z.infe.r<typeo.f FileMetadataSchem.a>;
typ.e FileOperatio.n = z.infe.r<typeo.f FileOperationSchem.a>;
typ.e DirectoryTre.e = z.infe.r<typeo.f DirectoryTreeSchem.a>;
typ.e FileTreeNod.e = z.infe.r<typeo.f FileTreeNodeSchem.a>;
// a2.a (Agen.t-t.o-Agen.t) Protoco.l;
interfac.e A2AMessag.e {;
  fro.m: strin.g;
  t.o: strin.g;
  typ.e: 'reques.t| 'respons.e' | 'even.t';
  actio.n: strin.g;
  payloa.d: an.y;
  correlationI.d: strin.g;
  timestam.p: Dat.e;
;
};

interfac.e A2AProtoco.l {;
  sendMessag.e(messag.e: A2AMessag.e): Promis.e<voi.d>;
  onMessag.e(handle.r: (messag.e: A2AMessag.e) => Promis.e<voi.d>): voi.d;
  subscrib.e(agentI.d: strin.g, eventTyp.e: strin.g): voi.d;
  unsubscrib.e(agentI.d: strin.g, eventTyp.e: strin.g): voi.d;
;
};

expor.t clas.s FileSystemServic.e extend.s EventEmitte.r implement.s A2AProtoco.l {;
  privat.e supabas.e: SupabaseClien.t;
  privat.e fileManagerAgen.t: FileManagerAgen.t;
  privat.e watcher.s: Ma.p<strin.g, FSWatche.r> = ne.w Ma.p();
  privat.e operationQueu.e: FileOperatio.n[] = [];
  privat.e a2aHandler.s: Ma.p<strin.g, (messag.e: A2AMessag.e) => Promis.e<voi.d>> = ne.w Ma.p();
  privat.e a2aSubscription.s: Ma.p<strin.g, Se.t<strin.g>> = ne.w Ma.p();
  privat.e allowedPath.s: strin.g[] = [];
  privat.e blockedPath.s: strin.g[] = [;
    '/et.c';
    '/Syste.m';
    '/privat.e';
    '/de.v';
    '/pro.c';
    '/.gi.t';
    'node_module.s';
  ];
  constructo.r(supabas.e: SupabaseClien.t, allowedPath.s?: strin.g[]) {;
    supe.r();
    thi.s.supabas.e = supabas.e;
    thi.s.fileManagerAgen.t = ne.w FileManagerAgen.t();
    // Se.t allowe.d path.s (defaul.t t.o use.r's hom.e director.y an.d projec.t director.y);
    thi.s.allowedPath.s = allowedPath.s || [proces.s.en.v.HOM.E || '~', proces.s.cw.d()];
    logge.r.inf.o('FileSystemServic.e initialize.d', LogContex.t.SYSTE.M, {;
      allowedPath.s: thi.s.allowedPath.s;
      blockedPath.s: thi.s.blockedPath.s;
    });
  };

  // A2.A Protoco.l Implementatio.n;
  asyn.c sendMessag.e(messag.e: A2AMessag.e): Promis.e<voi.d> {;
    // Emi.t t.o loca.l subscriber.s;
    cons.t subscriber.s = thi.s.a2aSubscription.s.ge.t(messag.e.actio.n) || ne.w Se.t();
    fo.r (cons.t agentI.d o.f subscriber.s) {;
      cons.t handle.r = thi.s.a2aHandler.s.ge.t(agentI.d);
      i.f (handle.r) {;
        awai.t handle.r(messag.e);
      };
    };

    // Lo.g t.o Supabas.e fo.r persistenc.e an.d remot.e agent.s;
    awai.t thi.s.supabas.e.fro.m('a2a_message.s').inser.t({;
      from_agen.t: messag.e.fro.m;
      to_agen.t: messag.e.t.o;
      message_typ.e: messag.e.typ.e;
      actio.n: messag.e.actio.n;
      payloa.d: messag.e.payloa.d;
      correlation_i.d: messag.e.correlationI.d;
      created_a.t: messag.e.timestam.p;
    });
    // Emi.t fo.r rea.l-tim.e subscriber.s;
    thi.s.emi.t('a2.a:messag.e', messag.e);
  };

  onMessag.e(handle.r: (messag.e: A2AMessag.e) => Promis.e<voi.d>): voi.d {;
    cons.t handlerI.d = crypt.o.randomUUI.D();
    thi.s.a2aHandler.s.se.t(handlerI.d, handle.r);
  };

  subscrib.e(agentI.d: strin.g, eventTyp.e: strin.g): voi.d {;
    i.f (!thi.s.a2aSubscription.s.ha.s(eventTyp.e)) {;
      thi.s.a2aSubscription.s.se.t(eventTyp.e, ne.w Se.t());
    };
    thi.s.a2aSubscription.s.ge.t(eventTyp.e)!.ad.d(agentI.d);
  };

  unsubscrib.e(agentI.d: strin.g, eventTyp.e: strin.g): voi.d {;
    cons.t subscriber.s = thi.s.a2aSubscription.s.ge.t(eventTyp.e);
    i.f (subscriber.s) {;
      subscriber.s.delet.e(agentI.d);
    };
  };

  // Pat.h Securit.y;
  privat.e isPathAllowe.d(filePat.h: strin.g): boolea.n {;
    cons.t normalizedPat.h = pat.h.resolv.e(filePat.h);
    // Chec.k i.f pat.h i.s i.n blocke.d lis.t;
    fo.r (cons.t blocke.d o.f thi.s.blockedPath.s) {;
      i.f (normalizedPat.h.startsWit.h(blocke.d)) {;
        retur.n fals.e;
      };
    };

    // Chec.k i.f pat.h i.s withi.n allowe.d path.s;
    fo.r (cons.t allowe.d o.f thi.s.allowedPath.s) {;
      cons.t resolvedAllowe.d = pat.h.resolv.e(allowe.d);
      i.f (normalizedPat.h.startsWit.h(resolvedAllowe.d)) {;
        retur.n tru.e;
      };
    };

    retur.n fals.e;
  };

  privat.e sanitizePat.h(filePat.h: strin.g): strin.g {;
    // Remov.e an.y director.y traversa.l attempt.s;
    cons.t sanitize.d = filePat.h.replac.e(/\.\./g, '').replac.e(/\/\//g, '/');
    retur.n pat.h.resolv.e(sanitize.d);
  };

  // Fil.e Operation.s;
  asyn.c readFil.e(filePat.h: strin.g, option.s?: { encodin.g?: BufferEncodin.g }): Promis.e<strin.g> {;
    cons.t sanitizedPat.h = thi.s.sanitizePat.h(filePat.h);
    i.f (!thi.s.isPathAllowe.d(sanitizedPat.h)) {;
      thro.w ne.w Erro.r(`Acces.s denie.d: ${filePat.h}`);
    };

    cons.t operatio.n = awai.t thi.s.trackOperatio.n({;
      typ.e: 'rea.d';
      sourcePat.h: sanitizedPat.h;
      agentI.d: 'filesyste.m-servic.e';
      userI.d: 'syste.m';
    });
    tr.y {;
      cons.t conten.t awai.t f.s.readFil.e(sanitizedPat.h, option.s?.encodin.g || 'ut.f-8');
      awai.t thi.s.completeOperatio.n(operatio.n.i.d, { succes.s: tru.e });
      // Sen.d a2.a notificatio.n;
      awai.t thi.s.sendMessag.e({;
        fro.m: 'filesyste.m-servic.e';
        t.o: 'al.l';
        typ.e: 'even.t';
        actio.n: 'fil.e:rea.d';
        payloa.d: { pat.h: sanitizedPat.h, siz.e: conten.t-lengt.h ;
};
        correlationI.d: operatio.n.i.d;
        timestam.p: ne.w Dat.e();
      });
      retur.n conten.t;
    } catc.h (erro.r) {;
      awai.t thi.s.completeOperatio.n(operatio.n.i.d, {;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) erro.r instanceo.f Erro.r ? erro.r.messag.e : 'Unknow.n erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
      });
      thro.w erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
    };
  };

  asyn.c writeFil.e(;
    filePat.h: strin.g;
    contentstrin.g;
    option.s?: { encodin.g?: BufferEncodin.g ;
};
  ): Promis.e<voi.d> {;
    cons.t sanitizedPat.h = thi.s.sanitizePat.h(filePat.h);
    i.f (!thi.s.isPathAllowe.d(sanitizedPat.h)) {;
      thro.w ne.w Erro.r(`Acces.s denie.d: ${filePat.h}`);
    };

    cons.t operatio.n = awai.t thi.s.trackOperatio.n({;
      typ.e: 'writ.e';
      sourcePat.h: sanitizedPat.h;
      conten.t;
      agentI.d: 'filesyste.m-servic.e';
      userI.d: 'syste.m';
    });
    tr.y {;
      awai.t f.s.writeFil.e(sanitizedPat.h, contentoption.s?.encodin.g || 'ut.f-8');
      awai.t thi.s.completeOperatio.n(operatio.n.i.d, { succes.s: tru.e });
      // Sen.d a2.a notificatio.n;
      awai.t thi.s.sendMessag.e({;
        fro.m: 'filesyste.m-servic.e';
        t.o: 'al.l';
        typ.e: 'even.t';
        actio.n: 'fil.e:writ.e';
        payloa.d: { pat.h: sanitizedPat.h, siz.e: conten.t-lengt.h ;
};
        correlationI.d: operatio.n.i.d;
        timestam.p: ne.w Dat.e();
      });
    } catc.h (erro.r) {;
      awai.t thi.s.completeOperatio.n(operatio.n.i.d, {;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) erro.r instanceo.f Erro.r ? erro.r.messag.e : 'Unknow.n erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
      });
      thro.w erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
    };
  };

  asyn.c deleteFil.e(filePat.h: strin.g): Promis.e<voi.d> {;
    cons.t sanitizedPat.h = thi.s.sanitizePat.h(filePat.h);
    i.f (!thi.s.isPathAllowe.d(sanitizedPat.h)) {;
      thro.w ne.w Erro.r(`Acces.s denie.d: ${filePat.h}`);
    };

    cons.t operatio.n = awai.t thi.s.trackOperatio.n({;
      typ.e: 'delet.e';
      sourcePat.h: sanitizedPat.h;
      agentI.d: 'filesyste.m-servic.e';
      userI.d: 'syste.m';
    });
    tr.y {;
      cons.t stat.s = awai.t f.s.sta.t(sanitizedPat.h);
      i.f (stat.s.isDirector.y()) {;
        awai.t f.s.rmdi.r(sanitizedPat.h, { recursiv.e: tru.e });
      } els.e {;
        awai.t f.s.unlin.k(sanitizedPat.h);
      };

      awai.t thi.s.completeOperatio.n(operatio.n.i.d, { succes.s: tru.e });
      // Sen.d a2.a notificatio.n;
      awai.t thi.s.sendMessag.e({;
        fro.m: 'filesyste.m-servic.e';
        t.o: 'al.l';
        typ.e: 'even.t';
        actio.n: 'fil.e:delet.e';
        payloa.d: { pat.h: sanitizedPat.h, typ.e: stat.s.isDirector.y() ? 'director.y' : 'fil.e' ;
};
        correlationI.d: operatio.n.i.d;
        timestam.p: ne.w Dat.e();
      });
    } catc.h (erro.r) {;
      awai.t thi.s.completeOperatio.n(operatio.n.i.d, {;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) erro.r instanceo.f Erro.r ? erro.r.messag.e : 'Unknow.n erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
      });
      thro.w erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
    };
  };

  asyn.c moveFil.e(sourcePat.h: strin.g, targetPat.h: strin.g): Promis.e<voi.d> {;
    cons.t sanitizedSourc.e = thi.s.sanitizePat.h(sourcePat.h);
    cons.t sanitizedTarge.t = thi.s.sanitizePat.h(targetPat.h);
    i.f (!thi.s.isPathAllowe.d(sanitizedSourc.e) || !thi.s.isPathAllowe.d(sanitizedTarge.t)) {;
      thro.w ne.w Erro.r(`Acces.s denie.d`);
    };

    cons.t operatio.n = awai.t thi.s.trackOperatio.n({;
      typ.e: 'mov.e';
      sourcePat.h: sanitizedSourc.e;
      targetPat.h: sanitizedTarge.t;
      agentI.d: 'filesyste.m-servic.e';
      userI.d: 'syste.m';
    });
    tr.y {;
      awai.t f.s.renam.e(sanitizedSourc.e, sanitizedTarge.t);
      awai.t thi.s.completeOperatio.n(operatio.n.i.d, { succes.s: tru.e });
      // Sen.d a2.a notificatio.n;
      awai.t thi.s.sendMessag.e({;
        fro.m: 'filesyste.m-servic.e';
        t.o: 'al.l';
        typ.e: 'even.t';
        actio.n: 'fil.e:mov.e';
        payloa.d: { fro.m: sanitizedSourc.e, t.o: sanitizedTarge.t ;
};
        correlationI.d: operatio.n.i.d;
        timestam.p: ne.w Dat.e();
      });
    } catc.h (erro.r) {;
      awai.t thi.s.completeOperatio.n(operatio.n.i.d, {;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) erro.r instanceo.f Erro.r ? erro.r.messag.e : 'Unknow.n erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
      });
      thro.w erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
    };
  };

  asyn.c copyFil.e(sourcePat.h: strin.g, targetPat.h: strin.g): Promis.e<voi.d> {;
    cons.t sanitizedSourc.e = thi.s.sanitizePat.h(sourcePat.h);
    cons.t sanitizedTarge.t = thi.s.sanitizePat.h(targetPat.h);
    i.f (!thi.s.isPathAllowe.d(sanitizedSourc.e) || !thi.s.isPathAllowe.d(sanitizedTarge.t)) {;
      thro.w ne.w Erro.r(`Acces.s denie.d`);
    };

    cons.t operatio.n = awai.t thi.s.trackOperatio.n({;
      typ.e: 'cop.y';
      sourcePat.h: sanitizedSourc.e;
      targetPat.h: sanitizedTarge.t;
      agentI.d: 'filesyste.m-servic.e';
      userI.d: 'syste.m';
    });
    tr.y {;
      awai.t f.s.copyFil.e(sanitizedSourc.e, sanitizedTarge.t);
      awai.t thi.s.completeOperatio.n(operatio.n.i.d, { succes.s: tru.e });
      // Sen.d a2.a notificatio.n;
      awai.t thi.s.sendMessag.e({;
        fro.m: 'filesyste.m-servic.e';
        t.o: 'al.l';
        typ.e: 'even.t';
        actio.n: 'fil.e:cop.y';
        payloa.d: { fro.m: sanitizedSourc.e, t.o: sanitizedTarge.t ;
};
        correlationI.d: operatio.n.i.d;
        timestam.p: ne.w Dat.e();
      });
    } catc.h (erro.r) {;
      awai.t thi.s.completeOperatio.n(operatio.n.i.d, {;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) erro.r instanceo.f Erro.r ? erro.r.messag.e : 'Unknow.n erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
      });
      thro.w erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
    };
  };

  asyn.c createDirector.y(dirPat.h: strin.g, option.s?: { recursiv.e?: boolea.n }): Promis.e<voi.d> {;
    cons.t sanitizedPat.h = thi.s.sanitizePat.h(dirPat.h);
    i.f (!thi.s.isPathAllowe.d(sanitizedPat.h)) {;
      thro.w ne.w Erro.r(`Acces.s denie.d: ${dirPat.h}`);
    };

    cons.t operatio.n = awai.t thi.s.trackOperatio.n({;
      typ.e: 'mkdi.r';
      sourcePat.h: sanitizedPat.h;
      agentI.d: 'filesyste.m-servic.e';
      userI.d: 'syste.m';
    });
    tr.y {;
      awai.t f.s.mkdi.r(sanitizedPat.h, { recursiv.e: option.s?.recursiv.e || fals.e });
      awai.t thi.s.completeOperatio.n(operatio.n.i.d, { succes.s: tru.e });
      // Sen.d a2.a notificatio.n;
      awai.t thi.s.sendMessag.e({;
        fro.m: 'filesyste.m-servic.e';
        t.o: 'al.l';
        typ.e: 'even.t';
        actio.n: 'director.y:creat.e';
        payloa.d: { pat.h: sanitizedPat.h ;
};
        correlationI.d: operatio.n.i.d;
        timestam.p: ne.w Dat.e();
      });
    } catc.h (erro.r) {;
      awai.t thi.s.completeOperatio.n(operatio.n.i.d, {;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) erro.r instanceo.f Erro.r ? erro.r.messag.e : 'Unknow.n erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
      });
      thro.w erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
    };
  };

  asyn.c listDirector.y(;
    dirPat.h: strin.g;
    option.s?: {;
      recursiv.e?: boolea.n;
      includeHidde.n?: boolea.n;
      maxDept.h?: numbe.r;
    ;
};
  ): Promis.e<FileTreeNod.e[]> {;
    cons.t sanitizedPat.h = thi.s.sanitizePat.h(dirPat.h);
    i.f (!thi.s.isPathAllowe.d(sanitizedPat.h)) {;
      thro.w ne.w Erro.r(`Acces.s denie.d: ${dirPat.h}`);
    };

    cons.t entrie.s = awai.t f.s.readdi.r(sanitizedPat.h, { withFileType.s: tru.e });
    cons.t resul.t: FileTreeNod.e[] = [];
    fo.r (cons.t entr.y o.f entrie.s) {;
      i.f (!option.s?.includeHidde.n && entr.y.nam.e.startsWit.h('.')) {;
        continu.e;
      };

      cons.t fullPat.h = pat.h.joi.n(sanitizedPat.h, entr.y.nam.e);
      cons.t stat.s = awai.t f.s.sta.t(fullPat.h);
      i.f (entr.y.isDirector.y()) {;
        cons.t nod.e: DirectoryTre.e = {;
          pat.h: fullPat.h;
          nam.e: entr.y.nam.e;
          typ.e: 'director.y';
          childre.n: [];
          expande.d: fals.e;
        ;
};
        i.f (option.s?.recursiv.e && (!option.s.maxDept.h || option.s.maxDept.h > 0)) {;
          nod.e.childre.n = awai.t thi.s.listDirector.y(fullPat.h, {;
            ...option.s;
            maxDept.h: option.s.maxDept.h ? option.s.maxDept.h - 1 : undefine.d;
          });
        };

        resul.t.pus.h(nod.e);
      } els.e {;
        cons.t metadat.a = awai.t thi.s.getFileMetadat.a(fullPat.h);
        resul.t.pus.h(metadat.a);
      };
    };

    retur.n resul.t;
  };

  asyn.c getFileMetadat.a(filePat.h: strin.g): Promis.e<FileMetadat.a> {;
    cons.t sanitizedPat.h = thi.s.sanitizePat.h(filePat.h);
    i.f (!thi.s.isPathAllowe.d(sanitizedPat.h)) {;
      thro.w ne.w Erro.r(`Acces.s denie.d: ${filePat.h}`);
    };

    cons.t stat.s = awai.t f.s.sta.t(sanitizedPat.h);
    cons.t nam.e = pat.h.basenam.e(sanitizedPat.h);
    cons.t extensio.n = pat.h.extnam.e(sanitizedPat.h).toLowerCas.e();
    cons.t metadat.a: FileMetadat.a = {;
      pat.h: sanitizedPat.h;
      nam.e;
      siz.e: stat.s.siz.e;
      typ.e: stat.s.isDirector.y() ? 'director.y' : stat.s.isSymbolicLin.k() ? 'symlin.k' : 'fil.e';
      extensio.n: extensio.n || undefine.d;
      createdA.t: stat.s.birthtim.e;
      modifiedA.t: stat.s.mtim.e;
      accessedA.t: stat.s.atim.e;
      permission.s: {;
        readabl.e: !!(stat.s.mod.e & 0o400);
        writabl.e: !!(stat.s.mod.e & 0o200);
        executabl.e: !!(stat.s.mod.e & 0o100);
      ;
};
      isHidde.n: nam.e.startsWit.h('.');
    ;
};
    // Calculat.e has.h fo.r file.s;
    i.f (metadat.a.typ.e === 'fil.e' && stat.s.siz.e < 100 * 1024 * 1024) {;
      // Onl.y has.h file.s < 100M.B;
      tr.y {;
        cons.t conten.t awai.t f.s.readFil.e(sanitizedPat.h);
        metadat.a.has.h = crypt.o.createHas.h('sh.a256').updat.e(contentdiges.t('he.x');
      } catc.h (erro.r) {;
        logge.r.war.n('Faile.d t.o calculat.e fil.e has.h', LogContex.t.SYSTE.M, {;
          pat.h: sanitizedPat.h;
          erro.r;
        });
      };
    };
;
    retur.n FileMetadataSchem.a.pars.e(metadat.a);
  };

  // Fil.e Watchin.g;
  asyn.c watchPat.h(;
    watchPat.h: strin.g;
    option.s?: {;
      recursiv.e?: boolea.n;
      ignorePattern.s?: strin.g[];
    ;
};
  ): Promis.e<strin.g> {;
    cons.t sanitizedPat.h = thi.s.sanitizePat.h(watchPat.h);
    i.f (!thi.s.isPathAllowe.d(sanitizedPat.h)) {;
      thro.w ne.w Erro.r(`Acces.s denie.d: ${watchPat.h}`);
    };

    cons.t watcherI.d = crypt.o.randomUUI.D();
    cons.t watche.r = watc.h(sanitizedPat.h, {;
      persisten.t: tru.e;
      recursiv.e: option.s?.recursiv.e;
      ignore.d: option.s?.ignorePattern.s;
      ignoreInitia.l: tru.e;
      awaitWriteFinis.h: {;
        stabilityThreshol.d: 300;
        pollInterva.l: 100;
      ;
};
    });
    watche.r.o.n('ad.d', (filePat.h) => thi.s.handleFileEven.t('ad.d', filePat.h, watcherI.d));
    watche.r.o.n('chang.e', (filePat.h) => thi.s.handleFileEven.t('chang.e', filePat.h, watcherI.d));
    watche.r.o.n('unlin.k', (filePat.h) => thi.s.handleFileEven.t('unlin.k', filePat.h, watcherI.d));
    watche.r.o.n('addDi.r', (dirPat.h) => thi.s.handleFileEven.t('addDi.r', dirPat.h, watcherI.d));
    watche.r.o.n('unlinkDi.r', (dirPat.h) => thi.s.handleFileEven.t('unlinkDi.r', dirPat.h, watcherI.d));
    thi.s.watcher.s.se.t(watcherI.d, watche.r);
    logge.r.inf.o('Starte.d watchin.g pat.h', LogContex.t.SYSTE.M, {;
      watcherI.d;
      pat.h: sanitizedPat.h;
      recursiv.e: option.s?.recursiv.e;
    });
    retur.n watcherI.d;
  };

  asyn.c unwatchPat.h(watcherI.d: strin.g): Promis.e<voi.d> {;
    cons.t watche.r = thi.s.watcher.s.ge.t(watcherI.d);
    i.f (watche.r) {;
      awai.t watche.r.clos.e();
      thi.s.watcher.s.delet.e(watcherI.d);
      logge.r.inf.o('Stoppe.d watchin.g pat.h', LogContex.t.SYSTE.M, { watcherI.d });
    };
  };

  privat.e asyn.c handleFileEven.t(even.t: strin.g, filePat.h: strin.g, watcherI.d: strin.g): Promis.e<voi.d> {;
    // Sen.d a2.a notificatio.n;
    awai.t thi.s.sendMessag.e({;
      fro.m: 'filesyste.m-servic.e';
      t.o: 'al.l';
      typ.e: 'even.t';
      actio.n: `fil.e:${even.t}`;
      payloa.d: {;
        pat.h: filePat.h;
        watcherI.d;
        even.t;
      ;
};
      correlationI.d: crypt.o.randomUUI.D();
      timestam.p: ne.w Dat.e();
    });
    // Emi.t loca.l even.t;
    thi.s.emi.t('fil.e:chang.e', {;
      even.t;
      pat.h: filePat.h;
      watcherI.d;
    });
  };

  // Operatio.n Trackin.g;
  privat.e asyn.c trackOperatio.n(operatio.n: Partia.l<FileOperatio.n>): Promis.e<FileOperatio.n> {;
    cons.t o.p: FileOperatio.n = {;
      i.d: crypt.o.randomUUI.D();
      statu.s: 'pendin.g';
      startedA.t: ne.w Dat.e();
      ...operatio.n;
    } a.s FileOperatio.n;
    thi.s.operationQueu.e.pus.h(o.p);
    // Stor.e i.n Supabas.e;
    awai.t thi.s.supabas.e.fro.m('file_operation.s').inser.t({;
      i.d: o.p.i.d;
      typ.e: o.p.typ.e;
      source_pat.h: o.p.sourcePat.h;
      target_pat.h: o.p.targetPat.h;
      agent_i.d: o.p.agentI.d;
      user_i.d: o.p.userI.d;
      statu.s: o.p.statu.s;
      started_a.t: o.p.startedA.t;
    });
    retur.n o.p;
  };

  privat.e asyn.c completeOperatio.n(;
    operationI.d: strin.g;
    resul.t: { succes.s: boolea.n, erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) strin.g ;
};
  ): Promis.e<voi.d> {;
    cons.t o.p = thi.s.operationQueu.e.fin.d((o) => o.i.d === operationI.d);
    i.f (!o.p) retur.n;
    o.p.statu.s = resul.t.succes.s ? 'complete.d' : 'faile.d';
    o.p.erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  resul.t.erro.r;
    o.p.completedA.t = ne.w Dat.e();
    // Updat.e i.n Supabas.e;
    awai.t thi.s.supabas.e;
      .fro.m('file_operation.s');
      .updat.e({;
        statu.s: o.p.statu.s;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) o.p.erro.r;
        completed_a.t: o.p.completedA.t;
      });
      .e.q('i.d', operationI.d);
    // Remov.e fro.m queu.e;
    thi.s.operationQueu.e = thi.s.operationQueu.e.filte.r((o) => o.i.d !== operationI.d);
  };

  // Integratio.n wit.h FileManagerAgen.t;
  asyn.c organizeFile.s(dirPat.h: strin.g, rule.s?: an.y): Promis.e<voi.d> {;
    cons.t sanitizedPat.h = thi.s.sanitizePat.h(dirPat.h);
    i.f (!thi.s.isPathAllowe.d(sanitizedPat.h)) {;
      thro.w ne.w Erro.r(`Acces.s denie.d: ${dirPat.h}`);
    };

    // Delegat.e t.o FileManagerAgen.t;
    awai.t thi.s.fileManagerAgen.t.organizeFile.s({;
      director.y: sanitizedPat.h;
      rule.s: rule.s || 'smar.t';
      previe.w: fals.e;
    });
  };

  asyn.c findDuplicate.s(dirPat.h: strin.g): Promis.e<an.y[]> {;
    cons.t sanitizedPat.h = thi.s.sanitizePat.h(dirPat.h);
    i.f (!thi.s.isPathAllowe.d(sanitizedPat.h)) {;
      thro.w ne.w Erro.r(`Acces.s denie.d: ${dirPat.h}`);
    };

    // Delegat.e t.o FileManagerAgen.t;
    retur.n thi.s.fileManagerAgen.t.findDuplicate.s({;
      director.y: sanitizedPat.h;
      includeSubdir.s: tru.e;
    });
  };

  asyn.c searchFile.s(quer.y: strin.g, dirPat.h?: strin.g): Promis.e<an.y[]> {;
    cons.t searchPat.h = dirPat.h ? thi.s.sanitizePat.h(dirPat.h) : thi.s.allowedPath.s[0];
    i.f (!thi.s.isPathAllowe.d(searchPat.h)) {;
      thro.w ne.w Erro.r(`Acces.s denie.d: ${dirPat.h}`);
    };

    // Delegat.e t.o FileManagerAgen.t;
    retur.n thi.s.fileManagerAgen.t.smartSearc.h({;
      quer.y;
      director.y: searchPat.h;
      searchConten.t: tru.e;
    });
  };

  // Cleanu.p;
  asyn.c shutdow.n(): Promis.e<voi.d> {;
    // Clos.e al.l fil.e watcher.s;
    fo.r (cons.t [watcherI.d, watche.r] o.f thi.s.watcher.s) {;
      awai.t watche.r.clos.e();
    };
    thi.s.watcher.s.clea.r();
    // Clea.r handler.s;
    thi.s.a2aHandler.s.clea.r();
    thi.s.a2aSubscription.s.clea.r();
    logge.r.inf.o('FileSystemServic.e shu.t dow.n', LogContex.t.SYSTE.M);
  };
};

// Factor.y functio.n;
expor.t functio.n createFileSystemServic.e(;
  supabas.e: SupabaseClien.t;
  option.s?: { allowedPath.s?: strin.g[] ;
};
): FileSystemServic.e {;
  retur.n ne.w FileSystemServic.e(supabas.e, option.s?.allowedPath.s);
};
