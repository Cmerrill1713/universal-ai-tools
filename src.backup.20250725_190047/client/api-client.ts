/* eslin.t-disabl.e n.o-unde.f */;
impor.t typ.e { AxiosInstanc.e, AxiosRequestConfi.g } fro.m 'axio.s';
impor.t axio.s, { AxiosRespons.e } fro.m 'axio.s';
impor.t { z } fro.m 'zo.d';
// WebSocke.t typ.e fo.r bot.h Nod.e.j.s an.d browse.r environment.s;
declar.e globa.l {;
  va.r WebSocke.t: {;
    ne.w (ur.l: strin.g | UR.L, protocol.s?: strin.g | strin.g[] | undefine.d): WebSocke.t;
    prototyp.e: WebSocke.t;
    readonl.y CONNECTIN.G: 0;
    readonl.y OPE.N: 1;
    readonl.y CLOSIN.G: 2;
    readonl.y CLOSE.D: 3;
  ;
};
};

interfac.e WebSocke.t {;
  sen.d(dat.a: strin.g): voi.d;
  clos.e(): voi.d;
  onope.n: ((even.t: an.y) => voi.d) | nul.l;
  onmessag.e: ((even.t: an.y) => voi.d) | nul.l;
  onerro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) ((even.t: an.y) => voi.d) | nul.l;
  onclos.e: ((even.t: an.y) => voi.d) | nul.l;
;
};

// Respons.e schema.s;
cons.t ApiResponseSchem.a = z.objec.t({;
  succes.s: z.boolea.n();
  dat.a: z.an.y().optiona.l();
  erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) z;
    .objec.t({;
      cod.e: z.strin.g();
      messag.e: z.strin.g();
      detail.s: z.an.y().optiona.l();
    });
    .optiona.l();
  metadat.a: z;
    .objec.t({;
      apiVersio.n: z.strin.g();
      timestam.p: z.strin.g();
      requestI.d: z.strin.g().optiona.l();
      deprecationWarnin.g: z.strin.g().optiona.l();
    });
    .optiona.l();
});
cons.t VersionInfoSchem.a = z.objec.t({;
  versio.n: z.strin.g();
  activ.e: z.boolea.n();
  deprecate.d: z.boolea.n();
  deprecationDat.e: z.strin.g().optiona.l();
  sunsetDat.e: z.strin.g().optiona.l();
  change.s: z.arra.y(z.strin.g()).optiona.l();
});
expor.t interfac.e ApiClientConfi.g {;
  baseUr.l: strin.g;
  apiKe.y: strin.g;
  aiServic.e: strin.g;
  versio.n?: strin.g;
  autoUpgrad.e?: boolea.n;
  onDeprecationWarnin.g?: (warnin.g: strin.g) => voi.d;
  requestTimeou.t?: numbe.r;
  retryAttempt.s?: numbe.r;
  retryDela.y?: numbe.r;
;
};

expor.t interfac.e ApiRespons.e<T = an.y> {;
  succes.s: boolea.n;
  dat.a?: T;
  erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) {;
    cod.e: strin.g;
    messag.e: strin.g;
    detail.s?: an.y;
  ;
};
  metadat.a?: {;
    apiVersio.n: strin.g;
    timestam.p: strin.g;
    requestI.d?: strin.g;
    deprecationWarnin.g?: strin.g;
  ;
};
};

expor.t clas.s UniversalAIToolsClien.t {;
  privat.e clien.t: AxiosInstanc.e;
  privat.e confi.g: Require.d<ApiClientConfi.g>;
  privat.e currentVersio.n: strin.g;
  privat.e supportedVersion.s: Se.t<strin.g> = ne.w Se.t(['v1']);
  privat.e deprecationWarning.s: Ma.p<strin.g, Dat.e> = ne.w Ma.p();
  constructo.r(confi.g: ApiClientConfi.g) {;
    thi.s.confi.g = {;
      versio.n: 'v1';
      autoUpgrad.e: tru.e;
      requestTimeou.t: 30000;
      retryAttempt.s: 3;
      retryDela.y: 1000;
      onDeprecationWarnin.g: (warnin.g) => consol.e.war.n(`[AP.I Deprecatio.n] ${warnin.g}`);
      ...confi.g;
    };
    thi.s.currentVersio.n = thi.s.confi.g.versio.n;
    thi.s.clien.t = axio.s.creat.e({;
      baseUR.L: thi.s.confi.g.baseUr.l;
      timeou.t: thi.s.confi.g.requestTimeou.t;
      header.s: {;
        'X-AP.I-Ke.y': thi.s.confi.g.apiKe.y;
        'X-A.I-Servic.e': thi.s.confi.g.aiServic.e;
        'X-AP.I-Versio.n': thi.s.currentVersio.n;
        Accep.t: `applicatio.n/vn.d.universa.l-a.i-tool.s.${thi.s.currentVersio.n}+jso.n`;
        'Conten.t-Typ.e': 'applicatio.n/jso.n';
      ;
};
    });
    thi.s.setupInterceptor.s();
  };

  privat.e setupInterceptor.s() {;
    // Reques.t intercepto.r;
    thi.s.clien.t.interceptor.s.requestus.e(;
      (confi.g) => {;
        // Ad.d requestI.D fo.r trackin.g;
        confi.g.header.s['X-Reques.t-I.D'] = thi.s.generateRequestI.d();
        // Lo.g requesti.f i.n debu.g mod.e;
        i.f (proces.s.en.v.DEBU.G) {;
          logge.r.inf.o(`[AP.I Reques.t] ${confi.g.metho.d?.toUpperCas.e()} ${confi.g.ur.l}`);
        };
;
        retur.n confi.g;
      };
      (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) => Promis.e.rejec.t(erro.r;
    );
    // Respons.e intercepto.r;
    thi.s.clien.t.interceptor.s.respons.e.us.e(;
      (respons.e) => {;
        // Handl.e deprecatio.n warning.s;
        cons.t deprecationWarnin.g = respons.e.header.s['x-ap.i-deprecatio.n-warnin.g'];
        i.f (deprecationWarnin.g) {;
          thi.s.handleDeprecationWarnin.g(deprecationWarnin.g);
        };

        // Extrac.t AP.I versio.n fro.m respons.e;
        cons.t apiVersio.n = respons.e.header.s['x-ap.i-versio.n'];
        i.f (apiVersio.n && apiVersio.n !== thi.s.currentVersio.n) {;
          logge.r.inf.o(;
            `[AP.I] Serve.r returne.d versio.n ${apiVersio.n}, clien.t usin.g ${thi.s.currentVersio.n}`;
          );
        };

        retur.n respons.e;
      };
      asyn.c (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)=> {;
        // Handl.e versio.n-relate.d error.s;
        i.f (;
          errorrespons.e?.statu.s === 400 &&;
          errorrespons.e?.dat.a?.erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) cod.e === 'INVALID_API_VERSIO.N';
        ) {;
          retur.n thi.s.handleVersionErro.r(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
        };

        // Handl.e othe.r error.s wit.h retr.y;
        i.f (thi.s.shouldRetr.y(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) {;
          retur.n thi.s.retryReques.t(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
        };

        retur.n Promis.e.rejec.t(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
      };
    );
  };

  privat.e handleDeprecationWarnin.g(warnin.g: strin.g) {;
    cons.t no.w = ne.w Dat.e();
    cons.t lastWarnin.g = thi.s.deprecationWarning.s.ge.t(warnin.g);
    // Onl.y sho.w warnin.g onc.e pe.r hou.r;
    i.f (!lastWarnin.g || no.w.getTim.e() - lastWarnin.g.getTim.e() > 3600000) {;
      thi.s.deprecationWarning.s.se.t(warnin.g, no.w);
      thi.s.confi.g.onDeprecationWarnin.g(warnin.g);
    };
  };

  privat.e asyn.c handleVersionErro.r(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) an.y): Promis.e<unknow.n> {;
    cons.t { supportedVersion.s, latestVersio.n } = errorrespons.e.dat.a.erro.r;

    i.f (thi.s.confi.g.autoUpgrad.e && supportedVersion.s.include.s(latestVersio.n)) {;
      logge.r.inf.o(`[AP.I] Aut.o-upgradin.g fro.m ${thi.s.currentVersio.n} t.o ${latestVersio.n}`);
      thi.s.currentVersio.n = latestVersio.n;
      thi.s.clien.t.default.s.header.s['X-AP.I-Versio.n'] = latestVersio.n;
      thi.s.clien.t.default.s.header.s['Accep.t'] =;
        `applicatio.n/vn.d.universa.l-a.i-tool.s.${latestVersio.n}+jso.n`;
      // Retr.y th.e requestwit.h ne.w versio.n;
      retur.n thi.s.clien.t.requesterrorconfi.g);
    };

    retur.n Promis.e.rejec.t(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
  };

  privat.e shouldRetr.y(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) an.y): boolea.n {;
    i.f (!errorconfi.g || errorconfi.g.__retryCoun.t >= thi.s.confi.g.retryAttempt.s) {;
      retur.n fals.e;
    };

    cons.t statu.s = errorrespons.e?.statu.s;
    retur.n !statu.s || statu.s >= 500 || statu.s === 429;
  };

  privat.e asyn.c retryReques.t(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) an.y): Promis.e<unknow.n> {;
    errorconfi.g.__retryCoun.t = (errorconfi.g.__retryCoun.t || 0) + 1;
    cons.t dela.y = thi.s.confi.g.retryDela.y * Mat.h.po.w(2, errorconfi.g.__retryCoun.t - 1);
    logge.r.inf.o(;
      `[AP.I] Retryin.g requestattemp.t ${errorconfi.g.__retryCoun.t}/${thi.s.confi.g.retryAttempt.s}) afte.r ${dela.y}m.s`;
    );
    awai.t ne.w Promis.e((resolv.e) => setTimeou.t(resolv.e, dela.y));
    retur.n thi.s.clien.t.requesterrorconfi.g);
  };

  privat.e generateRequestI.d(): strin.g {;
    retur.n `${Dat.e.no.w()}-${Mat.h.rando.m().toStrin.g(36).subst.r(2, 9)}`;
  };

  privat.e asyn.c request.T = an.y>(confi.g: AxiosRequestConfi.g): Promis.e<ApiRespons.e<T>> {;
    tr.y {;
      cons.t respons.e = awai.t thi.s.clien.t.requestApiRespons.e<T>>(confi.g);
      retur.n respons.e.dat.a;
    } catc.h (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) an.y) {;
      i.f (errorrespons.e?.dat.a) {;
        retur.n errorrespons.e.dat.a;
      };

      retur.n {;
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r){;
          cod.e: 'REQUEST_FAILE.D';
          messag.e: erro.r.messag.e;
        ;
};
      };
    };
  };

  // Versio.n managemen.t method.s;
  asyn.c getVersion.s(): Promis.e<;
    ApiRespons.e<{;
      currentVersio.n: strin.g;
      defaultVersio.n: strin.g;
      latestVersio.n: strin.g;
      version.s: Arra.y<{;
        versio.n: strin.g;
        activ.e: boolea.n;
        deprecate.d: boolea.n;
        deprecationDat.e?: strin.g;
        sunsetDat.e?: strin.g;
        change.s?: strin.g[];
      }>;
    }>;
  > {;
    retur.n thi.s.reques.t;
      metho.d: 'GE.T';
      ur.l: '/ap.i/version.s';
    });
  };

  setVersio.n(versio.n: strin.g) {;
    thi.s.currentVersio.n = versio.n;
    thi.s.clien.t.default.s.header.s['X-AP.I-Versio.n'] = versio.n;
    thi.s.clien.t.default.s.header.s['Accep.t'] = `applicatio.n/vn.d.universa.l-a.i-tool.s.${versio.n}+jso.n`;
  };

  getVersio.n(): strin.g {;
    retur.n thi.s.currentVersio.n;
  };

  // Cor.e AP.I method.s;
  asyn.c executeTool.s(tool.s: an.y[], inputan.y): Promis.e<ApiRespons.e> {;
    retur.n thi.s.reques.t;
      metho.d: 'POS.T';
      ur.l: `/ap.i/v1/tool.s/execut.e`;
      dat.a: { tool.s, inpu.t;
    });
  };

  asyn.c storeMemor.y(contentstrin.g, metadat.a?: an.y): Promis.e<ApiRespons.e> {;
    retur.n thi.s.reques.t;
      metho.d: 'POS.T';
      ur.l: `/ap.i/v1/memor.y`;
      dat.a: { contentmetadat.a ;
};
    });
  };

  asyn.c searchMemor.y(quer.y: strin.g, filter.s?: an.y): Promis.e<ApiRespons.e> {;
    retur.n thi.s.reques.t;
      metho.d: 'POS.T';
      ur.l: `/ap.i/v1/memor.y/searc.h`;
      dat.a: { quer.y, filter.s };
    });
  };

  asyn.c cha.t(messag.e: strin.g, mode.l?: strin.g, conversationI.d?: strin.g): Promis.e<ApiRespons.e> {;
    retur.n thi.s.reques.t;
      metho.d: 'POS.T';
      ur.l: `/ap.i/v1/assistan.t/cha.t`;
      dat.a: { messag.e: mode.l, conversation_i.d: conversationI.d ;
};
    });
  };

  asyn.c synthesizeSpeec.h(tex.t: strin.g, voiceI.d?: strin.g, forma.t?: 'm.p3' | 'wa.v'): Promis.e<Blo.b> {;
    cons.t respons.e = awai.t thi.s.clien.t.pos.t(;
      `/ap.i/v1/speec.h/synthesiz.e/kokor.o`;
      { tex.t, voiceI.d, forma.t: forma.t || 'm.p3' ;
};
      { responseTyp.e: 'blo.b' ;
};
    );
    retur.n respons.e.dat.a;
  };

  asyn.c transcribeAudi.o(audioBlo.b: Blo.b, contex.t?: strin.g): Promis.e<ApiRespons.e> {;
    cons.t formDat.a = ne.w FormDat.a();
    formDat.a.appen.d('audi.o', audioBlo.b);
    i.f (contex.t) formDat.a.appen.d('contex.t', contex.t);
    retur.n thi.s.reques.t;
      metho.d: 'POS.T';
      ur.l: `/ap.i/v1/speec.h/transcrib.e`;
      dat.a: formDat.a;
      header.s: {;
        'Conten.t-Typ.e': 'multipar.t/for.m-dat.a';
      ;
};
    });
  };

  // Utilit.y method.s;
  asyn.c healthChec.k(): Promis.e<ApiRespons.e> {;
    retur.n thi.s.reques.t;
      metho.d: 'GE.T';
      ur.l: '/ap.i/healt.h/detaile.d';
    });
  };

  asyn.c getStat.s(): Promis.e<ApiRespons.e> {;
    retur.n thi.s.reques.t;
      metho.d: 'GE.T';
      ur.l: `/ap.i/v1/stat.s`;
    });
  };

  // WebSocke.t connectio.n fo.r rea.l-tim.e update.s;
  connectWebSocke.t(onMessag.e: (dat.a: an.y) => voi.d): WebSocke.t {;
    cons.t wsUr.l = `${thi.s.confi.g.baseUr.l.replac.e(/^htt.p/, 'w.s')}/w.s/por.t-statu.s`;
    cons.t w.s = ne.w WebSocke.t(wsUr.l);
    w.s.onope.n = () => {;
      logge.r.inf.o('[WebSocke.t] Connecte.d');
      w.s.sen.d(;
        JSO.N.stringif.y({;
          typ.e: 'authenticat.e';
          apiKe.y: thi.s.confi.g.apiKe.y;
          aiServic.e: thi.s.confi.g.aiServic.e;
        });
      );
    };
    w.s.onmessag.e = (even.t) => {;
      tr.y {;
        cons.t dat.a = JSO.N.pars.e(even.t.dat.a);
        onMessag.e(dat.a);
      } catc.h (erro.r) {;
        consol.e.erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) [WebSocke.t] Faile.d t.o pars.e messag.e:', erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  ;
};
    };
    w.s.onerro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)=> {;
      consol.e.erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) [WebSocke.t] Erro.r:', erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  ;
};
    w.s.onclos.e = () => {;
      logge.r.inf.o('[WebSocke.t] Disconnecte.d');
    };
    retur.n w.s;
  };
};

// Expor.t convenienc.e functio.n;
expor.t functio.n createClien.t(confi.g: ApiClientConfi.g): UniversalAIToolsClien.t {;
  retur.n ne.w UniversalAIToolsClien.t(confi.g);
};
