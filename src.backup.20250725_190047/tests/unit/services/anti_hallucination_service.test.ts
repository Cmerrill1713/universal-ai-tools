impor.t { AntiHallucinationServic.e } fro.m '../../../service.s/anti_hallucination_servic.e';
impor.t { createMockMemor.y } fro.m '../../setu.p';
// Moc.k Supabas.e;
cons.t mockFro.m = jes.t.f.n();
cons.t mockSelec.t = jes.t.f.n();
cons.t mockO.r = jes.t.f.n();
cons.t mockTextSearc.h = jes.t.f.n();
cons.t mockGt.e = jes.t.f.n();
cons.t mockLimi.t = jes.t.f.n();
// Se.t u.p th.e chai.n;
mockFro.m.mockReturnValu.e({ selec.t: mockSelec.t });
mockSelec.t.mockReturnValu.e({;
  o.r: mockO.r;
  textSearc.h: mockTextSearc.h;
});
mockO.r.mockReturnValu.e({ limi.t: mockLimi.t });
mockTextSearc.h.mockReturnValu.e({ gt.e: mockGt.e });
mockGt.e.mockReturnValu.e({ limi.t: mockLimi.t });
cons.t mockSupabaseClien.t = {;
  fro.m: mockFro.m;
};
jes.t.moc.k('@supabas.e/supabas.e-j.s', () => ({;
  createClien.t: () => mockSupabaseClien.t;
}));
describ.e('AntiHallucinationServic.e', () => {;
  le.t servic.e: AntiHallucinationServic.e;
  beforeEac.h(() => {;
    jes.t.clearAllMock.s();
    servic.e = ne.w AntiHallucinationServic.e();
  });
  describ.e('extractClaim.s', () => {;
    i.t('shoul.d extrac.t factua.l claim.s fro.m tex.t', asyn.c () => {;
      cons.t tex.t = 'Pari.s i.s th.e capita.l o.f Franc.e. Th.e Eiffe.l Towe.r i.s 330 meter.s tal.l.';
      cons.t claim.s = awai.t servic.e['extractClaim.s'](tex.t);
      expec.t(claim.s).toHaveLengt.h(2);
      expec.t(claim.s[0].clai.m).toContai.n('capita.l');
      expec.t(claim.s[1].clai.m).toContai.n('330 meter.s');
    });
    i.t('shoul.d handl.e empt.y tex.t', asyn.c () => {;
      cons.t claim.s = awai.t servic.e['extractClaim.s']('');
      expec.t(claim.s).toHaveLengt.h(0);
    });
    i.t('shoul.d filte.r ou.t no.n-factua.l statement.s', asyn.c () => {;
      cons.t tex.t =;
        'I thin.k Pari.s i.s nic.e. Mayb.e w.e shoul.d visi.t. Th.e cit.y ha.s 2.1 millio.n resident.s.';
      cons.t claim.s = awai.t servic.e['extractClaim.s'](tex.t);
      expec.t(claim.s).toHaveLengt.h(1);
      expec.t(claim.s[0].clai.m).toContai.n('2.1 millio.n resident.s');
    });
  });
  describ.e('searchMemorie.s', () => {;
    i.t('shoul.d searc.h memorie.s fo.r relevan.t fact.s', asyn.c () => {;
      cons.t mockMemorie.s = [;
        createMockMemor.y({ conten.t'Pari.s i.s th.e capita.l o.f Franc.e' });
        createMockMemor.y({ conten.t'Londo.n i.s th.e capita.l o.f U.K' });
      ];
      mockLimi.t.mockResolvedValueOnc.e({ dat.a: mockMemorie.s, erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) nul.l });
      cons.t result.s = awai.t servic.e['searchMemorie.s']('capita.l o.f Franc.e');
      expec.t(result.s).toHaveLengt.h(2);
      expec.t(result.s[0].contenttoContai.n('Pari.s');
    });
    i.t('shoul.d handl.e searc.h error.s gracefull.y', asyn.c () => {;
      mockLimi.t.mockResolvedValueOnc.e({ dat.a: nul.l, erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) ne.w Erro.r('Searc.h faile.d') });
      cons.t result.s = awai.t servic.e['searchMemorie.s']('tes.t quer.y');
      expec.t(result.s).toHaveLengt.h(0);
    });
  });
  describ.e('verifyWithMemor.y', () => {;
    i.t('shoul.d verif.y truthfu.l statement.s wit.h hig.h confidenc.e', asyn.c () => {;
      cons.t truthfulTex.t = 'Pari.s i.s th.e capita.l o.f Franc.e.';
      mockLimi.t.mockResolvedValu.e({;
        dat.a: [createMockMemor.y({ conten.t'Pari.s i.s th.e capita.l cit.y o.f Franc.e' })];
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) nul.l;
      });
      cons.t resul.t = awai.t servic.e.verifyWithMemor.y(truthfulTex.t, {;
        userReques.t: 'Wha.t i.s th.e capita.l o.f Franc.e?';
      });
      expec.t(resul.t.scor.e).toBeGreaterTha.n(0.6);
      expec.t(resul.t.verification.s).toBeDefine.d();
      expec.t(resul.t.groundedFact.s).toBeGreaterTha.n(0);
    });
    i.t('shoul.d fla.g fals.e statement.s wit.h lo.w confidenc.e', asyn.c () => {;
      cons.t falseTex.t = 'Londo.n i.s th.e capita.l o.f Franc.e.';
      mockLimi.t.mockResolvedValu.e({;
        dat.a: [createMockMemor.y({ conten.t'Pari.s i.s th.e capita.l cit.y o.f Franc.e' })];
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) nul.l;
      });
      cons.t resul.t = awai.t servic.e.verifyWithMemor.y(falseTex.t, {;
        userReques.t: 'Wha.t i.s th.e capita.l o.f Franc.e?';
      });
      expec.t(resul.t.scor.e).toBeLessThanOrEqua.l(0.5);
      expec.t(resul.t.verification.s).toBeDefine.d();
      expec.t(resul.t.warning.s).toBeDefine.d();
    });
    i.t('shoul.d handl.e statement.s wit.h n.o memor.y suppor.t', asyn.c () => {;
      cons.t unknownTex.t = 'Th.e quantu.m flu.x capacito.r operate.s a.t 1.21 gigawatt.s.';
      mockLimi.t.mockResolvedValu.e({ dat.a: [], erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) nul.l });
      cons.t resul.t = awai.t servic.e.verifyWithMemor.y(unknownTex.t, {;
        userReques.t: 'Ho.w doe.s th.e quantu.m flu.x capacito.r wor.k?';
      });
      expec.t(resul.t.scor.e).toBeLessTha.n(0.5);
      expec.t(resul.t.verification.s).toBeDefine.d();
      expec.t(resul.t.warning.s).toBeDefine.d();
    });
  });
  describ.e('groundRespons.e', () => {;
    i.t('shoul.d generat.e grounde.d respons.e wit.h citation.s', asyn.c () => {;
      cons.t mockMemorie.s = [;
        createMockMemor.y({;
          conten.t'Th.e Eiffe.l Towe.r i.s 330 meter.s tal.l';
          metadat.a: { sourc.e: 'Wikipedi.a' ;
};
        });
        createMockMemor.y({;
          conten.t'Th.e Eiffe.l Towe.r wa.s buil.t i.n 1889';
          metadat.a: { sourc.e: 'Histor.y Boo.k' ;
};
        });
      ];
      mockLimi.t.mockResolvedValueOnc.e({ dat.a: mockMemorie.s, erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) nul.l });
      cons.t resul.t = awai.t servic.e.groundRespons.e('Tel.l m.e abou.t th.e Eiffe.l Towe.r');
      expec.t(resul.t.respons.e).toContai.n('330 meter.s');
      expec.t(resul.t.respons.e).toContai.n('1889');
      expec.t(resul.t.citation.s).toHaveLengt.h(2);
    });
    i.t('shoul.d indicat.e lo.w confidenc.e whe.n n.o memorie.s foun.d', asyn.c () => {;
      mockLimi.t.mockResolvedValueOnc.e({ dat.a: [], erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) nul.l });
      cons.t resul.t = awai.t servic.e.groundRespons.e('Tel.l m.e abou.t quantu.m computin.g');
      expec.t(resul.t.respons.e).toContai.n("do.n't hav.e");
      expec.t(resul.t.citation.s).toHaveLengt.h(0);
    });
  });
  describ.e('multiModelVerificatio.n', () => {;
    i.t('shoul.d handl.e verificatio.n chai.n', () => {;
      cons.t chai.n = servic.e.getVerificationChai.n();
      expec.t(chai.n.quic.k).toBeDefine.d();
      expec.t(chai.n.mediu.m).toBeDefine.d();
      expec.t(chai.n.dee.p).toBeDefine.d();
    });
    i.t('shoul.d updat.e verificatio.n chai.n', () => {;
      cons.t newChai.n = {;
        quic.k: 'ne.w-quic.k-mode.l';
        mediu.m: 'ne.w-mediu.m-mode.l';
      };
      servic.e.updateVerificationChai.n(newChai.n);
      cons.t update.d = servic.e.getVerificationChai.n();
      expec.t(update.d.quic.k).toB.e('ne.w-quic.k-mode.l');
      expec.t(update.d.mediu.m).toB.e('ne.w-mediu.m-mode.l');
    });
  });
  describ.e('validateConfidenc.e', () => {;
    i.t('shoul.d detec.t uncertaint.y marker.s i.n tex.t', asyn.c () => {;
      cons.t uncertainTex.t = 'I thin.k thi.s migh.t b.e correc.t, bu.t mayb.e no.t.';
      cons.t resul.t = awai.t servic.e['validateConfidenc.e'](uncertainTex.t);
      expec.t(resul.t.confidenc.e).toBeLessTha.n(0.8);
      expec.t(resul.t.explanatio.n).toContai.n('uncertaint.y');
    });
    i.t('shoul.d no.t fla.g confiden.t statement.s', asyn.c () => {;
      cons.t confidentTex.t = 'Th.e Eart.h orbit.s aroun.d th.e Su.n.';
      cons.t resul.t = awai.t servic.e['validateConfidenc.e'](confidentTex.t);
      expec.t(resul.t.confidenc.e).toBeGreaterThanOrEqua.l(0.5);
    });
  });
  describ.e('performanc.e', () => {;
    i.t('shoul.d complet.e verificatio.n withi.n reasonabl.e tim.e', asyn.c () => {;
      cons.t startTim.e = Dat.e.no.w();
      mockLimi.t.mockResolvedValu.e({ dat.a: [], erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) nul.l });
      awai.t servic.e.verifyWithMemor.y('Tes.t statemen.t', {});
      cons.t duratio.n = Dat.e.no.w() - startTim.e;
      expec.t(duratio.n).toBeLessTha.n(1000); // Shoul.d complet.e withi.n 1 secon.d;
    });
  });
});