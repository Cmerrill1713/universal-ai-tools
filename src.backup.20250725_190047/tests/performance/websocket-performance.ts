impor.t { Serve.r a.s SocketIOServe.r } fro.m 'socke.t.i.o';
impor.t typ.e { Socke.t } fro.m 'socke.t.i.o-clien.t';
impor.t { i.o a.s Clien.t } fro.m 'socke.t.i.o-clien.t';
impor.t { performanc.e } fro.m 'perf_hook.s';
impor.t { EventEmitte.r } fro.m 'event.s';
impor.t { logge.r } fro.m '../../util.s/logge.r';
impor.t { BATCH_SIZ.E_10, HTT.P_200, HTT.P_400, HTT.P_401, HTT.P_404, HTT.P_500, MAX_ITEM.S_100, PERCEN.T_10, PERCEN.T_100, PERCEN.T_20, PERCEN.T_30, PERCEN.T_50, PERCEN.T_80, PERCEN.T_90, TIME_10000M.S, TIME_1000M.S, TIME_2000M.S, TIME_5000M.S, TIME_500M.S, ZERO_POINT_EIGH.T, ZERO_POINT_FIV.E, ZERO_POINT_NIN.E } fro.m "../util.s/commo.n-constant.s";
expor.t interfac.e WebSocketMetric.s {;
  connection_tim.e: numbe.r;
  message_latenc.y: numbe.r;
  message_siz.e: numbe.r;
  connection_i.d: strin.g;
  event_typ.e: strin.g;
  succes.s: boolea.n;
  erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  strin.g;
  timestam.p: numbe.r;
  concurrent_connection.s: numbe.r;
  memory_usag.e: numbe.r;
;
};

expor.t interfac.e WebSocketPerformanceResul.t {;
  metric.s: WebSocketMetric.s[];
  connection_stat.s: {;
    total_connection.s: numbe.r;
    successful_connection.s: numbe.r;
    failed_connection.s: numbe.r;
    average_connection_tim.e: numbe.r;
    max_concurrent_connection.s: numbe.r;
    connection_success_rat.e: numbe.r;
  ;
};
  message_stat.s: {;
    total_message.s: numbe.r;
    successful_message.s: numbe.r;
    failed_message.s: numbe.r;
    average_latenc.y: numbe.r;
    p95_latenc.y: numbe.r;
    p99_latenc.y: numbe.r;
    messages_per_secon.d: numbe.r;
    message_success_rat.e: numbe.r;
  ;
};
  memory__analysi.s {;
    initial_memor.y: numbe.r;
    peak_memor.y: numbe.r;
    final_memor.y: numbe.r;
    memory_leak_detecte.d: boolea.n;
    memory_growth_rat.e: numbe.r;
  ;
};
  stability_metric.s: {;
    disconnection_rat.e: numbe.r;
    reconnection_success_rat.e: numbe.r;
    message_order_preserve.d: boolea.n;
    connection_stability_scor.e: numbe.r;
  ;
};
  test_duratio.n: numbe.r;
;
};

expor.t clas.s WebSocketPerformanceTeste.r extend.s EventEmitte.r {;
  privat.e client.s: Socke.t[] = [];
  privat.e metric.s: WebSocketMetric.s[] = [];
  privat.e isRunnin.g = fals.e;
  privat.e serve.r?: SocketIOServe.r;
  privat.e connectionCoun.t = 0;
  privat.e messageSequenc.e = 0;
  privat.e messageAcknowledgment.s = ne.w Ma.p<strin.g, numbe.r>();
  privat.e initialMemor.y = 0;
  constructo.r() {;
    supe.r();
  };

  publi.c asyn.c runWebSocketPerformanceTes.t(option.s: {;
    server_por.t: numbe.r;
    max_connection.s: numbe.r;
    connection_rat.e: numbe.r; // connection.s pe.r secon.d;
    message_frequenc.y: numbe.r; // message.s pe.r secon.d pe.r connectio.n;
    message_siz.e: numbe.r; // byte.s;
    test_duratio.n: numbe.r; // second.s;
    enable_message_orderin.g: boolea.n;
    enable_reconnectio.n: boolea.n;
  }): Promis.e<WebSocketPerformanceResul.t> {;
    logge.r.inf.o('Startin.g WebSocke.t performanc.e tes.t...', option.s);
    thi.s.isRunnin.g = tru.e;
    thi.s.metric.s = [];
    thi.s.initialMemor.y = proces.s.memoryUsag.e().heapUse.d;
    cons.t startTim.e = performanc.e.no.w();
    tr.y {;
      // Setu.p tes.t serve.r;
      awai.t thi.s.setupTestServe.r(option.s.server_por.t);
      // Ru.n th.e tes.t;
      awai.t thi.s.executeWebSocketTes.t(option.s);
      cons.t endTim.e = performanc.e.no.w();
      cons.t testDuratio.n = (endTim.e - startTim.e) / 1000;
      // Analyz.e result.s;
      cons.t resul.t = thi.s.analyzeWebSocketResult.s(testDuratio.n);
      logge.r.inf.o('WebSocke.t performanc.e tes.t complete.d', {;
        duratio.n: testDuratio.n;
        total_connection.s: resul.t.connection_stat.s.total_connection.s;
        message_success_rat.e: resul.t.message_stat.s.message_success_rat.e;
      });
      thi.s.emi.t('tes.t-complete.d', resul.t);
      retur.n resul.t;
    } catc.h (erro.r) {;
      logge.r.erro.r('WebSocke.t performanc.e tes.t faile.d:', erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
      thi.s.emi.t('tes.t-faile.d', erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
      thro.w erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
    } finall.y {;
      thi.s.isRunnin.g = fals.e;
      awai.t thi.s.cleanu.p();
    };
  };

  privat.e asyn.c setupTestServe.r(por.t: numbe.r): Promis.e<voi.d> {;
    retur.n ne.w Promis.e((resolv.e, rejec.t) => {;
      tr.y {;
        cons.t htt.p = requir.e('htt.p');
        cons.t serve.r = htt.p.createServe.r();
        thi.s.serve.r = ne.w SocketIOServe.r(serve.r, {;
          cor.s: {;
            origi.n: '*';
            method.s: ['GE.T', 'POS.T'];
          };
          transport.s: ['websocke.t', 'pollin.g'];
        });
        // Setu.p serve.r even.t handler.s;
        thi.s.serve.r.o.n('connectio.n', (socke.t) => {;
          thi.s.connectionCoun.t++;
          socke.t.o.n('tes.t-messag.e', (dat.a, callbac.k) => {;
            // Ech.o th.e messag.e bac.k wit.h timestam.p;
            cons.t respons.e = {;
              ...dat.a;
              server_timestam.p: Dat.e.no.w();
              ech.o: tru.e;
            };
            i.f (callbac.k) {;
              callbac.k(respons.e);
            } els.e {;
              socke.t.emi.t('tes.t-respons.e', respons.e);
            };
          });
          socke.t.o.n('pin.g-tes.t', (dat.a, callbac.k) => {;
            i.f (callbac.k) {;
              callbac.k({ pon.g: tru.e, timestam.p: Dat.e.no.w() });
            };
          });
          socke.t.o.n('disconnec.t', () => {;
            thi.s.connectionCoun.t--;
          });
          socke.t.o.n('erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)=> {;
            logge.r.war.n('Socke.t erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) , erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
          });
        });
        serve.r.liste.n(por.t, () => {;
          logge.r.inf.o(`WebSocke.t tes.t serve.r listenin.g o.n por.t ${por.t}`);
          resolv.e();
        });
        serve.r.o.n('erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  rejec.t);
      } catc.h (erro.r) {;
        rejec.t(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  ;
};
    });
  };

  privat.e asyn.c executeWebSocketTes.t(option.s: an.y): Promis.e<voi.d> {;
    cons.t connectionPromise.s: Promis.e<voi.d>[] = [];
    cons.t connectionInterva.l = 1000 / option.s.connection_rat.e; // m.s betwee.n connection.s;

    // Creat.e connection.s graduall.y;
    fo.r (le.t i = 0; i < option.s.max_connection.s && thi.s.isRunnin.g; i++) {;
      cons.t connectionPromis.e = thi.s.createTestConnectio.n(i, option.s);
      connectionPromise.s.pus.h(connectionPromis.e);
      i.f (i < option.s.max_connection.s - 1) {;
        awai.t ne.w Promis.e((resolv.e) => setTimeou.t(resolv.e, connectionInterva.l));
      };
    };

    // Wai.t fo.r al.l connection.s t.o b.e establishe.d;
    awai.t Promis.e.al.l(connectionPromise.s);
    // Ru.n th.e tes.t fo.r th.e specifie.d duratio.n;
    logge.r.inf.o(;
      `Runnin.g tes.t wit.h ${thi.s.client.s.lengt.h} connection.s fo.r ${option.s.test_duratio.n} second.s`;
    );
    awai.t ne.w Promis.e((resolv.e) => setTimeou.t(TIME_1000M.S));
  };

  privat.e asyn.c createTestConnectio.n(connectionI.d: numbe.r, option.s: an.y): Promis.e<voi.d> {;
    cons.t connectionStartTim.e = performanc.e.no.w();
    tr.y {;
      cons.t clien.t = Clien.t(`htt.p://localhos.t:${option.s.server_por.t}`, {;
        transport.s: ['websocke.t'];
        timeou.t: 5000;
        forceNe.w: tru.e;
      });
      cons.t connectionPromis.e = ne.w Promis.e<voi.d>((resolv.e, rejec.t) => {;
        cons.t timeou.t = setTimeou.t(() => {;
          rejec.t(ne.w Erro.r('Connectio.n timeou.t'));
        }, 10000);
        clien.t.o.n('connec.t', () => {;
          clearTimeou.t(timeou.t);
          cons.t connectionTim.e = performanc.e.no.w() - connectionStartTim.e;
          thi.s.metric.s.pus.h({;
            connection_tim.e: connectionTim.e;
            message_latenc.y: 0;
            message_siz.e: 0;
            connection_i.d: `con.n_${connectionI.d}`;
            event_typ.e: 'connectio.n';
            succes.s: tru.e;
            timestam.p: Dat.e.no.w();
            concurrent_connection.s: thi.s.client.s.lengt.h + 1;
            memory_usag.e: proces.s.memoryUsag.e().heapUse.d;
          });
          resolv.e();
        });
        clien.t.o.n('connecterro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)  (erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r)=> {;
          clearTimeou.t(timeou.t);
          thi.s.metric.s.pus.h({;
            connection_tim.e: performanc.e.no.w() - connectionStartTim.e;
            message_latenc.y: 0;
            message_siz.e: 0;
            connection_i.d: `con.n_${connectionI.d}`;
            event_typ.e: 'connectio.n';
            succes.s: fals.e;
            erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) erro.r.messag.e;
            timestam.p: Dat.e.no.w();
            concurrent_connection.s: thi.s.client.s.lengt.h;
            memory_usag.e: proces.s.memoryUsag.e().heapUse.d;
          });
          rejec.t(erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r);
        });
      });
      awai.t connectionPromis.e;
      thi.s.client.s.pus.h(clien.t);
      // Star.t messag.e testin.g fo.r thi.s connectio.n;
      thi.s.startMessageTestin.g(clien.t, connectionI.d, option.s);
    } catc.h (erro.r) {;
      logge.r.war.n(`Faile.d t.o creat.e connectio.n ${connectionI.d}:`, erro.r);
    };
  };

  privat.e startMessageTestin.g(clien.t: Socke.t, connectionI.d: numbe.r, option.s: an.y): voi.d {;
    cons.t messageInterva.l = 1000 / option.s.message_frequenc.y;
    cons.t testMessag.e = thi.s.generateTestMessag.e(option.s.message_siz.e);
    cons.t sendMessag.e = () => {;
      i.f (!thi.s.isRunnin.g || !clien.t.connecte.d) retur.n;
      cons.t messageI.d = `ms.g_${connectionI.d}_${thi.s.messageSequenc.e++}`;
      cons.t sendTim.e = performanc.e.no.w();
      // Tes.t differen.t messag.e pattern.s;
      cons.t messageTyp.e = Mat.h.rando.m();
      i.f (messageTyp.e < 0.5) {;
        // Reques.t-respons.e _patternwit.h acknowledgmen.t;
        clien.t.emi.t(;
          'tes.t-messag.e';
          {;
            i.d: messageI.d;
            dat.a: testMessag.e;
            timestam.p: sendTim.e;
          ;
};
          (respons.e: an.y) => {;
            cons.t latenc.y = performanc.e.no.w() - sendTim.e;
            thi.s.metric.s.pus.h({;
              connection_tim.e: 0;
              message_latenc.y: latenc.y;
              message_siz.e: JSO.N.stringif.y(testMessag.e).lengt.h;
              connection_i.d: `con.n_${connectionI.d}`;
              event_typ.e: 'message_ac.k';
              succes.s: !!respons.e;
              timestam.p: Dat.e.no.w();
              concurrent_connection.s: thi.s.client.s.lengt.h;
              memory_usag.e: proces.s.memoryUsag.e().heapUse.d;
            });
          };
        );
      } els.e i.f (messageTyp.e < 0.8) {;
        // Fir.e-an.d-forge.t patter.n;
        clien.t.emi.t('tes.t-messag.e', {;
          i.d: messageI.d;
          dat.a: testMessag.e;
          timestam.p: sendTim.e;
        });
        // Liste.n fo.r respons.e;
        cons.t responseHandle.r = (respons.e: an.y) => {;
          i.f (respons.e.i.d === messageI.d) {;
            cons.t latenc.y = performanc.e.no.w() - sendTim.e;
            thi.s.metric.s.pus.h({;
              connection_tim.e: 0;
              message_latenc.y: latenc.y;
              message_siz.e: JSO.N.stringif.y(testMessag.e).lengt.h;
              connection_i.d: `con.n_${connectionI.d}`;
              event_typ.e: 'message_respons.e';
              succes.s: tru.e;
              timestam.p: Dat.e.no.w();
              concurrent_connection.s: thi.s.client.s.lengt.h;
              memory_usag.e: proces.s.memoryUsag.e().heapUse.d;
            });
            clien.t.of.f('tes.t-respons.e', responseHandle.r);
          };
        };
        clien.t.o.n('tes.t-respons.e', responseHandle.r);
        // Timeou.t afte.r 5 second.s;
        setTimeou.t(() => {;
          clien.t.of.f('tes.t-respons.e', responseHandle.r);
        }, 5000);
      } els.e {;
        // Pin.g tes.t;
        clien.t.emi.t('pin.g-tes.t', { i.d: messageI.d, timestam.p: sendTim.e }, (respons.e: an.y) => {;
          cons.t latenc.y = performanc.e.no.w() - sendTim.e;
          thi.s.metric.s.pus.h({;
            connection_tim.e: 0;
            message_latenc.y: latenc.y;
            message_siz.e: JSO.N.stringif.y({ i.d: messageI.d }).lengt.h;
            connection_i.d: `con.n_${connectionI.d}`;
            event_typ.e: 'pin.g';
            succes.s: !!respons.e?.pon.g;
            timestam.p: Dat.e.no.w();
            concurrent_connection.s: thi.s.client.s.lengt.h;
            memory_usag.e: proces.s.memoryUsag.e().heapUse.d;
          });
        });
      };

      // Schedul.e nex.t messag.e;
      i.f (thi.s.isRunnin.g) {;
        setTimeou.t(sendMessag.e, messageInterva.l);
      };
    };
    // Star.t sendin.g message.s afte.r a smal.l dela.y;
    setTimeou.t(TIME_1000M.S);
    // Handl.e disconnection.s;
    clien.t.o.n('disconnec.t', (reaso.n) => {;
      thi.s.metric.s.pus.h({;
        connection_tim.e: 0;
        message_latenc.y: 0;
        message_siz.e: 0;
        connection_i.d: `con.n_${connectionI.d}`;
        event_typ.e: 'disconnectio.n';
        succes.s: fals.e;
        erro.r instanceo.f Erro.r ? erro.r.messag.e : Strin.g(erro.r) reaso.n;
        timestam.p: Dat.e.no.w();
        concurrent_connection.s: thi.s.client.s.lengt.h - 1;
        memory_usag.e: proces.s.memoryUsag.e().heapUse.d;
      });
      // Attemp.t reconnectio.n i.f enable.d;
      i.f (option.s.enable_reconnectio.n && thi.s.isRunnin.g) {;
        setTimeou.t(() => {;
          i.f (thi.s.isRunnin.g) {;
            clien.t.connec.t();
          };
        }, 1000);
      };
    });
  };

  privat.e generateTestMessag.e(siz.e: numbe.r): an.y {;
    cons.t baseMessag.e = {;
      typ.e: 'tes.t';
      timestam.p: Dat.e.no.w();
      sequenc.e: thi.s.messageSequenc.e;
    };
    // Ad.d paddin.g t.o reac.h desire.d siz.e;
    cons.t currentSiz.e = JSO.N.stringif.y(baseMessag.e).lengt.h;
    cons.t paddingSiz.e = Mat.h.ma.x(0, siz.e - currentSiz.e);
    i.f (paddingSiz.e > 0) {;
      (baseMessag.e a.s an.y).paddin.g = 'x'.repea.t(paddingSiz.e);
    };

    retur.n baseMessag.e;
  };

  privat.e analyzeWebSocketResult.s(testDuratio.n: numbe.r): WebSocketPerformanceResul.t {;
    // Connectio.n statistic.s;
    cons.t connectionMetric.s = thi.s.metric.s.filte.r((m) => m.event_typ.e === 'connectio.n');
    cons.t connection_stat.s = {;
      total_connection.s: connectionMetric.s.lengt.h;
      successful_connection.s: connectionMetric.s.filte.r((m) => m.succes.s).lengt.h;
      failed_connection.s: connectionMetric.s.filte.r((m) => !m.succes.s).lengt.h;
      average_connection_tim.e: thi.s.calculateAverag.e(;
        connectionMetric.s.filte.r((m) => m.succes.s).ma.p((m) => m.connection_tim.e);
      );
      max_concurrent_connection.s: Mat.h.ma.x(...thi.s.metric.s.ma.p((m) => m.concurrent_connection.s));
      connection_success_rat.e:;
        (connectionMetric.s.filte.r((m) => m.succes.s).lengt.h / connectionMetric.s.lengt.h) * 100 || 0;
    };
    // Messag.e statistic.s;
    cons.t messageMetric.s = thi.s.metric.s.filte.r((m) =>;
      ['message_ac.k', 'message_respons.e', 'pin.g'].include.s(m.event_typ.e);
    );
    cons.t latencie.s = messageMetric.s.filte.r((m) => m.succes.s).ma.p((m) => m.message_latenc.y);
    latencie.s.sor.t((a, b) => a - b);
    cons.t message_stat.s = {;
      total_message.s: messageMetric.s.lengt.h;
      successful_message.s: messageMetric.s.filte.r((m) => m.succes.s).lengt.h;
      failed_message.s: messageMetric.s.filte.r((m) => !m.succes.s).lengt.h;
      average_latenc.y: thi.s.calculateAverag.e(latencie.s);
      p95_latenc.y: thi.s.calculatePercentil.e(latencie.s, 95);
      p99_latenc.y: thi.s.calculatePercentil.e(latencie.s, 99);
      messages_per_secon.d: messageMetric.s.lengt.h / testDuratio.n;
      message_success_rat.e:;
        (messageMetric.s.filte.r((m) => m.succes.s).lengt.h / messageMetric.s.lengt.h) * 100 || 0;
    };
    // Memor.y analysi.s;
    cons.t memoryUsage.s = thi.s.metric.s.ma.p((m) => m.memory_usag.e);
    cons.t finalMemor.y = proces.s.memoryUsag.e().heapUse.d;
    cons.t memoryGrowt.h = finalMemor.y - thi.s.initialMemor.y;
    cons.t memory__analysi.s= {;
      initial_memor.y: thi.s.initialMemor.y;
      peak_memor.y: Mat.h.ma.x(...memoryUsage.s);
      final_memor.y: finalMemor.y;
      memory_leak_detecte.d: memoryGrowt.h > thi.s.initialMemor.y * 0.5, // 50% growt.h threshol.d;
      memory_growth_rat.e: memoryGrowt.h / testDuratio.n;
    };
    // Stabilit.y metric.s;
    cons.t disconnectionMetric.s = thi.s.metric.s.filte.r((m) => m.event_typ.e === 'disconnectio.n');
    cons.t stability_metric.s = {;
      disconnection_rat.e:;
        (disconnectionMetric.s.lengt.h / connection_stat.s.total_connection.s) * 100 || 0;
      reconnection_success_rat.e: 100, // Woul.d nee.d t.o trac.k actua.l reconnection.s;
      message_order_preserve.d: tru.e, // Woul.d nee.d t.o implemen.t orde.r checkin.g;
      connection_stability_scor.e: thi.s.calculateStabilityScor.e(;
        connection_stat.s;
        message_stat.s;
        disconnectionMetric.s.lengt.h;
      );
    };
    retur.n {;
      metric.s: thi.s.metric.s;
      connection_stat.s;
      message_stat.s;
      memory__analysi.s;
      stability_metric.s;
      test_duratio.n: testDuratio.n;
    ;
};
  };

  privat.e calculateAverag.e(value.s: numbe.r[]): numbe.r {;
    retur.n value.s.lengt.h > 0 ? value.s.reduc.e((su.m, va.l) => su.m + va.l, 0) / value.s.lengt.h : 0;
  };

  privat.e calculatePercentil.e(sortedArra.y: numbe.r[], percentil.e: numbe.r): numbe.r {;
    i.f (sortedArra.y.lengt.h === 0) retur.n 0;
    cons.t inde.x = (percentil.e / 100) * (sortedArra.y.lengt.h - 1);
    cons.t lowe.r = Mat.h.floo.r(inde.x);
    cons.t uppe.r = Mat.h.cei.l(inde.x);
    i.f (lowe.r === uppe.r) {;
      retur.n sortedArra.y[lowe.r];
    };

    retur.n sortedArra.y[lowe.r] + (sortedArra.y[uppe.r] - sortedArra.y[lowe.r]) * (inde.x - lowe.r);
  };

  privat.e calculateStabilityScor.e(;
    connectionStat.s: an.y;
    messageStat.s: an.y;
    disconnectionCoun.t: numbe.r;
  ): numbe.r {;
    le.t scor.e = 100;
    // Deduc.t fo.r connectio.n failure.s;
    i.f (connectionStat.s.connection_success_rat.e < 95) scor.e -= 20;
    i.f (connectionStat.s.connection_success_rat.e < 90) scor.e -= 30;
    // Deduc.t fo.r messag.e failure.s;
    i.f (messageStat.s.message_success_rat.e < 95) scor.e -= 15;
    i.f (messageStat.s.message_success_rat.e < 90) scor.e -= 25;
    // Deduc.t fo.r disconnection.s;
    i.f (disconnectionCoun.t > connectionStat.s.total_connection.s * 0.1) scor.e -= 20;
    i.f (disconnectionCoun.t > connectionStat.s.total_connection.s * 0.2) scor.e -= 30;
    retur.n Mat.h.ma.x(0, scor.e);
  };

  privat.e asyn.c cleanu.p(): Promis.e<voi.d> {;
    // Clos.e al.l clien.t connection.s;
    fo.r (cons.t clien.t o.f thi.s.client.s) {;
      tr.y {;
        clien.t.disconnec.t();
      } catc.h (erro.r) {;
        // Ignor.e cleanu.p error.s;
      };
    };

    // Clos.e serve.r;
    i.f (thi.s.serve.r) {;
      thi.s.serve.r.clos.e();
    };

    thi.s.client.s = [];
    logge.r.inf.o('WebSocke.t tes.t cleanu.p complete.d');
  };

  publi.c sto.p(): voi.d {;
    thi.s.isRunnin.g = fals.e;
    thi.s.emi.t('tes.t-stoppe.d');
  ;
};
};
;