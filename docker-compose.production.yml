# Production Docker Compose for Universal AI Tools
version: '3.8'

services:
  # Universal AI Tools Main Service
  universal-ai-tools:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: universal-ai-tools
    restart: unless-stopped
    ports:
      - '9999:9999'
    environment:
      - NODE_ENV=production
      - PORT=9999
      - SUPABASE_URL=${SUPABASE_URL:-http://supabase:54321}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DEV_API_KEY=${DEV_API_KEY}
      - REDIS_URL=redis://redis:6379
      - OLLAMA_URL=http://ollama:11434
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROMETHEUS_METRICS_PORT=9090
    depends_on:
      - redis
      - supabase
      - ollama
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./cache:/app/cache
    networks:
      - universal-ai-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9999/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Supabase Database
  supabase:
    image: supabase/supabase:latest
    container_name: universal-supabase
    restart: unless-stopped
    ports:
      - '54321:54321'
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - SUPABASE_JWT_SECRET=${JWT_SECRET}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
    volumes:
      - supabase_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - universal-ai-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: universal-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - universal-ai-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama Local LLM
  ollama:
    image: ollama/ollama:latest
    container_name: universal-ollama
    restart: unless-stopped
    ports:
      - '11434:11434'
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - universal-ai-network
    environment:
      - OLLAMA_ORIGINS=*
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:11434/api/tags']
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Prometheus Metrics (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: universal-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - universal-ai-network
    profiles:
      - monitoring

  # Grafana Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: universal-grafana
    restart: unless-stopped
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - universal-ai-network
    profiles:
      - monitoring

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: universal-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - universal-ai-tools
    networks:
      - universal-ai-network
    profiles:
      - proxy

volumes:
  supabase_data:
  redis_data:
  ollama_data:
  prometheus_data:
  grafana_data:

networks:
  universal-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
