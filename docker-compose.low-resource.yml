version: '3.8'

services:
  # Universal AI Tools - Optimized for Low Resources
  universal-ai-tools:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    container_name: universal-ai-tools-optimized
    restart: unless-stopped
    ports:
      - "9999:9999"
    environment:
      - NODE_ENV=production
      - PORT=9999
      - ENABLE_OPTIMIZATIONS=true
      - MEMORY_LIMIT=512MB
      - CPU_LIMIT=0.5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    volumes:
      - ./logs:/app/logs
      - /tmp:/tmp
    networks:
      - ai-tools-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9999/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis - Lightweight Configuration
  redis:
    image: redis:7-alpine
    container_name: redis-optimized
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru --save ""
    deploy:
      resources:
        limits:
          memory: 150M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'
    volumes:
      - redis-data:/data
    networks:
      - ai-tools-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Supabase Lite - Minimal PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres-optimized
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=universal_ai_tools
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    command: |
      postgres
      -c shared_buffers=64MB
      -c effective_cache_size=128MB
      -c maintenance_work_mem=16MB
      -c wal_buffers=1MB
      -c max_connections=20
      -c work_mem=2MB
      -c random_page_cost=1.1
      -c temp_file_limit=100MB
      -c log_min_duration_statement=1000
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.15'
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - ai-tools-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama - Local LLM Server (Optional, for offline operation)
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-optimized
    restart: unless-stopped
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MODELS=/usr/share/ollama/.ollama/models
      - OLLAMA_NUM_PARALLEL=1
      - OLLAMA_MAX_LOADED_MODELS=1
      - OLLAMA_FLASH_ATTENTION=false
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    volumes:
      - ollama-data:/usr/share/ollama/.ollama
    networks:
      - ai-tools-network
    profiles:
      - "local-llm"  # Only start if explicitly requested
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Nginx - Lightweight Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-optimized
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'
    networks:
      - ai-tools-network
    depends_on:
      - universal-ai-tools
    profiles:
      - "proxy"  # Only start if explicitly requested

  # Monitoring - Lightweight metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-optimized
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--storage.tsdb.retention.size=500MB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - ai-tools-network
    profiles:
      - "monitoring"  # Only start if explicitly requested

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/postgres
      o: bind
  redis-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/redis  
      o: bind
  ollama-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/ollama
      o: bind
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/prometheus
      o: bind
  nginx-cache:
    driver: local

networks:
  ai-tools-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16