services:
  # =============================================================================
  # UNIVERSAL AI TOOLS - UNIFIED FRONTEND + BACKEND
  # =============================================================================

  # NeuroForge Frontend Application
  # TODO: Configure the actual NeuroForge frontend
  # universal-ai-frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: universal-ai-frontend
  #   ports:
  #     - "8080:8080"  # Main frontend port
  #   environment:
  #     - BACKEND_URL=http://localhost:8080
  #     - KNOWLEDGE_GATEWAY_URL=http://knowledge-gateway:8080
  #     - KNOWLEDGE_SYNC_URL=http://knowledge-sync:8080
  #     - KNOWLEDGE_CONTEXT_URL=http://knowledge-context:8080
  #     - WEAVIATE_URL=http://weaviate:8080
  #     - REDIS_URL=redis://redis:6379
  #   volumes:
  #     - ./logs/frontend:/var/log/frontend
  #   depends_on:
  #     - knowledge-gateway
  #     - knowledge-sync
  #     - knowledge-context
  #     - redis
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - universal-ai-network

  # =============================================================================
  # KNOWLEDGE SERVICES (Go)
  # =============================================================================

  # Knowledge Gateway Service
  knowledge-gateway:
    build:
      context: ./go-services/knowledge-gateway
      dockerfile: Dockerfile
    container_name: knowledge-gateway
    ports:
      - "8088:8080"
    environment:
      - PORT=8080
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
      - LOG_LEVEL=info
      - ENABLE_CORS=true
    volumes:
      - ./logs/knowledge-gateway:/var/log/knowledge-gateway
    depends_on:
      - redis
      - weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - universal-ai-network

  # Knowledge Sync Service
  knowledge-sync:
    build:
      context: ./go-services/knowledge-sync
      dockerfile: Dockerfile
    container_name: knowledge-sync
    ports:
      - "8089:8080"
    environment:
      - PORT=8080
      - WEAVIATE_URL=http://weaviate:8080
      - LOG_LEVEL=info
    volumes:
      - ./logs/knowledge-sync:/var/log/knowledge-sync
    depends_on:
      - knowledge-gateway
      - weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - universal-ai-network

  # Knowledge Context Service
  knowledge-context:
    build:
      context: ./go-services/knowledge-context
      dockerfile: Dockerfile
    container_name: knowledge-context
    ports:
      - "8091:8080"
    environment:
      - PORT=8080
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
      - CONTEXT_TTL=3600s
      - MAX_CONTEXT_SIZE=8192
      - LOG_LEVEL=info
    volumes:
      - ./logs/knowledge-context:/var/log/knowledge-context
    depends_on:
      - redis
      - knowledge-gateway
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - universal-ai-network

  # =============================================================================
  # CORE INFRASTRUCTURE
  # =============================================================================

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - universal-ai-network

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana-unified
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - universal-ai-network

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:2.47.0
    container_name: prometheus-unified
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - universal-ai-network

  # AI Metrics Exporter
  ai-metrics-exporter:
    build:
      context: ./monitoring/ai-metrics
      dockerfile: Dockerfile
    container_name: ai-metrics-exporter
    ports:
      - "9092:9092"
    environment:
      - EXPORT_INTERVAL=30s
      - LOG_LEVEL=info
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - universal-ai-network

  # =============================================================================
  # EXTERNAL DEPENDENCIES (Reference existing services)
  # =============================================================================

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.21.0
    container_name: universal-ai-tools-weaviate
    ports:
      - "8090:8080"
      - "50051:50051"
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-cohere,text2vec-huggingface,text2vec-palm,text2vec-openai,generative-openai,generative-cohere,generative-palm,ref2vec-centroid,reranker-cohere,qna-openai
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate-data:/var/lib/weaviate
    networks:
      - universal-ai-network

volumes:
  redis-data:
  grafana-data:
  prometheus-data:
  weaviate-data:

networks:
  universal-ai-network:
    driver: bridge
