# Universal AI Tools - Production-Ready Distributed Tracing
# Enhanced security, authentication, and monitoring

services:
  # OpenTelemetry Collector - Production Configuration
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: universal-ai-otel-collector-prod
    command: ["--config=/etc/otel-collector-config.yml"]
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Metrics (internal only)
      - "8889:8889"   # Prometheus metrics
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml:ro
      - ./data/otel:/var/lib/otelcol/data
      - ./certs:/etc/ssl/certs:ro
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=https://tempo:4317
      - OTEL_EXPORTER_OTLP_INSECURE=false
    depends_on:
      - jaeger
      - tempo
      - zipkin
    networks:
      - tracing-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Jaeger with Authentication
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: universal-ai-jaeger-prod
    ports:
      - "127.0.0.1:16686:16686"  # UI restricted to localhost
      - "14268:14268"  # Collector HTTP
      - "14250:14250"  # Collector gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - SPAN_STORAGE_TYPE=cassandra
      - CASSANDRA_SERVERS=cassandra:9042
      - CASSANDRA_KEYSPACE=jaeger_v1_production
      - QUERY_BASE_PATH=/jaeger
      - JAEGER_DISABLED=false
      - METRICS_BACKEND=prometheus
      - METRICS_HTTP_ROUTE=/metrics
    volumes:
      - ./jaeger-ui-config.json:/etc/jaeger/jaeger-ui.json:ro
    networks:
      - tracing-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Cassandra for Jaeger persistent storage
  cassandra:
    image: cassandra:4.1
    container_name: universal-ai-cassandra
    environment:
      - CASSANDRA_CLUSTER_NAME=jaeger
      - CASSANDRA_DC=dc1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_NUM_TOKENS=128
    volumes:
      - ./data/cassandra:/var/lib/cassandra
    networks:
      - tracing-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Grafana Tempo with Enhanced Configuration
  tempo:
    image: grafana/tempo:2.2.4
    container_name: universal-ai-tempo-prod
    command: [ "-config.file=/etc/tempo.yaml" ]
    ports:
      - "127.0.0.1:3200:3200"   # HTTP restricted to localhost
      - "9095:9095"   # gRPC
    volumes:
      - ./tempo-production.yaml:/etc/tempo.yaml:ro
      - ./data/tempo:/tmp/tempo
    environment:
      - TEMPO_QUERY_TIMEOUT=30s
      - TEMPO_STORAGE_TRACE_BACKEND=s3
    networks:
      - tracing-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus with Enhanced Security
  prometheus-tracing:
    image: prom/prometheus:v2.47.0
    container_name: universal-ai-prometheus-prod
    ports:
      - "127.0.0.1:9090:9090"  # Restricted to localhost
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=https://monitoring.universal-ai-tools.com/prometheus'
      - '--web.route-prefix=/'
    volumes:
      - ./prometheus-production.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus:/prometheus
      - ./prometheus-rules:/etc/prometheus/rules:ro
    networks:
      - tracing-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana with Enhanced Security
  grafana-tracing:
    image: grafana/grafana:10.2.0
    container_name: universal-ai-grafana-prod
    ports:
      - "127.0.0.1:3001:3000"  # Restricted to localhost
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_BASIC_ENABLED=true
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_CONTENT_TYPE_PROTECTION=true
      - GF_SECURITY_X_CONTENT_TYPE_OPTIONS=nosniff
      - GF_SECURITY_X_XSS_PROTECTION=true
      - GF_SERVER_ROOT_URL=https://monitoring.universal-ai-tools.com/grafana
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor,correlations
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    secrets:
      - grafana_admin_password
    depends_on:
      - tempo
      - jaeger
      - prometheus-tracing
    networks:
      - tracing-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zipkin with Memory Optimization
  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: universal-ai-zipkin-prod
    ports:
      - "127.0.0.1:9411:9411"  # Restricted to localhost
    environment:
      - STORAGE_TYPE=cassandra3
      - CASSANDRA_CONTACT_POINTS=cassandra:9042
      - CASSANDRA_KEYSPACE=zipkin
      - JAVA_OPTS=-XX:+UnlockExperimentalVMOptions -Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx512m -XX:+UseG1GC
    depends_on:
      - cassandra
    networks:
      - tracing-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy with SSL
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: universal-ai-nginx-proxy
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - grafana-tracing
      - jaeger
      - prometheus-tracing
    networks:
      - tracing-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Alertmanager with Webhook Integration
  alertmanager:
    image: prom/alertmanager:latest
    container_name: universal-ai-alertmanager-prod
    ports:
      - "127.0.0.1:9093:9093"  # Restricted to localhost
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://monitoring.universal-ai-tools.com/alertmanager'
      - '--web.route-prefix=/'
    volumes:
      - ./alertmanager/alertmanager-production.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./data/alertmanager:/alertmanager
    networks:
      - tracing-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

secrets:
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt

networks:
  tracing-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: tracing-br0
    ipam:
      config:
        - subnet: 172.25.0.0/16
          gateway: 172.25.0.1

volumes:
  tempo_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/tempo
  grafana_tracing_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  prometheus_tracing_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  cassandra_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/cassandra
  otel_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/otel