# Universal AI Tools - Fixed Distributed Tracing Stack
# Complete observability for Go/Rust microservices with Qdrant vector DB

version: '3.8'

networks:
  tracing-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16

volumes:
  tempo_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  qdrant_data:
    driver: local
  jaeger_data:
    driver: local

services:
  # ====================================
  # VECTOR DATABASE
  # ====================================
  
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: uat-qdrant
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__MAX_REQUEST_SIZE_MB=256
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
      - QDRANT__STORAGE__OPTIMIZERS__INDEXING_THRESHOLD=10000
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ====================================
  # OPENTELEMETRY COLLECTOR
  # ====================================
  
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: uat-otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter
      - "13133:13133" # Health check
      - "55679:55679" # ZPages
    volumes:
      - ./otel-collector-fixed.yml:/etc/otel-collector-config.yml:ro
    depends_on:
      - tempo
      - jaeger
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ====================================
  # TRACING BACKENDS
  # ====================================
  
  # Jaeger - Primary tracing UI
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: uat-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - jaeger_data:/badger
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Tempo - Long-term trace storage
  tempo:
    image: grafana/tempo:2.3.1
    container_name: uat-tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    ports:
      - "3200:3200"   # HTTP
      - "4320:4317"   # OTLP gRPC (different port to avoid conflict)
    volumes:
      - ./tempo-fixed.yaml:/etc/tempo.yaml:ro
      - tempo_data:/tmp/tempo
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ====================================
  # METRICS & VISUALIZATION
  # ====================================
  
  # Prometheus
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: uat-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./prometheus-fixed.yml:/etc/prometheus/prometheus.yml:ro
      - ./alert_rules.yml:/etc/prometheus/rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana
  grafana:
    image: grafana/grafana:10.2.2
    container_name: uat-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=tracing123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor,correlations,traceToMetrics
      - GF_INSTALL_PLUGINS=redis-datasource,redis-app
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
      - tempo
      - jaeger
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ====================================
  # APPLICATION SERVICES (OPTIONAL)
  # ====================================
  
  # LLM Router (Rust)
  llm-router:
    build:
      context: ../rust-services/llm-router
      dockerfile: Dockerfile
    container_name: uat-llm-router
    ports:
      - "8001:8001"
      - "9001:9001"  # Metrics
    environment:
      - RUST_LOG=info,llm_router=debug
      - SERVICE_NAME=llm-router
      - OTEL_SERVICE_NAME=llm-router
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=otlp
      - QDRANT_URL=http://qdrant:6333
      - LLM_ROUTER_PORT=8001
      - METRICS_PORT=9001
    depends_on:
      - otel-collector
      - qdrant
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["with-apps"]

  # WebSocket Service (Go) 
  websocket-service:
    build:
      context: ../rust-services/go-websocket
      dockerfile: Dockerfile
    container_name: uat-websocket
    ports:
      - "8080:8080"
      - "9003:9003"  # Metrics
    environment:
      - SERVICE_NAME=websocket-service
      - OTEL_SERVICE_NAME=websocket-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - WEBSOCKET_PORT=8080
      - METRICS_PORT=9003
    depends_on:
      - otel-collector
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["with-apps"]