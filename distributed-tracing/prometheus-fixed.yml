# Prometheus Configuration - Fixed
# Metrics collection for Universal AI Tools

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'local'
    environment: 'production'
    monitor: 'universal-ai-tools'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets: []  # Add alertmanager:9093 when deployed

# Load rules once and periodically evaluate them
rule_files:
  - "rules.yml"

# Scrape configurations
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    metrics_path: /metrics

  # OpenTelemetry Collector metrics
  - job_name: 'otel-collector'
    static_configs:
      - targets: ['otel-collector:8888', 'otel-collector:8889']
    scrape_interval: 10s

  # Jaeger metrics
  - job_name: 'jaeger'
    static_configs:
      - targets: ['jaeger:14269']
    metrics_path: /metrics

  # Tempo metrics
  - job_name: 'tempo'
    static_configs:
      - targets: ['tempo:3200']
    metrics_path: /metrics

  # Grafana metrics
  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']
    metrics_path: /metrics

  # Qdrant vector database metrics
  - job_name: 'qdrant'
    static_configs:
      - targets: ['qdrant:6333']
    metrics_path: /metrics
    scrape_interval: 30s

  # LLM Router (Rust service)
  - job_name: 'llm-router'
    static_configs:
      - targets: ['llm-router:9001']
    scrape_interval: 15s
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'rust_.*'
        target_label: component
        replacement: 'rust'
      - source_labels: [__name__]
        regex: 'tokio_.*'
        target_label: runtime
        replacement: 'tokio'

  # WebSocket Service (Go service)
  - job_name: 'websocket-service'
    static_configs:
      - targets: ['websocket-service:9003']
    scrape_interval: 15s
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'go_.*'
        action: drop  # Drop Go runtime metrics to reduce noise

  # Service discovery for dynamic targets
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

# Remote write configuration (optional)
# remote_write:
#   - url: "http://remote-prometheus:9090/api/v1/write"
#     write_relabel_configs:
#       - source_labels: [__name__]
#         regex: 'up'
#         action: drop

# Remote read configuration (optional)
# remote_read:
#   - url: "http://remote-prometheus:9090/api/v1/read"
#     read_recent: true