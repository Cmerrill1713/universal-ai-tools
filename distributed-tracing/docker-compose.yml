# Universal AI Tools - Distributed Tracing Stack
# Production-ready deployment with complete observability

version: '3.8'

services:
  # Rust LLM Router with OpenTelemetry
  llm-router:
    build:
      context: ../rust-services/llm-router
      dockerfile: Dockerfile
    container_name: universal-ai-llm-router
    ports:
      - "8001:8001"
      - "9001:9001"  # Metrics
    environment:
      - SERVICE_NAME=llm-router
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=production
      - OTLP_ENDPOINT=otel-collector:4317
      - LLM_ROUTER_PORT=8001
      - OLLAMA_ENDPOINT=http://ollama:11434
      - RUST_LOG=info
    depends_on:
      - otel-collector
      - redis-cluster
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go WebSocket Service with OpenTelemetry
  websocket-service:
    build:
      context: ../rust-services/go-websocket
      dockerfile: Dockerfile
    container_name: universal-ai-websocket
    ports:
      - "8080:8080"
      - "9003:9003"  # Metrics
    environment:
      - SERVICE_NAME=websocket-service
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=production
      - OTLP_ENDPOINT=otel-collector:4317
      - WEBSOCKET_PORT=8080
      - REDIS_URL=redis-cluster:6379
    depends_on:
      - otel-collector
      - redis-cluster
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: universal-ai-otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Metrics
      - "8889:8889"   # Prometheus metrics
      - "13133:13133" # Health check
      - "1777:1777"   # Profiling
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml:ro
    depends_on:
      - jaeger
      - tempo
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger All-in-One for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: universal-ai-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
      - "6831:6831/udp"  # Jaeger agent UDP
      - "6832:6832/udp"  # Jaeger agent UDP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - SPAN_STORAGE_TYPE=memory
      - QUERY_MAX_CLOCK_SKEW_ADJUSTMENT=1s
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Grafana Tempo for high-scale tracing
  tempo:
    image: grafana/tempo:2.2.4
    container_name: universal-ai-tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    ports:
      - "3200:3200"   # Tempo HTTP
      - "9095:9095"   # Tempo gRPC
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml:ro
      - tempo_data:/tmp/tempo
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics correlation
  prometheus-tracing:
    image: prom/prometheus:v2.47.0
    container_name: universal-ai-prometheus-tracing
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.enable-remote-write-receiver'
    volumes:
      - ./prometheus-tracing.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_tracing_data:/prometheus
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for tracing visualization
  grafana-tracing:
    image: grafana/grafana:10.2.0
    container_name: universal-ai-grafana-tracing
    ports:
      - "3001:3000"  # Different port to avoid conflict
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=tracing123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor,correlations
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_tracing_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - tempo
      - jaeger
      - prometheus-tracing
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster for distributed state
  redis-cluster:
    image: redis:7.2-alpine
    container_name: universal-ai-redis-cluster
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes --replica-read-only no --timeout 60
    volumes:
      - redis_cluster_data:/data
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Exporter for metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: universal-ai-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis-cluster:6379
    depends_on:
      - redis-cluster
    networks:
      - tracing-network
    restart: unless-stopped

  # Node Exporter for infrastructure metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: universal-ai-node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - tracing-network
    restart: unless-stopped

  # Alertmanager for alerting
  alertmanager:
    image: prom/alertmanager:latest
    container_name: universal-ai-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ../monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zipkin (alternative tracing backend)
  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: universal-ai-zipkin
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
      - JAVA_OPTS=-XX:+UnlockExperimentalVMOptions -Djava.security.egd=file:/dev/./urandom
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  tracing-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  tempo_data:
    driver: local
  grafana_tracing_data:
    driver: local
  prometheus_tracing_data:
    driver: local
  redis_cluster_data:
    driver: local