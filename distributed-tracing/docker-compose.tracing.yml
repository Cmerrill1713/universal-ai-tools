version: '3.8'

services:
  # Jaeger All-in-One for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: universal-ai-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "6831:6831/udp"  # Jaeger agent UDP
      - "6832:6832/udp"  # Jaeger agent UDP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: universal-ai-otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Metrics
      - "8889:8889"   # Prometheus metrics
      - "13133:13133" # Health check
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml:ro
    depends_on:
      - jaeger
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zipkin (alternative tracing backend)
  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: universal-ai-zipkin
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
    networks:
      - tracing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Tempo (for high-scale tracing)
  tempo:
    image: grafana/tempo:2.2.4
    container_name: universal-ai-tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    ports:
      - "3200:3200"   # Tempo HTTP
      - "9095:9095"   # Tempo gRPC
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml:ro
      - tempo_data:/tmp/tempo
    networks:
      - tracing-network
    restart: unless-stopped

  # Grafana for tracing visualization
  grafana-tracing:
    image: grafana/grafana:10.2.0
    container_name: universal-ai-grafana-tracing
    ports:
      - "3001:3000"  # Different port to avoid conflict
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=tracing123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    volumes:
      - grafana_tracing_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - tempo
      - jaeger
    networks:
      - tracing-network
    restart: unless-stopped

  # Prometheus for metrics correlation
  prometheus-tracing:
    image: prom/prometheus:v2.47.0
    container_name: universal-ai-prometheus-tracing
    ports:
      - "9091:9090"  # Different port to avoid conflict
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus-tracing.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_tracing_data:/prometheus
    networks:
      - tracing-network
    restart: unless-stopped

networks:
  tracing-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  tempo_data:
    driver: local
  grafana_tracing_data:
    driver: local
  prometheus_tracing_data:
    driver: local