# Logging Configuration for NewTradingBot
# This YAML file configures Python logging using the logging.config module

version: 1
disable_existing_loggers: False

formatters:
  standard:
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"
  
  detailed:
    format: "%(asctime)s - %(name)s - %(levelname)s - %(module)s - %(funcName)s - %(lineno)d - %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"
  
  json:
    format: '{"timestamp": "%(asctime)s", "logger": "%(name)s", "level": "%(levelname)s", "module": "%(module)s", "function": "%(funcName)s", "line": %(lineno)d, "message": "%(message)s"}'
    datefmt: "%Y-%m-%d %H:%M:%S"
  
  simple:
    format: "%(levelname)s - %(message)s"

handlers:
  console:
    class: logging.StreamHandler
    level: INFO
    formatter: standard
    stream: ext://sys.stdout
  
  file:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: detailed
    filename: logs/trading_bot.log
    maxBytes: 10485760  # 10MB
    backupCount: 5
    encoding: utf8
  
  error_file:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: detailed
    filename: logs/error.log
    maxBytes: 10485760  # 10MB
    backupCount: 3
    encoding: utf8
  
  trading_file:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: json
    filename: logs/trading.log
    maxBytes: 52428800  # 50MB
    backupCount: 10
    encoding: utf8
  
  strategy_file:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: detailed
    filename: logs/strategy.log
    maxBytes: 10485760  # 10MB
    backupCount: 5
    encoding: utf8
  
  risk_file:
    class: logging.handlers.RotatingFileHandler
    level: WARNING
    formatter: json
    filename: logs/risk.log
    maxBytes: 10485760  # 10MB
    backupCount: 5
    encoding: utf8
  
  market_data_file:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: standard
    filename: logs/market_data.log
    maxBytes: 20971520  # 20MB
    backupCount: 3
    encoding: utf8
  
  # Email handler for critical errors (configure SMTP settings)
  email:
    class: logging.handlers.SMTPHandler
    level: CRITICAL
    formatter: detailed
    mailhost: localhost
    fromaddr: tradingbot@localhost
    toaddrs:
      - admin@localhost
    subject: "TradingBot Critical Error"
    # Uncomment and configure for production:
    # credentials: [username, password]
    # secure: []  # Use TLS
  
  # Syslog handler for production environments
  syslog:
    class: logging.handlers.SysLogHandler
    level: INFO
    formatter: json
    address: /dev/log
    facility: user

loggers:
  # Root logger
  '':
    level: INFO
    handlers: [console, file, error_file]
    propagate: False
  
  # Application loggers
  tradingbot:
    level: DEBUG
    handlers: [console, file]
    propagate: False
  
  tradingbot.core:
    level: DEBUG
    handlers: [file, strategy_file]
    propagate: False
  
  tradingbot.core.strategy:
    level: DEBUG
    handlers: [strategy_file]
    propagate: False
  
  tradingbot.core.risk:
    level: INFO
    handlers: [file, risk_file]
    propagate: False
  
  tradingbot.data:
    level: INFO
    handlers: [market_data_file]
    propagate: False
  
  tradingbot.domain:
    level: INFO
    handlers: [trading_file]
    propagate: False
  
  tradingbot.services:
    level: INFO
    handlers: [file]
    propagate: False
  
  tradingbot.ui:
    level: INFO
    handlers: [console, file]
    propagate: False
  
  # Trading-specific loggers
  trading.orders:
    level: INFO
    handlers: [trading_file]
    propagate: False
    
  trading.positions:
    level: INFO
    handlers: [trading_file]
    propagate: False
    
  trading.portfolio:
    level: INFO
    handlers: [trading_file]
    propagate: False
  
  # Risk management logger
  risk.manager:
    level: WARNING
    handlers: [risk_file, console]
    propagate: False
  
  # Market data logger
  market.data:
    level: INFO
    handlers: [market_data_file]
    propagate: False
  
  # Strategy loggers
  strategy.mean_reversion:
    level: DEBUG
    handlers: [strategy_file]
    propagate: False
    
  strategy.momentum:
    level: DEBUG
    handlers: [strategy_file]
    propagate: False
    
  strategy.arbitrage:
    level: DEBUG
    handlers: [strategy_file]
    propagate: False
  
  # External library loggers (reduce noise)
  urllib3:
    level: WARNING
    handlers: [file]
    propagate: False
  
  requests:
    level: WARNING
    handlers: [file]
    propagate: False
  
  ccxt:
    level: INFO
    handlers: [market_data_file]
    propagate: False
  
  websockets:
    level: WARNING
    handlers: [file]
    propagate: False
  
  streamlit:
    level: INFO
    handlers: [console]
    propagate: False
  
  plotly:
    level: WARNING
    handlers: [file]
    propagate: False
  
  pandas:
    level: WARNING
    handlers: [file]
    propagate: False
  
  numpy:
    level: WARNING
    handlers: [file]
    propagate: False

# Root logger configuration
root:
  level: INFO
  handlers: [console, file]

# Logging configuration for different environments
environments:
  development:
    root_level: DEBUG
    console_level: DEBUG
    file_level: DEBUG
    
  testing:
    root_level: WARNING
    console_level: WARNING
    file_level: INFO
    
  production:
    root_level: INFO
    console_level: WARNING
    file_level: INFO
    enable_email: true
    enable_syslog: true

# Custom filters (can be implemented in Python)
filters:
  # Filter to exclude certain log messages
  exclude_patterns:
    '()': tradingbot.utils.log_filters.ExcludePatternFilter
    patterns:
      - "Connection established"
      - "Heartbeat received"
      - "Rate limit check"
  
  # Filter to include only trading-related messages
  trading_only:
    '()': tradingbot.utils.log_filters.TradingOnlyFilter
  
  # Filter to mask sensitive information
  sensitive_data:
    '()': tradingbot.utils.log_filters.SensitiveDataFilter
    mask_patterns:
      - "api_key"
      - "api_secret"
      - "password"
      - "token"

# Performance monitoring
performance:
  # Log slow operations (in seconds)
  slow_operation_threshold: 1.0
  
  # Log memory usage periodically
  memory_logging_interval: 300  # 5 minutes
  
  # Log performance metrics
  metrics_logging: true

# Security logging
security:
  # Log authentication attempts
  log_auth_attempts: true
  
  # Log API key usage
  log_api_usage: true
  
  # Log failed operations
  log_failures: true
  
  # Mask sensitive data in logs
  mask_sensitive: true

# Log retention policy
retention:
  # Keep logs for 30 days by default
  default_days: 30
  
  # Keep trading logs for 90 days
  trading_days: 90
  
  # Keep error logs for 60 days
  error_days: 60
  
  # Keep strategy logs for 14 days
  strategy_days: 14

# Alerting configuration
alerting:
  # Email alerts for critical errors
  critical_email: true
  
  # Slack/Discord webhook for important events
  webhook_url: ${ALERT_WEBHOOK_URL}
  
  # Alert frequency limits (prevent spam)
  rate_limit:
    max_alerts_per_hour: 10
    max_critical_per_hour: 3