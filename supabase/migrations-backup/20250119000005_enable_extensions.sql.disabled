-- Enable powerful Supabase extensions for Universal AI Tools

-- GraphQL API generation
CREATE EXTENSION IF NOT EXISTS pg_graphql;

-- Cron jobs for scheduled tasks
CREATE EXTENSION IF NOT EXISTS pg_cron;

-- HTTP client for webhooks
CREATE EXTENSION IF NOT EXISTS pg_net;

-- Database activity monitoring
CREATE EXTENSION IF NOT EXISTS pg_stat_statements;

-- Foreign data wrappers
CREATE EXTENSION IF NOT EXISTS wrappers;

-- Enable Vault for secrets management
CREATE EXTENSION IF NOT EXISTS vault;

-- Enable additional useful extensions
CREATE EXTENSION IF NOT EXISTS http;  -- HTTP client
CREATE EXTENSION IF NOT EXISTS pgjwt; -- JWT generation
CREATE EXTENSION IF NOT EXISTS pgsodium; -- Encryption

-- Create schema for LLM users
CREATE SCHEMA IF NOT EXISTS llm_users;

-- Create table for LLM model registration
CREATE TABLE IF NOT EXISTS llm_users.models (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    model_name TEXT UNIQUE NOT NULL,
    provider TEXT NOT NULL,
    user_id UUID REFERENCES auth.users(id),
    api_key_id UUID, -- Reference to vault secret
    capabilities JSONB DEFAULT '{}',
    rate_limits JSONB DEFAULT '{"requests_per_minute": 60, "tokens_per_minute": 40000}',
    usage_stats JSONB DEFAULT '{"total_requests": 0, "total_tokens": 0}',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create table for storing API keys in vault
CREATE TABLE IF NOT EXISTS vault.llm_secrets (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT UNIQUE NOT NULL,
    secret TEXT NOT NULL,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create webhook configurations table
CREATE TABLE IF NOT EXISTS public.webhook_configs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    url TEXT NOT NULL,
    events TEXT[] NOT NULL,
    headers JSONB DEFAULT '{}',
    active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create scheduled jobs table
CREATE TABLE IF NOT EXISTS public.scheduled_jobs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    schedule TEXT NOT NULL, -- Cron expression
    command TEXT NOT NULL,
    active BOOLEAN DEFAULT true,
    last_run TIMESTAMPTZ,
    next_run TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create analytics events table
CREATE TABLE IF NOT EXISTS public.analytics_events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    event_type TEXT NOT NULL,
    user_id UUID REFERENCES auth.users(id),
    llm_model_id UUID REFERENCES llm_users.models(id),
    metadata JSONB DEFAULT '{}',
    timestamp TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX idx_analytics_events_timestamp ON public.analytics_events(timestamp);
CREATE INDEX idx_analytics_events_event_type ON public.analytics_events(event_type);
CREATE INDEX idx_llm_models_provider ON llm_users.models(provider);

-- Enable Row Level Security
ALTER TABLE llm_users.models ENABLE ROW LEVEL SECURITY;
ALTER TABLE vault.llm_secrets ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.webhook_configs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.scheduled_jobs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.analytics_events ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
-- Only authenticated users can view LLM models
CREATE POLICY "Authenticated users can view LLM models" 
    ON llm_users.models FOR SELECT 
    TO authenticated 
    USING (true);

-- Only service role can manage LLM models
CREATE POLICY "Service role can manage LLM models" 
    ON llm_users.models FOR ALL 
    TO service_role 
    USING (true);

-- Analytics events are write-only for authenticated users
CREATE POLICY "Authenticated users can write analytics" 
    ON public.analytics_events FOR INSERT 
    TO authenticated 
    WITH CHECK (true);

-- Only service role can read analytics
CREATE POLICY "Service role can read analytics" 
    ON public.analytics_events FOR SELECT 
    TO service_role 
    USING (true);

-- Grant necessary permissions
GRANT USAGE ON SCHEMA llm_users TO authenticated, service_role;
GRANT ALL ON ALL TABLES IN SCHEMA llm_users TO service_role;
GRANT SELECT ON ALL TABLES IN SCHEMA llm_users TO authenticated;

-- Create function to update timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_llm_models_updated_at BEFORE UPDATE ON llm_users.models
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_webhook_configs_updated_at BEFORE UPDATE ON public.webhook_configs
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_scheduled_jobs_updated_at BEFORE UPDATE ON public.scheduled_jobs
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();