# Docker Compose for macOS with Metal GPU Support
version: '3.8'

services:
  # Main API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    platform: linux/amd64 # For compatibility on Apple Silicon
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - OLLAMA_HOST=${OLLAMA_HOST:-http://host.docker.internal:11434} # Use host Ollama
      - REDIS_URL=redis://redis:6379
      - SEARXNG_URL=http://searxng:8080
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - model_cache:/app/models
    depends_on:
      - redis
      - searxng
    restart: unless-stopped
    networks:
      - ai-tools-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    platform: linux/amd64
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ai-tools-network
    command: redis-server --appendonly yes

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    platform: linux/amd64
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-aitools}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aitools}
      - POSTGRES_DB=${POSTGRES_DB:-aitools}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - ai-tools-network

  # SearXNG Privacy-focused Search
  searxng:
    image: searxng/searxng:latest
    platform: linux/amd64
    ports:
      - '8888:8080'
    volumes:
      - ./searxng:/etc/searxng
    environment:
      - SEARXNG_BASE_URL=http://localhost:8888/
      - SEARXNG_SECRET_KEY=${SEARXNG_SECRET_KEY:-ultrasecretkey}
    restart: unless-stopped
    networks:
      - ai-tools-network

  # Dashboard UI
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    platform: linux/amd64
    ports:
      - '8080:80'
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - ai-tools-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80']
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    platform: linux/amd64
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - ai-tools-network

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    platform: linux/amd64
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ai-tools-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    platform: linux/amd64
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - dashboard
      - grafana
    restart: unless-stopped
    networks:
      - ai-tools-network

# Networks
networks:
  ai-tools-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  model_cache:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  ollama_models:
