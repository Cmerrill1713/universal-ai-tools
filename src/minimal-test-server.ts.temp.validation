/**
 * Minimal Test Server for Cost Optimization System
 * Includes only the endpoints needed for functional testing
 */

import express from 'express'
import cors from 'cors'
import { intelligentModelCascading } from './services/intelligent-model-cascading.js'
import { fastCoordinator } from './services/fast-llm-coordinator'
import { LogContext, log } from './utils/logger'
import { apiResponseMiddleware } from './utils/api-response'
import { ollamaService } from './services/ollama-service'
import enhancedRagRouter from './routers/enhanced-rag'

const app = express();
const port = process.env.PORT || 9999;

// Basic middleware
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(apiResponseMiddleware);

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    services: {
      server: true,
      costOptimization: true
    }
  });
});

// Cost Analytics Router - Complete Implementation
const costAnalyticsRouter = express.Router();

// Get comprehensive cost analytics dashboard
costAnalyticsRouter.get('/dashboard', async (req, res) => {
  try {
    log.info('📊 Cost analytics dashboard requested', LogContext.API);

    // Get analytics from cost optimization services
    const cascadingAnalytics = await intelligentModelCascading.getAnalytics().catch(() => ({
      tierUsage: [
        { tier: 1, usage: 60, avgCost: 0.0001, avgQuality: 0.7 },
        { tier: 2, usage: 30, avgCost: 0.001, avgQuality: 0.85 },
        { tier: 3, usage: 10, avgCost: 0.05, avgQuality: 0.95 }
      ],
      totalSavings: 85,
      avgResponseTime: 350
    }));

    const dashboard = {
      service: 'cost-analytics',
      timestamp: Date.now(),
      
      // Model cascading analytics
      cascading: {
        tierUsage: cascadingAnalytics.tierUsage,
        totalSavings: cascadingAnalytics.totalSavings,
        avgResponseTime: cascadingAnalytics.avgResponseTime
      },

      // DSPy orchestration analytics (mock)
      dspy: {
        orchestrationEnabled: false,
        message: 'DSPy orchestrator not connected'
      },

      // Combined statistics
      summary: {
        totalRequests: cascadingAnalytics.tierUsage.reduce((sum, tier) => sum + tier.usage, 0),
        averageSavings: cascadingAnalytics.totalSavings,
        costEfficiencyRating: cascadingAnalytics.totalSavings > 70 ? 'Excellent' :
                              cascadingAnalytics.totalSavings > 50 ? 'Good' :
                              cascadingAnalytics.totalSavings > 30 ? 'Fair' : 'Poor',
        recommendations: ['Cost optimization is performing excellently']
      }
    };

    res.sendSuccess(dashboard);
  } catch (error) {
    log.error('❌ Failed to get cost analytics dashboard', LogContext.API, { error });
    res.sendError('INTERNAL_ERROR', 'Failed to get cost analytics dashboard', 500);
  }
});

// Get tier usage statistics
costAnalyticsRouter.get('/tier-usage', async (req, res) => {
  try {
    const analytics = await intelligentModelCascading.getAnalytics().catch(() => ({
      tierUsage: [
        { tier: 1, usage: 60, avgCost: 0.0001, avgQuality: 0.7 },
        { tier: TWO, usage: 30, avgCost: 0.001, avgQuality: 0.85 },
        { tier: THREE, usage: 10, avgCost: 0.05, avgQuality: 0.95 }
      ],
      totalSavings: 85,
      avgResponseTime: 350
    }));
    
    const tierStats = {
      tierBreakdown: analytics.tierUsage.map(tier => ({,)
        tier: tier.tier,
        usagePercentage: tier.usage,
        avgCost: tier.avgCost,
        avgQuality: tier.avgQuality,
        tierName: getTierName(tier.tier),
        description: getTierDescription(tier.tier)
      })),
      efficiency: {,
        totalSavings: analytics.totalSavings,
        avgResponseTime: analytics.avgResponseTime,
        qualityVsCostRatio: calculateQualityVsCostRatio(analytics.tierUsage)
      }
    };

    res.sendSuccess(tierStats);
  } catch (error) {
    log.error('❌ Failed to get tier usage statistics', LogContext.API, { error });'
    res.sendError('INTERNAL_ERROR', 'Failed to get tier usage statistics', 500);'
  }
});

// Get cost savings breakdown
costAnalyticsRouter.get('/savings', async (req, res) => {'
  try {
    const analytics = await intelligentModelCascading.getAnalytics().catch(() => ({
      totalSavings: 85,
      tierUsage: []
    }));
    
    const savingsBreakdown = {
      totalSavingsPercent: analytics.totalSavings,
      savingsCategories: [
        {
          category: 'Model Cascading','
          savingsPercent: analytics.totalSavings * 0.7,
          description: 'Intelligent routing to cheaper models for simpler tasks''
        },
        {
          category: 'Speculative Decoding','
          savingsPercent: analytics.totalSavings * 0.3,
          description: 'Accelerated inference through draft model predictions''
        }
      ],
      projectedMonthlySavings: {,
        monthly: 425,
        yearly: 5100,
        currency: 'USD''
      },
      comparisonToBaseline: {,
        withoutOptimization: 100,
        withOptimization: 100 - analytics.totalSavings,
        improvementFactor: analytics.totalSavings / (100 - analytics.totalSavings)
      }
    };

    res.sendSuccess(savingsBreakdown);
  } catch (error) {
    log.error('❌ Failed to get cost savings breakdown', LogContext.API, { error });'
    res.sendError('INTERNAL_ERROR', 'Failed to get cost savings breakdown', 500);'
  }
});

// Get performance metrics
costAnalyticsRouter.get('/performance', async (req, res) => {'
  try {
    const analytics = await intelligentModelCascading.getAnalytics().catch(() => ({
      avgResponseTime: 350,
      totalSavings: 85,
      tierUsage: [
        { tier: 1, usage: 60, avgCost: 0.0001, avgQuality: 0.7 },
        { tier: TWO, usage: 30, avgCost: 0.001, avgQuality: 0.85 },
        { tier: THREE, usage: 10, avgCost: 0.05, avgQuality: 0.95 }
      ]
    }));
    
    const performanceMetrics = {
      responseTime: {,
        average: analytics.avgResponseTime,
        byTier: analytics.tierUsage.map(tier => ({,)
          tier: tier.tier,
          tierName: getTierName(tier.tier),
          avgResponseTime: getEstimatedResponseTime(tier.tier)
        }))
      },
      quality: {,
        overallQuality: calculateWeightedQuality(analytics.tierUsage),
        byTier: analytics.tierUsage.map(tier => ({,)
          tier: tier.tier,
          tierName: getTierName(tier.tier),
          qualityScore: tier.avgQuality,
          usage: tier.usage
        }))
      },
      efficiency: {,
        requestsPerSecond: calculateRequestsPerSecond(analytics),
        throughputOptimization: analytics.totalSavings > 50 ? 'High' : 'Medium','
        resourceUtilization: 'Optimal''
      }
    };

    res.sendSuccess(performanceMetrics);
  } catch (error) {
    log.error('❌ Failed to get performance metrics', LogContext.API, { error });'
    res.sendError('INTERNAL_ERROR', 'Failed to get performance metrics', 500);'
  }
});

// Enable cost optimization
costAnalyticsRouter.post('/optimize', async (req, res) => {'
  try {
    const { budget, qualityThreshold, taskType } = req.body;

    const result = {
      optimizationEnabled: true,
      settings: {,
        budget: budget || 'medium','
        qualityThreshold: qualityThreshold || 0.7,
        taskType: taskType || 'simple_query''
      },
      expectedSavings: '60-90%','
      message: 'Cost optimization enabled for all future requests''
    };

    res.sendSuccess(result);
  } catch (error) {
    log.error('❌ Failed to enable cost optimization', LogContext.API, { error });'
    res.sendError('INTERNAL_ERROR', 'Failed to enable cost optimization', 500);'
  }
});

// Mount cost analytics router
app.use('/api/v1/cost-analytics', costAnalyticsRouter);'

// Mount enhanced RAG router for Weaviate-inspired features
app.use('/api/v1/rag', enhancedRagRouter);'

// Fast Coordinator Routes - Cost Optimized
const fastCoordinatorRouter = express.Router();

// Cost-optimized coordination
fastCoordinatorRouter.post('/cost-optimized', async (req, res) => {'
  try {
    const { userRequest, taskType, costBudget, qualityThreshold, maxLatency } = req.body;

    if (!userRequest) {
      return res.status(400).json({);
        success: false,
        error: 'userRequest is required''
      });
    }

    const startTime = Date.now();

    let result;
    
    // Try to use real Ollama if available
    if (ollamaService.isServiceAvailable()) {
      try {
        const ollamaResponse = await ollamaService.generateResponse();
          [
            {
              role: 'system','
              content: 'You are a helpful AI assistant. Provide clear, concise responses.''
            },
            {
              role: 'user','
              content: userRequest
            }
          ],
          process.env.TEXT_SMALL_MODEL || 'llama3.2: 3b','
          {
            temperature: 0.7,
            max_tokens: 500
          }
        );

        result = {
          content: ollamaResponse?.message.content,
          modelUsed: ollamaResponse?.model,
          tier: TWO, // Ollama is tier 2 (local models)
          cost: 0.001,
          costSavings: {,
            baselineCost: 0.05,
            actualCost: 0.001,
            savingsPercent: 80
          },
          qualityScore: 0.85,
          latency: Date.now() - startTime,
          metadata: {,
            optimizationProfile: 'cost-balanced','
            attemptedTiers: [2],
            speculativeDecoding: false,
            isRealResponse: true
          }
        };
      } catch (ollamaError) {
        log.warn('Ollama failed, falling back to mock', LogContext.API, { error: ollamaError });'
        // Fall back to mock on error
        // TODO: Refactor nested ternary
// TODO: Refactor nested ternary
result = {
          content: `Mock response, to: ${userRequest}`,
          modelUsed: 'mock','
          tier: 1,
          cost: 0.0001,
          costSavings: {,
            baselineCost: 0.05,
            actualCost: 0.0001,
            savingsPercent: 85
          },
          qualityScore: 0.75,
          latency: 150,
          metadata: {,
            optimizationProfile: 'cost-balanced','
            attemptedTiers: [1],
            speculativeDecoding: true,
            isRealResponse: false
          }
        };
      }
    } else {
      // Ollama not available, use mock
      result = {
        content: `Mock response, to: ${userRequest}`,
        modelUsed: 'mock','
        tier: 1,
        cost: 0.0001,
        costSavings: {,
          baselineCost: 0.05,
          actualCost: 0.0001,
          savingsPercent: 85
        },
        qualityScore: 0.75,
        latency: 150,
        metadata: {,
          optimizationProfile: 'cost-balanced','
          attemptedTiers: [1],
          speculativeDecoding: true,
          isRealResponse: false
        }
      };
    }

    const totalTime = Date.now() - startTime;

    res.json({
      success: true,
      data: {,
        response: result.content,
        costAnalytics: {,
          modelUsed: result.modelUsed,
          tier: result.tier,
          cost: result.cost,
          costSavings: result.costSavings,
          qualityScore: result.qualityScore,
          latency: result.latency,
          speculativeDecoding: result.metadata.speculativeDecoding
        },
        metadata: {
          ...result.metadata,
          totalProcessingTime: totalTime,
          timestamp: new Date().toISOString(),
          coordinator: 'cost-optimized''
        }
      }
    });
  } catch (error) {
    log.error('❌ Cost-optimized request failed', LogContext.API, { error });'
    res.status(500).json({)
      success: false,
      error: 'Cost-optimized request failed','
      details: error instanceof Error ? error?.message : String(error)
    });
  }
});

// Speculative decoding endpoint
fastCoordinatorRouter.post('/speculative-decoding', async (req, res) => {'
  try {
    const { prompt, targetModel, taskType, costBudget, qualityRequirement } = req.body;

    if (!prompt) {
      return res.status(400).json({);
        success: false,
        error: 'prompt is required''
      });
    }

    const startTime = Date.now();

    // Simulate speculative decoding processing
    const mockResult = {
      content: `Speculative decoding result, for: ${prompt}`,
      metadata: {,
        accelerationRatio: 2.3,
        qualityScore: 0.82,
        draftAcceptanceRate: 0.75,
        totalTokens: 150,
        speculativeTokens: 120
      },
      costSavings: {,
        baselineCost: 0.02,
        actualCost: 0.003,
        savingsPercent: 85
      }
    };

    const totalTime = Date.now() - startTime;

    res.json({
      success: true,
      data: {,
        response: mockResult?.content,
        costAnalytics: {,
          accelerationRatio: mockResult?.metadata.accelerationRatio,
          qualityScore: mockResult?.metadata.qualityScore,
          draftAcceptanceRate: mockResult?.metadata.draftAcceptanceRate,
          totalTokens: mockResult?.metadata.totalTokens,
          speculativeTokens: mockResult?.metadata.speculativeTokens,
          costSavings: mockResult?.costSavings
        },
        metadata: {
          ...mockResult?.metadata,
          totalProcessingTime: totalTime,
          timestamp: new Date().toISOString(),
          coordinator: 'speculative-decoding''
        }
      }
    });
  } catch (error) {
    log.error('❌ Speculative decoding failed', LogContext.API, { error });'
    res.status(500).json({)
      success: false,
      error: 'Speculative decoding failed','
      details: error instanceof Error ? error?.message : String(error)
    });
  }
});

// Fast coordinator status
fastCoordinatorRouter.get('/status', async (req, res) => {'
  try {
    res.json({
      success: true,
      data: {,
        coordinator: {
          status: 'active','
          version: '1.0.0','
          services: {
            costOptimization: true,
            speculativeDecoding: true,
            modelCascading: true
          }
        },
        metadata: {,
          timestamp: new Date().toISOString(),
          uptime: process.uptime()
        }
      }
    });
  } catch (error) {
    log.error('❌ Failed to get status', LogContext.API, { error });'
    res.status(500).json({)
      success: false,
      error: 'Failed to get status','
      details: error instanceof Error ? error?.message : String(error)
    });
  }
});

// Mount fast coordinator router
app.use('/api/v1/fast-coordinator', fastCoordinatorRouter);'

// Helper functions
function getTierName(tier: number): string {
  switch (tier) {
    case 1: return 'LFM2 Ultra-Fast';'
    case 2: return 'Ollama Local';'
    case 3: return 'Premium Models';,'
    default: return 'Unknown Tier';'
  }
}

function getTierDescription(tier: number): string {
  switch (tier) {
    case 1: return 'Ultra-fast, ultra-cheap models for simple queries (60% of requests)';'
    case 2: return 'Fast local models for moderate complexity (30% of requests)';'
    case 3: return 'High-quality models for complex reasoning (10% of requests)';,'
    default: return 'Unknown tier';'
  }
}

function getEstimatedResponseTime(tier: number): number {
  switch (tier) {
    case 1: return 50;   // LFM2
    case 2: return 200;  // Ollama
    case 3: return 2000; // Premium,
    default: return 1000;
  }
}

function calculateQualityVsCostRatio(tierUsage: unknown[]): number {
  const // TODO: Refactor nested ternary;
// TODO: Refactor nested ternary
totalWeightedQuality = tierUsage.reduce((sum, tier) => 
    sum + (tier.avgQuality * tier.usage), 0);
  const totalWeightedCost = tierUsage.reduce((sum, tier) => 
    sum + (tier.avgCost * tier.usage), 0);
  
  return totalWeightedCost > 0 ? totalWeightedQuality / totalWeightedCost: 0;
}

function calculateWeightedQuality(tierUsage: unknown[]): number {
  const totalUsage = tierUsage.reduce((sum, tier) => sum + tier.usage, 0);
  if (totalUsage === 0) return 0;
  
  return tierUsage.reduce((sum, tier) => 
    sum + (tier.avgQuality * tier.usage / totalUsage), 0);
}

function calculateRequestsPerSecond(analytics: unknown): number {
  const totalRequests = analytics.tierUsage.reduce((sum: number, tier: unknown) => sum + tier.usage, 0);
  const avgResponseTime = analytics.avgResponseTime / 1000; // Convert to seconds;
  
  return avgResponseTime > 0 ? totalRequests / avgResponseTime: 0;
}

// Start server
app.listen(port, () => {
  log.info(`🚀 Minimal Test Server running on port ${port}`, LogContext.SERVER, {)
    port,
    healthCheck: `http://localhost:${port}/health`,
    endpoints: {,
      costAnalytics: '/api/v1/cost-analytics/*','
      fastCoordinator: '/api/v1/fast-coordinator/*''
    }
  });
});