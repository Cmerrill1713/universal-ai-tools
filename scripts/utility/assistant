#!/usr/bin/env python3
"""
Universal AI Assistant - Unified CLI
Integrates all systems: Python automation, Go API Gateway, Rust services
"""

import sys
import os
import subprocess
import json
from pathlib import Path

# Add current directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Import IntegratedAssistant with proper path handling
import importlib.util

def import_integrated_assistant():
    spec = importlib.util.spec_from_file_location("integrated_assistant", "integrated-assistant.py")
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module.IntegratedAssistant

IntegratedAssistant = import_integrated_assistant()

def check_services():
    """Check if required services are running"""
    services = {
        "Go API Gateway": ("http://localhost:8080/health", "8080"),
        "Rust AI Core": ("http://localhost:8083/health", "8083"),
        "Supabase": ("http://localhost:54321/rest/v1/", "54321"),
    }
    
    print("üîç Checking services...")
    all_running = True
    
    for name, (url, port) in services.items():
        try:
            result = subprocess.run(
                ["curl", "-s", "-o", "/dev/null", "-w", "%{http_code}", url],
                capture_output=True,
                text=True,
                timeout=2
            )
            if result.returncode == 0 and result.stdout in ["200", "204", "404"]:
                print(f"  ‚úÖ {name} is running on port {port}")
            else:
                print(f"  ‚ö†Ô∏è  {name} may not be running (port {port})")
                all_running = False
        except:
            print(f"  ‚ùå {name} is not accessible (port {port})")
            all_running = False
    
    return all_running

def start_services():
    """Offer to start missing services"""
    print("\nüöÄ Would you like to start the required services?")
    print("  1. Start all services")
    print("  2. Start Go API Gateway only")
    print("  3. Start Rust AI Core only")
    print("  4. Continue without starting")
    
    choice = input("\nChoice (1-4): ").strip()
    
    if choice == "1":
        print("\nüîß Starting all services...")
        # Start Go API Gateway
        subprocess.Popen(
            ["bash", "-c", "cd go-api-gateway && UAT_SERVER_PORT=8080 UAT_SECURITY_REQUIRE_AUTH=false go run cmd/main.go"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        # Start Rust AI Core (if exists)
        if Path("rust-services/ai-core/target/release/ai-core").exists():
            subprocess.Popen(
                ["./rust-services/ai-core/target/release/ai-core"],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
        print("‚úÖ Services started in background")
        
    elif choice == "2":
        print("\nüîß Starting Go API Gateway...")
        subprocess.Popen(
            ["bash", "-c", "cd go-api-gateway && UAT_SERVER_PORT=8080 UAT_SECURITY_REQUIRE_AUTH=false go run cmd/main.go"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        print("‚úÖ Go API Gateway started")
        
    elif choice == "3":
        print("\nüîß Starting Rust AI Core...")
        if Path("rust-services/ai-core/target/release/ai-core").exists():
            subprocess.Popen(
                ["./rust-services/ai-core/target/release/ai-core"],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            print("‚úÖ Rust AI Core started")
        else:
            print("‚ùå Rust AI Core not built. Run: cd rust-services/ai-core && cargo build --release")

def print_help():
    """Print help information"""
    print("""
Universal AI Assistant - The Ultimate Autonomous Agent

USAGE:
    ./assistant <command>                 Execute a command directly
    ./assistant                           Interactive mode
    ./assistant stats                     Show learning statistics
    ./assistant workflow create           Create a reusable workflow
    ./assistant workflow run <name>       Run a saved workflow
    ./assistant help                      Show this help

CAPABILITIES:
    üìÖ Calendar & Scheduling
       "Add yard work to calendar at 4pm today"
       "Schedule meeting tomorrow at 2pm"
    
    ‚úÖ Tasks & Reminders
       "Remind me to buy groceries"
       "Add task: finish project proposal"
    
    üóÑÔ∏è Database Operations
       "Optimize supabase database"
       "Show database statistics"
    
    üöÄ Project Creation & Deployment
       "Create a React todo app"
       "Build and deploy a website"
       "Create Python data analysis script"
    
    üì± App Control
       "Open Safari"
       "Launch VS Code"
    
    ü§ñ AI Queries
       "How do I use React hooks?"
       "Explain quantum computing"

LEARNING:
    The assistant learns from every interaction:
    ‚Ä¢ Successful patterns are remembered
    ‚Ä¢ Workflows can be saved and reused
    ‚Ä¢ Preferences are automatically detected
    ‚Ä¢ Performance improves over time

EXAMPLES:
    ./assistant "optimize database"
    ./assistant "create React app for task management"
    ./assistant "add meeting to calendar tomorrow 3pm"
    ./assistant workflow create
    ./assistant stats
""")

def main():
    """Main entry point"""
    # Check if help requested
    if len(sys.argv) > 1 and sys.argv[1] in ["help", "-h", "--help"]:
        print_help()
        return
    
    # ASCII art banner
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     ü§ñ UNIVERSAL AI ASSISTANT - AUTONOMOUS AGENT ü§ñ         ‚ïë
‚ïë                                                              ‚ïë
‚ïë     Integrating: Python ‚Ä¢ Go ‚Ä¢ Rust ‚Ä¢ Supabase              ‚ïë
‚ïë     Learning & Growing with Every Interaction               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # Check services
    if not check_services():
        start_services()
        print("\nWaiting for services to start...")
        import time
        time.sleep(3)
    
    # Initialize the integrated assistant
    try:
        assistant = IntegratedAssistant()
        print("‚úÖ Assistant initialized with learning capabilities\n")
    except Exception as e:
        print(f"‚ùå Failed to initialize assistant: {e}")
        print("\nTrying basic mode...")
        # Fallback to basic execution
        if len(sys.argv) > 1:
            command = ' '.join(sys.argv[1:])
            subprocess.run(["./ask.sh", command])
        return
    
    # Handle command line arguments
    if len(sys.argv) > 1:
        command = ' '.join(sys.argv[1:])
        
        # Special commands
        if command.lower() == "stats":
            stats = assistant.get_statistics()
            print("\nüìä Assistant Intelligence Report")
            print("=" * 50)
            print(f"Total Commands Processed: {stats['total_commands']}")
            print(f"Learned Patterns: {stats['learned_patterns']}")
            print(f"Success Rate: {stats['success_rate']*100:.1f}%")
            print(f"Saved Workflows: {stats['saved_workflows']}")
            
            if stats['categories']:
                print("\nüìÇ Command Categories:")
                for category, count in stats['categories'].items():
                    print(f"  ‚Ä¢ {category}: {count}")
            
            if stats.get('top_patterns'):
                print("\nüèÜ Top Performing Patterns:")
                for pattern, rate in stats['top_patterns'][:5]:
                    print(f"  ‚Ä¢ {pattern[:40]}... ({rate*100:.0f}% success)")
        
        elif command.lower().startswith("workflow create"):
            print("\nüìù Creating New Workflow")
            print("-" * 30)
            name = input("Workflow name: ")
            description = input("Description (optional): ")
            
            steps = []
            print("\nEnter workflow steps (empty line to finish):")
            while True:
                step = input(f"Step {len(steps)+1}: ")
                if not step:
                    break
                steps.append(step)
            
            if steps:
                result = assistant.create_workflow(name, steps)
                print(f"\n‚úÖ {result['message']}")
            else:
                print("\n‚ùå No steps provided")
        
        elif command.lower().startswith("workflow run"):
            parts = command.split(maxsplit=2)
            if len(parts) > 2:
                workflow_name = parts[2]
                print(f"\nüîÑ Running workflow: {workflow_name}")
                result = assistant.execute_workflow(workflow_name)
                
                if result["success"]:
                    print(f"‚úÖ {result['message']}")
                else:
                    print(f"‚ùå {result['message']}")
            else:
                print("Usage: ./assistant workflow run <name>")
        
        else:
            # Regular command execution
            print(f"üéØ Processing: {command}\n")
            result = assistant.execute_command(command)
            
            if result["success"]:
                print(f"\n‚úÖ Success!")
                if result.get("message"):
                    print(result["message"])
            else:
                print(f"\n‚ùå Failed!")
                if result.get("message"):
                    print(result["message"])
                if result.get("error"):
                    print(f"Error: {result['error']}")
    
    else:
        # Interactive mode
        print("üí° Tip: Type 'help' for commands, 'stats' for analytics, 'exit' to quit\n")
        
        while True:
            try:
                command = input("üéØ What can I do for you? ").strip()
                
                if not command:
                    continue
                
                if command.lower() in ['exit', 'quit', 'bye']:
                    # Save learning data
                    assistant.save_learning_data()
                    
                    # Show final stats
                    stats = assistant.get_statistics()
                    print("\nüìä Session Summary:")
                    print(f"  ‚Ä¢ Commands processed: {stats['total_commands']}")
                    print(f"  ‚Ä¢ Success rate: {stats['success_rate']*100:.1f}%")
                    print(f"  ‚Ä¢ Patterns learned: {stats['learned_patterns']}")
                    print("\nüëã Goodbye! I'm getting smarter every day!")
                    break
                
                elif command.lower() == 'help':
                    print_help()
                
                elif command.lower() == 'stats':
                    stats = assistant.get_statistics()
                    print("\nüìä Current Intelligence Level")
                    print("=" * 40)
                    print(f"Commands Processed: {stats['total_commands']}")
                    print(f"Learned Patterns: {stats['learned_patterns']}")
                    print(f"Success Rate: {stats['success_rate']*100:.1f}%")
                    print(f"Saved Workflows: {stats['saved_workflows']}")
                    
                    if stats['categories']:
                        print("\nüìÇ Expertise Areas:")
                        for category, count in sorted(stats['categories'].items(), key=lambda x: x[1], reverse=True):
                            bar = "‚ñà" * min(20, count)
                            print(f"  {category:12} {bar} {count}")
                
                elif command.lower().startswith("workflow"):
                    if "create" in command.lower():
                        print("\nüìù Creating New Workflow")
                        name = input("Name: ")
                        steps = []
                        print("Enter steps (empty line to finish):")
                        while True:
                            step = input(f"Step {len(steps)+1}: ")
                            if not step:
                                break
                            steps.append(step)
                        
                        if steps:
                            result = assistant.create_workflow(name, steps)
                            print(f"‚úÖ {result['message']}")
                    
                    elif "run" in command.lower():
                        parts = command.split()
                        if len(parts) > 2:
                            workflow_name = ' '.join(parts[2:])
                            result = assistant.execute_workflow(workflow_name)
                            if result["success"]:
                                print(f"‚úÖ {result['message']}")
                            else:
                                print(f"‚ùå {result['message']}")
                        else:
                            print("Usage: workflow run <name>")
                
                else:
                    # Execute command
                    print(f"\nüîÑ Processing...")
                    result = assistant.execute_command(command)
                    
                    if result["success"]:
                        print(f"‚úÖ {result.get('message', 'Success!')}")
                    else:
                        print(f"‚ùå {result.get('message', 'Failed')}")
                        if result.get("error"):
                            print(f"   Error: {result['error']}")
                
                print()  # Empty line for readability
                
            except KeyboardInterrupt:
                print("\n\nüëã Interrupted. Goodbye!")
                break
            except Exception as e:
                print(f"\n‚ùå Error: {e}")
                print("   Try again or type 'help' for assistance\n")

if __name__ == "__main__":
    main()