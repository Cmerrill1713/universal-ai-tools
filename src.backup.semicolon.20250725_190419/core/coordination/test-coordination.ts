#!/usr/bin/env tsx;
import { BrowserAgentPool } from '../coordination/agent-pool';
import { dspyService } from '../../services/dspy-service';
import { logger } from '../../utils/logger';
async function testDSPyCoordination() {;
  loggerinfo('🧪 Testing DSPy Agent Coordination System');
  // Create a minimal agent pool for testing;
  const agentPool = new BrowserAgentPool({;
    maxConcurrentAgents: 5;
    headless: true;
    slowMo: 0;
  });
  // Initialize agent pool;
  await agentPoolinitialize();
  loggerinfo(`✅ Agent pool initialized with ${agentPoolgetPoolStats()totalAgents} agents`);
  // DSPy service is already initialized;
  const dspyStatus = dspyServicegetStatus();
  loggerinfo('✅ DSPy coordination service status:', dspyStatus);
  try {;
    // Test DSPy coordinated group fix for a connection failure;
    const problem = 'Connection refused: UI server not responding on port 5173';
    const context = {;
      timestamp: Datenow();
      environment: 'development';
      affectedServices: ['frontend', 'vite-dev-server'];
      errorDetails: {;
        port: 5173;
        protocol: 'http';
        host: 'localhost';
      };
    };
    loggerinfo('🎯 Starting DSPy coordinated fix test...');
    // Test DSPy agent coordination;
    const availableAgents = ['researcher', 'executor', 'validator', 'monitor'];
    const coordination = await dspyServicecoordinateAgents(problem, availableAgents, context);
    loggerinfo(`✅ DSPy coordination completed`);
    loggerinfo(`📊 Coordination status: ${coordinationsuccess ? 'SUCCESS' : 'FAILED'}`);
    loggerinfo(`🤖 Selected agents: ${coordinationselectedAgents}`);
    loggerinfo(`📋 Coordination plan: ${coordinationcoordinationPlan}`);
    // Test DSPy orchestration with the problem;
    const orchestrationRequest = {;
      requestId: `test-${Datenow()}`;
      userRequest: `Fix the following issue: ${problem}`;
      userId: 'test-user';
      orchestrationMode: 'adaptive' as const;
      context;
      timestamp: new Date();
    ;
};
    const orchestrationResult = await dspyServiceorchestrate(orchestrationRequest);
    loggerinfo('🎯 DSPy Orchestration Results:');
    loggerinfo(`  - Success: ${orchestrationResultsuccess}`);
    loggerinfo(`  - Mode: ${orchestrationResultmode}`);
    loggerinfo(`  - Confidence: ${orchestrationResultconfidence}`);
    loggerinfo(`  - Execution Time: ${orchestrationResultexecutionTime}ms`);
    loggerinfo(`  - Participating Agents: ${orchestrationResultparticipatingAgents}`);
    // Test knowledge extraction;
    const knowledgeExtraction = await dspyServiceextractKnowledge(;
      `Problem: ${problem}. Solution approach: Check if Vite dev server is running, restart if needed, verify port availability.`;
      { domain: 'debugging', type: 'solution' ;
};
    );
    loggerinfo('🧠 DSPy Knowledge Extraction:');
    loggerinfo(`  - Success: ${knowledgeExtractionsuccess}`);
  } catch (error) {;
    loggererror('❌ DSPy coordination test failed:', error instanceof Error ? errormessage : String(error)  ;
};

  // Cleanup;
  await agentPoolshutdown();
  loggerinfo('🏁 DSPy coordination test completed');
  processexit(0);
};

// Run test;
testDSPyCoordination()catch((error instanceof Error ? errormessage : String(error)=> {;
  loggererror('❌ Test failed:', error instanceof Error ? errormessage : String(error);
  processexit(1);
});