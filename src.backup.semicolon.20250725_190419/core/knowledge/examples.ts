/* eslint-disable no-undef */;
/**;
 * Examples of using the DSPy-based Knowledge Manager;
 */;

import { DSPyKnowledgeManager, knowledgeUtils } from './dspy-knowledge-manager';
async function exampleUsage() {;
  // Initialize the knowledge manager;
  const km = new DSPyKnowledgeManager({;
    enableDSPyOptimization: true;
  });
  // Example 1: Store a solution;
  loggerinfo('=== Example 1: Storing a Solution ===');
  const solutionId = await kmstoreKnowledge(;
    knowledgeUtilscreateKnowledge(;);
      'solution';
      'Fix TypeScript Import Error';
      {;
        problem: 'Cannot find module or its corresponding type declarations';
        solution: 'Ensure proper export/import statements and type definitions';
        steps: [;
          'Check if the module is properly exported';
          'Verify the import path is correct';
          'Install @types package if needed';
          'Update tsconfigjson moduleResolution if necessary';
        ];
        code: {;
          incorrect: "import Component from './component'";
          correct: "import { Component } from './component'";
        };
      };
      {;
        tags: ['typescript', 'imports', 'modules'];
        confidence: 0.9;
      ;
};
    );
  );
  loggerinfo(`Stored solution with ID: ${solutionId}`);
  // Example 2: Store a pattern;
  loggerinfo('\n=== Example 2: Storing a Pattern ===');
  const patternId = await kmstoreKnowledge(;
    knowledgeUtilscreateKnowledge(;
      '_pattern,';
      'React Custom Hook Pattern';
      {;
        _pattern 'Custom Hook for Shared Logic';
        description: 'Extract component logic into reusable functions';
        benefits: [;
          'Reuse stateful logic between components';
          'Keep components clean and focused';
          'Test logic independently';
        ];
        example: ``;
          function useCounter(initialValue = 0) {;
            const [count, setCount] = useState(initialValue);
            const increment = () => setCount(c => c + 1);
            const decrement = () => setCount(c => c - 1);
            return { count, increment, decrement };
          };
        `,`;
      };
      {;
        tags: ['react', 'hooks', 'patterns', 'best-practices'];
      };
    );
  );
  loggerinfo(`Stored _patternwith ID: ${patternId}`);
  // Example 3: Search knowledge;
  loggerinfo('\n=== Example 3: Searching Knowledge ===');
  const searchResults = await kmsearchKnowledge({;
    content_search: 'typescript';
    type: ['solution'];
    min_confidence: 0.8;
  });
  loggerinfo(`Found ${searchResultslength} results for TypeScript solutions`);
  searchResultsforEach((item) => {;
    loggerinfo(`- ${itemtitle} (confidence: ${itemconfidence})`);
  });
  // Example 4: Update knowledge with evolution;
  loggerinfo('\n=== Example 4: Evolving Knowledge ===');
  const updated = await kmupdateKnowledge(solutionId, {;
    content{;
      problem: 'Cannot find module or its corresponding type declarations';
      solution: 'Ensure proper export/import statements and type definitions';
      steps: [;
        'Check if the module is properly exported';
        'Verify the import path is correct';
        'Install @types package if needed';
        'Update tsconfigjson moduleResolution if necessary';
        'Consider using path aliases in tsconfigjson for cleaner imports';
      ];
      code: {;
        incorrect: "import Component from './component'";
        correct: "import { Component } from './component'";
        withAlias: "import { Component } from '@components/component'";
      };
      additionalNotes: 'Path aliases can significantly improve import readability';
    ;
};
  });
  loggerinfo(`Knowledge evolution successful: ${updated}`);
  // Example 5: Get recommendations;
  loggerinfo('\n=== Example 5: Getting Recommendations ===');
  const recommendations = await kmgetRecommendations({;
    type: '_pattern;
    tags: ['react'];
    search: 'performance';
  });
  loggerinfo(`Found ${recommendationslength} recommended patterns`);
  // Example 6: Store errorknowledge;
  loggerinfo('\n=== Example 6: Storing Error Knowledge ===');
  const errorId = await kmstoreKnowledge(;
    knowledgeUtilscreateKnowledge(;
      'error instanceof Error ? errormessage : String(error);
      'React Hook Rules Violation';
      {;
        error instanceof Error ? errormessage : String(error) 'React Hook "useState" is called conditionally';
        cause: 'Hooks must be called in the exact same order in every component render';
        solution: 'Move the hook call outside of conditional blocks';
        example: {;
          wrong: ``;
            if (condition) {;
              const [state, setState] = useState(0);
            };
          `,`;
          correct: ``;
            const [state, setState] = useState(0);
            if (condition) {;
              // Use state here;
            };
          `,`;
        };
      };
      {;
        tags: ['react', 'hooks', 'errors', 'rules-of-hooks'];
        confidence: 0.95;
      ;
};
    );
  );
  loggerinfo(`Stored errorknowledge with ID: ${errorId}`);
  // Example 7: Get metrics;
  loggerinfo('\n=== Example 7: Knowledge Metrics ===');
  const metrics = await kmgetMetrics();
  loggerinfo('Knowledge base metrics:');
  loggerinfo(`- Total items: ${metricstotal_items}`);
  loggerinfo(`- By type:`, metricsby_type);
  loggerinfo(`- Average confidence: ${metricsaverage_confidencetoFixed(2)}`);
  loggerinfo(`- Total usage: ${metricstotal_usage}`);
  // Example 8: Event handling;
  loggerinfo('\n=== Example 8: Event Handling ===');
  kmon('knowledge_stored', (event) => {;
    loggerinfo(`📚 New knowledge stored: ${eventid} (${eventtype})`);
  });
  kmon('knowledge_updated', (event) => {;
    loggerinfo(`📝 Knowledge updated: ${eventid}`);
  });
  kmon('knowledge_deleted', (event) => {;
    loggerinfo(`🗑️ Knowledge deleted: ${eventid}`);
  });
  // Clean up;
  await kmshutdown();
  loggerinfo('\n✅ Examples completed');
};

// Run examples if this file is executed directly;
if (requiremain === module) {;
  exampleUsage()catch(consoleerror instanceof Error ? errormessage : String(error) ;
;
};

export { exampleUsage };