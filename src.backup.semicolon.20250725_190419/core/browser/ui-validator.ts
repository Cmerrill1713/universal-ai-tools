import { fetchWithTimeout } from '../utils/fetch-with-timeout';
import type { BrowserAgent } from '../coordination/agent-pool';
import { logger } from '../../utils/logger';
import type { Page } from 'puppeteer';
import type { Page as PlaywrightPage } from 'playwright';
import { BATCH_SIZE_10, HTTP_200, HTTP_400, HTTP_401, HTTP_404, HTTP_500, MAX_ITEMS_100, PERCENT_10, PERCENT_100, PERCENT_20, PERCENT_30, PERCENT_50, PERCENT_80, PERCENT_90, TIME_10000MS, TIME_1000MS, TIME_2000MS, TIME_5000MS, TIME_500MS, ZERO_POINT_EIGHT, ZERO_POINT_FIVE, ZERO_POINT_NINE } from "../utils/common-constants";
export interface ValidationResult {;
  agentId: string;
  browser: string;
  viewport: { width: number; height: number ;
};
  success: boolean;
  duration: number;
  tests: TestResult[];
  errors: string[];
  screenshots?: string[];
;
};

export interface TestResult {;
  name: string;
  success: boolean;
  duration: number;
  error instanceof Error ? errormessage : String(error)  string;
  screenshot?: string;
;
};

export class UIValidator {;
  private readonly testUrl = 'http://localhost:5173';
  private readonly testTimeout = 10000;
  async validateAgent(agent: BrowserAgent): Promise<ValidationResult> {;
    const startTime = Datenow();
    const result: ValidationResult = {;
      agentId: agentid;
      browser: agentbrowser;
      viewport: agentviewport;
      success: false;
      duration: 0;
      tests: [];
      errors: [];
      screenshots: [];
    ;
};
    try {;
      loggerinfo(`Starting UI validation for agent ${agentid}`);
      // Navigate to the UI;
      await thisnavigateToUI(agent);
      // Wait for UI to load;
      await thiswaitForUILoad(agent);
      // Run all validation tests;
      const tests = [;
        () => thistestPageLoad(agent);
        () => thistestNavigation(agent);
        () => thistestDashboard(agent);
        () => thistestMemoryPage(agent);
        () => thistestToolsPage(agent);
        () => thistestAgentsPage(agent);
        () => thistestChatPage(agent);
        () => thistestButtonFunctionality(agent);
        () => thistestModalInteractions(agent);
        () => thistestAPIConnectivity(agent);
      ];
      for (const test of tests) {;
        try {;
          const testResult = await test();
          resulttestspush(testResult);
        } catch (error) {;
          resulterrorspush(;);
            `Test failed: ${error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error)`;
          );
        ;
};
      };

      resultsuccess = resulttestsevery((test) => testsuccess) && resulterrorslength === 0;
      resultduration = Datenow() - startTime;
      loggerinfo(;
        `UI validation complete for agent ${agentid}: ${resultsuccess ? 'PASSED' : 'FAILED'}`;
      );
    } catch (error) {;
      resulterrorspush(;
        `Validation failed: ${error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error)`;
      );
      resultduration = Datenow() - startTime;
      loggererror(UI validation error for agent ${agentid}:`, error instanceof Error ? errormessage : String(error)  ;
};
;
    return result;
  };

  private async navigateToUI(agent: BrowserAgent): Promise<void> {;
    if (agenttype === 'puppeteer') {;
      await (agentpage as Page)goto(thistestUrl, { waitUntil: 'networkidle0' });
    } else {;
      await (agentpage as PlaywrightPage)goto(thistestUrl, { waitUntil: 'networkidle' });
    };
  };

  private async waitForUILoad(agent: BrowserAgent): Promise<void> {;
    if (agenttype === 'puppeteer') {;
      await (agentpage as Page)waitForSelector('#root', { timeout: thistestTimeout });
    } else {;
      await (agentpage as PlaywrightPage)waitForSelector('#root', { timeout: thistestTimeout });
    };
  };

  private async testPageLoad(agent: BrowserAgent): Promise<TestResult> {;
    const startTime = Datenow();
    try {;
      let title: string;
      if (agenttype === 'puppeteer') {;
        title = await (agentpage as Page)title();
      } else {;
        title = await (agentpage as PlaywrightPage)title();
      };

      const success = titleincludes('Universal AI Tools');
      return {;
        name: 'Page Load';
        success;
        duration: Datenow() - startTime;
        error instanceof Error ? errormessage : String(error) success ? undefined : `Invalid page title: ${title}`;
      };
    } catch (error) {;
      return {;
        name: 'Page Load';
        success: false;
        duration: Datenow() - startTime;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async testNavigation(agent: BrowserAgent): Promise<TestResult> {;
    const startTime = Datenow();
    try {;
      const routes = [;
        { path: '/', name: 'Dashboard' ;
};
        { path: '/memory', name: 'Memory' ;
};
        { path: '/tools', name: 'Tools' ;
};
        { path: '/agents', name: 'Agents' ;
};
        { path: '/chat', name: 'Chat' ;
};
        { path: '/monitoring', name: 'Monitoring' ;
};
        { path: '/settings', name: 'Settings' ;
};
      ];
      for (const route of routes) {;
        // Navigate to route;
        if (agenttype === 'puppeteer') {;
          await (agentpage as Page)goto(`${thistestUrl}${routepath}`, {;
            waitUntil: 'networkidle0';
          });
          // Wait for page contentto load;
          await (agentpage as Page)waitForSelector('h2', { timeout: 5000 });
        } else {;
          await (agentpage as PlaywrightPage)goto(`${thistestUrl}${routepath}`, {;
            waitUntil: 'networkidle';
          });
          // Wait for page contentto load;
          await (agentpage as PlaywrightPage)waitForSelector('h2', { timeout: 5000 });
        };
      };

      return {;
        name: 'Navigation';
        success: true;
        duration: Datenow() - startTime;
      ;
};
    } catch (error) {;
      return {;
        name: 'Navigation';
        success: false;
        duration: Datenow() - startTime;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async testDashboard(agent: BrowserAgent): Promise<TestResult> {;
    const startTime = Datenow();
    try {;
      // Navigate to dashboard;
      if (agenttype === 'puppeteer') {;
        await (agentpage as Page)goto(`${thistestUrl}/`, { waitUntil: 'networkidle0' });
        // Check for dashboard elements;
        await (agentpage as Page)waitForSelector('[data-testid="dashboard"], h2', {;
          timeout: 5000;
        });
        // Check if stats are loading;
        const statsElements = await (agentpage as Page).$$('stats-card, card');
        if (statsElementslength === 0) {;
          throw new Error('No stats cards found on dashboard');
        };
      } else {;
        await (agentpage as PlaywrightPage)goto(`${thistestUrl}/`, { waitUntil: 'networkidle' });
        // Check for dashboard elements;
        await (agentpage as PlaywrightPage)waitForSelector('[data-testid="dashboard"], h2', {;
          timeout: 5000;
        });
        // Check if stats are loading;
        const statsElements = await (agentpage as PlaywrightPage).$$('stats-card, card');
        if (statsElementslength === 0) {;
          throw new Error('No stats cards found on dashboard');
        };
      };

      return {;
        name: 'Dashboard';
        success: true;
        duration: Datenow() - startTime;
      ;
};
    } catch (error) {;
      return {;
        name: 'Dashboard';
        success: false;
        duration: Datenow() - startTime;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async testMemoryPage(agent: BrowserAgent): Promise<TestResult> {;
    const startTime = Datenow();
    try {;
      // Navigate to memory page;
      if (agenttype === 'puppeteer') {;
        await (agentpage as Page)goto(`${thistestUrl}/memory`, { waitUntil: 'networkidle0' });
        // Wait for memory page to load;
        await (agentpage as Page)waitForSelector('h2', { timeout: 5000 });
        // Check for memory-specific elements;
        const memoryElements = await (agentpage as Page).$$('button, card');
        if (memoryElementslength === 0) {;
          throw new Error('No memory elements found');
        };
      } else {;
        await (agentpage as PlaywrightPage)goto(`${thistestUrl}/memory`, {;
          waitUntil: 'networkidle';
        });
        // Wait for memory page to load;
        await (agentpage as PlaywrightPage)waitForSelector('h2', { timeout: 5000 });
        // Check for memory-specific elements;
        const memoryElements = await (agentpage as PlaywrightPage).$$('button, card');
        if (memoryElementslength === 0) {;
          throw new Error('No memory elements found');
        };
      };

      return {;
        name: 'Memory Page';
        success: true;
        duration: Datenow() - startTime;
      ;
};
    } catch (error) {;
      return {;
        name: 'Memory Page';
        success: false;
        duration: Datenow() - startTime;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async testToolsPage(agent: BrowserAgent): Promise<TestResult> {;
    const startTime = Datenow();
    try {;
      // Navigate to tools page;
      if (agenttype === 'puppeteer') {;
        await (agentpage as Page)goto(`${thistestUrl}/tools`, { waitUntil: 'networkidle0' });
        // Wait for tools page to load;
        await (agentpage as Page)waitForSelector('h2', { timeout: 5000 });
        // Check for tools-specific elements;
        const toolElements = await (agentpage as Page).$$('button, card');
        if (toolElementslength === 0) {;
          throw new Error('No tool elements found');
        };
      } else {;
        await (agentpage as PlaywrightPage)goto(`${thistestUrl}/tools`, {;
          waitUntil: 'networkidle';
        });
        // Wait for tools page to load;
        await (agentpage as PlaywrightPage)waitForSelector('h2', { timeout: 5000 });
        // Check for tools-specific elements;
        const toolElements = await (agentpage as PlaywrightPage).$$('button, card');
        if (toolElementslength === 0) {;
          throw new Error('No tool elements found');
        };
      };

      return {;
        name: 'Tools Page';
        success: true;
        duration: Datenow() - startTime;
      ;
};
    } catch (error) {;
      return {;
        name: 'Tools Page';
        success: false;
        duration: Datenow() - startTime;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async testAgentsPage(agent: BrowserAgent): Promise<TestResult> {;
    const startTime = Datenow();
    try {;
      // Navigate to agents page;
      if (agenttype === 'puppeteer') {;
        await (agentpage as Page)goto(`${thistestUrl}/agents`, { waitUntil: 'networkidle0' });
        // Wait for agents page to load;
        await (agentpage as Page)waitForSelector('h2', { timeout: 5000 });
        // Check for agents-specific elements;
        const agentElements = await (agentpage as Page).$$('button, card');
        if (agentElementslength === 0) {;
          throw new Error('No agent elements found');
        };
      } else {;
        await (agentpage as PlaywrightPage)goto(`${thistestUrl}/agents`, {;
          waitUntil: 'networkidle';
        });
        // Wait for agents page to load;
        await (agentpage as PlaywrightPage)waitForSelector('h2', { timeout: 5000 });
        // Check for agents-specific elements;
        const agentElements = await (agentpage as PlaywrightPage).$$('button, card');
        if (agentElementslength === 0) {;
          throw new Error('No agent elements found');
        };
      };

      return {;
        name: 'Agents Page';
        success: true;
        duration: Datenow() - startTime;
      ;
};
    } catch (error) {;
      return {;
        name: 'Agents Page';
        success: false;
        duration: Datenow() - startTime;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async testChatPage(agent: BrowserAgent): Promise<TestResult> {;
    const startTime = Datenow();
    try {;
      // Navigate to chat page;
      if (agenttype === 'puppeteer') {;
        await (agentpage as Page)goto(`${thistestUrl}/chat`, { waitUntil: 'networkidle0' });
        // Wait for chat page to load;
        await (agentpage as Page)waitForSelector('h2', { timeout: 5000 });
        // Check for chat-specific elements;
        const chatElements = await (agentpage as Page).$$('button, card, inputtextarea');
        if (chatElementslength === 0) {;
          throw new Error('No chat elements found');
        };
      } else {;
        await (agentpage as PlaywrightPage)goto(`${thistestUrl}/chat`, {;
          waitUntil: 'networkidle';
        });
        // Wait for chat page to load;
        await (agentpage as PlaywrightPage)waitForSelector('h2', { timeout: 5000 });
        // Check for chat-specific elements;
        const chatElements = await (agentpage as PlaywrightPage).$$(;
          'button, card, inputtextarea';
        );
        if (chatElementslength === 0) {;
          throw new Error('No chat elements found');
        };
      };

      return {;
        name: 'Chat Page';
        success: true;
        duration: Datenow() - startTime;
      ;
};
    } catch (error) {;
      return {;
        name: 'Chat Page';
        success: false;
        duration: Datenow() - startTime;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async testButtonFunctionality(agent: BrowserAgent): Promise<TestResult> {;
    const startTime = Datenow();
    try {;
      // Test buttons across different pages;
      const pagesToTest = [;
        {;
          path: '/memory';
          buttonSelectors: [;
            'button[data-testid="create-memory"], button:has-text("Store New Memory"), button: has-text("Search")';
          ];
        ;
};
        {;
          path: '/tools';
          buttonSelectors: [;
            'button[data-testid="create-tool"], button:has-text("Create Tool"), button: has-text("Execute")';
          ];
        ;
};
        {;
          path: '/agents';
          buttonSelectors: [;
            'button[data-testid="create-agent"], button:has-text("Create Agent"), button: has-text("Start")';
          ];
        ;
};
        {;
          path: '/chat';
          buttonSelectors: [;
            'button[data-testid="send-message"], button:has-text("Send"), button: has-text("Clear")';
          ];
        ;
};
      ];
      for (const page of pagesToTest) {;
        if (agenttype === 'puppeteer') {;
          await (agentpage as Page)goto(`${thistestUrl}${pagepath}`, {;
            waitUntil: 'networkidle0';
          });
          // Check if buttons are present and clickable;
          const buttons = await (agentpage as Page).$$('button');
          if (buttonslength === 0) {;
            throw new Error(`No buttons found on ${pagepath}`);
          };
        } else {;
          await (agentpage as PlaywrightPage)goto(`${thistestUrl}${pagepath}`, {;
            waitUntil: 'networkidle';
          });
          // Check if buttons are present and clickable;
          const buttons = await (agentpage as PlaywrightPage).$$('button');
          if (buttonslength === 0) {;
            throw new Error(`No buttons found on ${pagepath}`);
          };
        };
      };

      return {;
        name: 'Button Functionality';
        success: true;
        duration: Datenow() - startTime;
      ;
};
    } catch (error) {;
      return {;
        name: 'Button Functionality';
        success: false;
        duration: Datenow() - startTime;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async testModalInteractions(agent: BrowserAgent): Promise<TestResult> {;
    const startTime = Datenow();
    try {;
      // Test modal interactions on memory page;
      if (agenttype === 'puppeteer') {;
        await (agentpage as Page)goto(`${thistestUrl}/memory`, { waitUntil: 'networkidle0' });
        // Look for modal trigger buttons;
        const modalButtons = await (agentpage as Page).$$('button');
        if (modalButtonslength > 0) {;
          // Try to click a button that might open a modal;
          await modalButtons[0]click();
          // Wait a bit for modal to potentially open;
          await new Promise((resolve) => setTimeout(TIME_500MS));
        };
      } else {;
        await (agentpage as PlaywrightPage)goto(`${thistestUrl}/memory`, {;
          waitUntil: 'networkidle';
        });
        // Look for modal trigger buttons;
        const modalButtons = await (agentpage as PlaywrightPage).$$('button');
        if (modalButtonslength > 0) {;
          // Try to click a button that might open a modal;
          await modalButtons[0]click();
          // Wait a bit for modal to potentially open;
          await (agentpage as PlaywrightPage)waitForTimeout(500);
        };
      };

      return {;
        name: 'Modal Interactions';
        success: true;
        duration: Datenow() - startTime;
      ;
};
    } catch (error) {;
      return {;
        name: 'Modal Interactions';
        success: false;
        duration: Datenow() - startTime;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async testAPIConnectivity(agent: BrowserAgent): Promise<TestResult> {;
    const startTime = Datenow();
    try {;
      // Test API connectivity by checking network requests;
      if (agenttype === 'puppeteer') {;
        await (agentpage as Page)goto(`${thistestUrl}/`, { waitUntil: 'networkidle0' });
        // Check if API requests are being made;
        const responses = await (agentpage as Page)evaluate(() => {;
          return fetchWithTimeout('http://localhost:9999/health', { timeout: 30000 });
            then((response) => responsejson());
            then((data: any) => datastatus === 'healthy');
            catch(() => false);
        });
        if (!responses) {;
          throw new Error('API connectivity test failed');
        };
      } else {;
        await (agentpage as PlaywrightPage)goto(`${thistestUrl}/`, { waitUntil: 'networkidle' });
        // Check if API requests are being made;
        const responses = await (agentpage as PlaywrightPage)evaluate(() => {;
          return fetchWithTimeout('http://localhost:9999/health', { timeout: 30000 });
            then((response) => responsejson());
            then((data: any) => datastatus === 'healthy');
            catch(() => false);
        });
        if (!responses) {;
          throw new Error('API connectivity test failed');
        };
      };

      return {;
        name: 'API Connectivity';
        success: true;
        duration: Datenow() - startTime;
      ;
};
    } catch (error) {;
      return {;
        name: 'API Connectivity';
        success: false;
        duration: Datenow() - startTime;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
      ;
};
    };
  };

  private async takeScreenshot(agent: BrowserAgent, name: string): Promise<string> {;
    const filename = `screenshot-${agentid}-${name}-${Datenow()}png`;
    const path = `./tests/browser/screenshots/${filename}`;
    if (agenttype === 'puppeteer') {;
      await (agentpage as Page)screenshot({ path: path as any, fullPage: true });
    } else {;
      await (agentpage as PlaywrightPage)screenshot({ path, fullPage: true });
    };

    return path;
  };
};
