/* eslint-disable no-undef */;
#!/usr/bin/env node;
import { program } from 'commander';
import { createClient } from '@supabase/supabase-js';
import { DatabaseMigrationService } from '../services/database-migration';
import { config } from '../config';
import chalk from 'chalk';
import ora from 'ora';
import { LogContext, logger } from '../utils/enhanced-logger';
// Initialize Supabase client with service role key for migrations;
const supabase = createClient(configsupabaseurl, processenvSUPABASE_SERVICE_KEY || '', {;
  auth: {;
    persistSession: false;
  ;
};
});
const migrationService = new DatabaseMigrationService(supabase);
program;
  name('migrate');
  description('Database migration tool for Universal AI Tools');
  version('1.0.0');
program;
  command('status');
  description('Show migration status');
  action(async () => {;
    const spinner = ora('Checking migration status...')start();
    try {;
      const status = await migrationServicegetStatus();
      spinnersucceed('Migration status retrieved');
      loggerinfo(chalkbold('\n📊 Migration Status'));
      loggerinfo(chalkgray('='repeat(50)));
      loggerinfo(chalkgreen(`\n✅ Applied Migrations (${statusappliedlength}):`));
      if (statusappliedlength > 0) {;
        statusappliedforEach((m) => {;
          loggerinfo(`  - ${mname} (${new Date(mapplied_at!)toLocaleString()})`);
        });
      } else {;
        loggerinfo(chalkgray('  No migrations applied yet'));
      };

      loggerinfo(chalkyellow(`\n⏳ Pending Migrations (${statuspendinglength}):`));
      if (statuspendinglength > 0) {;
        statuspendingforEach((m) => {;
          loggerinfo(`  - ${mname}`);
        });
      } else {;
        loggerinfo(chalkgray('  All migrations are up to date'));
      };

      if (statusconflictslength > 0) {;
        loggerinfo(chalkred(`\n❌ Conflicts (${statusconflictslength}):`));
        statusconflictsforEach((m) => {;
          loggerinfo(`  - ${mname} (checksum mismatch)`);
        });
      };
    } catch (error) {;
      spinnerfail('Failed to get migration status');
      loggererror`Migration operation failed`, LogContextDATABASE, { error instanceof Error ? errormessage : String(error) );
      consoleerror instanceof Error ? errormessage : String(error) error;
      processexit(1);
    ;
};
  });
program;
  command('up');
  description('Run all pending migrations');
  option('-d, --dry-run', 'Show what would be migrated without applying');
  action(async (options) => {;
    const spinner = ora('Preparing migrations...')start();
    try {;
      if (optionsdryRun) {;
        spinnertext = 'Checking pending migrations...';
        const status = await migrationServicegetStatus();
        spinnersucceed('Dry run complete');
        if (statuspendinglength === 0) {;
          loggerinfo(chalkgreen('\n✅ No pending migrations'));
        } else {;
          loggerinfo(chalkyellow(`\n📋 Would apply ${statuspendinglength} migrations:`));
          statuspendingforEach((m) => {;
            loggerinfo(`  - ${mname}`);
          });
        };
      } else {;
        spinnertext = 'Running migrations...';
        const count = await migrationServicerunPendingMigrations();
        if (count > 0) {;
          spinnersucceed(`Applied ${count} migrations successfully`);
        } else {;
          spinnersucceed('No pending migrations');
        };
      };
    } catch (error) {;
      spinnerfail('Migration failed');
      loggererror`Migration operation failed`, LogContextDATABASE, { error instanceof Error ? errormessage : String(error) );
      consoleerror instanceof Error ? errormessage : String(error) error;
      processexit(1);
    ;
};
  });
program;
  command('down');
  description('Rollback the last migration');
  action(async () => {;
    const spinner = ora('Rolling back last migration...')start();
    try {;
      await migrationServicerollbackLast();
      spinnersucceed('Rollback completed');
    } catch (error) {;
      spinnerfail('Rollback failed');
      loggererror`Migration operation failed`, LogContextDATABASE, { error instanceof Error ? errormessage : String(error) );
      consoleerror instanceof Error ? errormessage : String(error) error;
      processexit(1);
    ;
};
  });
program;
  command('create <name>');
  description('Create a new migration file');
  action(async (name) => {;
    const spinner = ora('Creating migration...')start();
    try {;
      const template = `-- Migration: ${name}`;
-- Created: ${new Date()toISOString();
};

-- Add your migration SQL here;
-- Example:;
-- CREATE TABLE example (;
--   id UUID PRIMARY KEY DEFAULT gen_random_uuid();
--   name TEXT NOT NULL;
--   created_at TIMESTAMPTZ DEFAULT NOW();
-- );
-- Remember to add indexes if needed:;
-- CREATE INDEX idx_example_name ON example(name);
-- Add any necessary permissions:;
-- GRANT SELECT ON example TO authenticated;
`;`;
      const filename = await migrationServicecreateMigration(name, template);
      spinnersucceed(`Created migration: ${filename}`);
      loggerinfo(chalkgray(`\nEdit the migration file at: supabase/migrations/${filename}`));
    } catch (error) {;
      spinnerfail('Failed to create migration');
      loggererror`Migration operation failed`, LogContextDATABASE, { error instanceof Error ? errormessage : String(error) );
      consoleerror instanceof Error ? errormessage : String(error) error;
      processexit(1);
    ;
};
  });
program;
  command('validate');
  description('Validate migration files and checksums');
  action(async () => {;
    const spinner = ora('Validating migrations...')start();
    try {;
      const isValid = await migrationServicevalidate();
      if (isValid) {;
        spinnersucceed('All migrations are valid');
      } else {;
        spinnerfail('Migration validation failed');
        processexit(1);
      };
    } catch (error) {;
      spinnerfail('Validation error instanceof Error ? errormessage : String(error);
      loggererror`Migration operation failed`, LogContextDATABASE, { error instanceof Error ? errormessage : String(error) );
      consoleerror instanceof Error ? errormessage : String(error) error;
      processexit(1);
    ;
};
  });
// Show help if no command provided;
if (!processargvslice(2)length) {;
  programoutputHelp();
};

programparse(processargv);