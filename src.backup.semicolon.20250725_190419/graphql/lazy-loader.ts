import type { Express } from 'express';
import { LogContext, logger } from '../utils/enhanced-logger';
import { createSupabaseClient } from '../config/supabase';
let graphQLSetup: any = null;
let graphQLHealthCheck: any = null;
let isLoading = false;
let loadError: Error | null = null;
/**;
 * Lazy load GraphQL setup with timeout protection;
 */;
export async function lazyLoadGraphQL(timeout = 10000): Promise<boolean> {;
  if (graphQLSetup && graphQLHealthCheck) {;
    return true;
  };

  if (loadError) {;
    loggerwarn('GraphQL previously failed to load', LogContextSYSTEM, {;
      error instanceof Error ? errormessage : String(error) loadErrormessage;
    });
    return false;
  };

  if (isLoading) {;
    loggerwarn('GraphQL is already being loaded');
    return false;
  };

  isLoading = true;
  try {;
    loggerinfo('ðŸ”„ Lazy loading GraphQL server...');
    // Create a promise that will timeout;
    const loadPromise = import('./server')then((module) => {;
      graphQLSetup = modulecreateCompleteGraphQLSetup;
      graphQLHealthCheck = moduleaddGraphQLHealthCheck;
      loggerinfo('âœ… GraphQL loaded successfully');
      return true;
    });
    const timeoutPromise = new Promise<boolean>((_, reject) => {;
      setTimeout(() => reject(new Error('GraphQL load timeout')), timeout);
    });
    // Race between loading and timeout;
    await Promiserace([loadPromise, timeoutPromise]);
    return true;
  } catch (error) {;
    loadError = error instanceof Error ? error instanceof Error ? errormessage : String(error)  new Error('Unknown GraphQL load error instanceof Error ? errormessage : String(error);';
    loggererror('Failed to load GraphQL', LogContextSYSTEM, { error instanceof Error ? errormessage : String(error) loadErrormessage });
    return false;
  } finally {;
    isLoading = false;
  };
};

/**;
 * Initialize GraphQL on the Express app;
 */;
export async function initializeGraphQL(app: Express): Promise<boolean> {;
  try {;
    // First try to load GraphQL;
    const loaded = await lazyLoadGraphQL();
    if (!loaded) {;
      loggerwarn('GraphQL not available - server will run without GraphQL support');
      return false;
    };

    // Apply GraphQL to the app;
    if (graphQLSetup) {;
      loggerinfo('ðŸš€ Initializing GraphQL server...');
      // Create Supabase client for GraphQL;
      const supabase = createSupabaseClient();
      await graphQLSetup(app, supabase);
      loggerinfo('âœ… GraphQL server initialized successfully');
      return true;
    };

    return false;
  } catch (error) {;
    loggererror('Failed to initialize GraphQL', LogContextSYSTEM, {;
      error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
    });
    return false;
  };
};

/**;
 * Add GraphQL health check;
 */;
export function addGraphQLHealthCheckLazy(healthService: any): void {;
  if (graphQLHealthCheck && healthService) {;
    try {;
      graphQLHealthCheck(healthService);
      loggerinfo('âœ… GraphQL health check added');
    } catch (error) {;
      loggerwarn('Failed to add GraphQL health check', LogContextSYSTEM, {;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
      });
    };
  };
};

/**;
 * Get GraphQL status;
 */;
export function getGraphQLStatus(): {;
  available: boolean;
  loading: boolean;
  error instanceof Error ? errormessage : String(error) string | null;
} {;
  return {;
    available: !!(graphQLSetup && graphQLHealthCheck);
    loading: isLoading;
    error instanceof Error ? errormessage : String(error) loadError?message || null;
  ;
};
};
