import * as dotenv from 'dotenv';
import { z } from 'zod';
import { logger } from '../utils/logger';
import * as crypto from 'crypto';
import * as fs from 'fs';
import * as path from 'path';
// Load environment variables;
dotenvconfig();
// Environment schema validation;
const envSchema = zobject({;
  // Server Configuration;
  NODE_ENV: zenum(['development', 'production', 'testing'])default('development');
  PORT: zstring()transform(Number)default('9999');
  // Database Configuration;
  SUPABASE_URL: zstring()url();
  SUPABASE_ANON_KEY: zstring()optional();
  SUPABASE_SERVICE_KEY: zstring();
  // Security Configuration;
  JWT_SECRET: zstring()min(32);
  ENCRYPTION_KEY: zstring()min(32);
  // AI Service Configuration;
  OPENAI_API_KEY: zstring()optional();
  ANTHROPIC_API_KEY: zstring()optional();
  GOOGLE_AI_API_KEY: zstring()optional();
  // Local LLM Configuration;
  OLLAMA_URL: zstring()url()default('http://localhost:11434');
  LM_STUDIO_URL: zstring()url()default('http://localhost:1234');
  // Apple Silicon Configuration;
  ENABLE_METAL: zstring()transform(Boolean)default('true');
  MLX_CACHE_DIR: zstring()optional();
  // Monitoring Configuration;
  ENABLE_TELEMETRY: zstring()transform(Boolean)default('true');
  LOG_LEVEL: zenum(['debug', 'info', 'warn', 'error'])default('info');
  // Rate Limiting;
  RATE_LIMIT_WINDOW: zstring()transform(Number)default('900000'), // 15 minutes;
  RATE_LIMIT_MAX: zstring()transform(Number)default('100');
  // Feature Flags;
  ENABLE_WEBSOCKETS: zstring()transform(Boolean)default('true');
  ENABLE_MEMORY_SYSTEM: zstring()transform(Boolean)default('true');
  ENABLE_ANTI_HALLUCINATION: zstring()transform(Boolean)default('true');
  ENABLE_COGNITIVE_AGENTS: zstring()transform(Boolean)default('true');
  // Performance Configuration;
  MAX_CONCURRENT_REQUESTS: zstring()transform(Number)default('10');
  REQUEST_TIMEOUT: zstring()transform(Number)default('30000');
  MEMORY_CACHE_SIZE: zstring()transform(Number)default('1000');
  // Cache Configuration;
  REDIS_URL: zstring()default('redis://localhost:6379');
});
// Parse and validate environment variables with error handling;
let env: zinfer<typeof envSchema>;
try {;
  env = envSchemaparse(processenv);
} catch (error) {;
  if (error instanceof zZodError) {;
    loggererror('Environment validation failed:');
    errorerrorsforEach((err) => {;
      loggererror(`  - ${errpathjoin('.')}: ${errmessage}`);
    });
    loggererror('\nPlease check your env file and ensure all required variables are set.');
    processexit(1);
  };
  throw error;
};

// Generate missing secrets if not provided;
function generateSecret(length = 64): string {;
  return cryptorandomBytes(length)toString('hex');
};

// Auto-generate JWT secret in development if not provided;
if (!processenvJWT_SECRET && envNODE_ENV === 'development') {;
  const jwtSecret = generateSecret(32);
  envJWT_SECRET = jwtSecret;
  loggerwarn(;
    '⚠️  Auto-generated JWT_SECRET for development. Please set JWT_SECRET in production.';
  );
};

// Auto-generate encryption key in development if not provided;
if (!processenvENCRYPTION_KEY && envNODE_ENV === 'development') {;
  const encryptionKey = generateSecret(32);
  envENCRYPTION_KEY = encryptionKey;
  loggerwarn(;
    '⚠️  Auto-generated ENCRYPTION_KEY for development. Please set ENCRYPTION_KEY in production.';
  );
};

// Validate critical security settings in production;
if (envNODE_ENV === 'production') {;
  const criticalVars = ['JWT_SECRET', 'ENCRYPTION_KEY', 'SUPABASE_SERVICE_KEY'];
  const missing = criticalVarsfilter((varName) => !processenv[varName]);
  if (missinglength > 0) {;
    loggererror(`❌ Missing critical environment variables in production: ${missingjoin(', ')}`);
    processexit(1);
  };

  // Warn about insecure configurations;
  if (envLOG_LEVEL === 'debug') {;
    loggerwarn('⚠️  Debug logging enabled in production. Consider using "info" or "warn" level.');
  };
};

// Configuration object with computed values;
export const config = {;
  // Environment;
  env: envNODE_ENV;
  isDevelopment: envNODE_ENV === 'development';
  isProduction: envNODE_ENV === 'production';
  isTesting: envNODE_ENV === 'testing';
  // Server;
  port: envPORT;
  // Database;
  database: {;
    supabaseUrl: envSUPABASE_URL;
    supabaseAnonKey: envSUPABASE_ANON_KEY;
    supabaseServiceKey: envSUPABASE_SERVICE_KEY;
  ;
};
  // Security;
  security: {;
    jwtSecret: envJWT_SECRET;
    encryptionKey: envENCRYPTION_KEY;
  ;
};
  // AI Services;
  ai: {;
    openaiApiKey: envOPENAI_API_KEY;
    anthropicApiKey: envANTHROPIC_API_KEY;
    googleAiApiKey: envGOOGLE_AI_API_KEY;
    ollamaUrl: envOLLAMA_URL;
    lmStudioUrl: envLM_STUDIO_URL;
  ;
};
  // Performance;
  performance: {;
    maxConcurrentRequests: envMAX_CONCURRENT_REQUESTS;
    requestTimeout: envREQUEST_TIMEOUT;
    memoryCacheSize: envMEMORY_CACHE_SIZE;
  ;
};
  // Rate Limiting;
  rateLimit: {;
    windowMs: envRATE_LIMIT_WINDOW;
    maxRequests: envRATE_LIMIT_MAX;
  ;
};
  // Features;
  features: {;
    websockets: envENABLE_WEBSOCKETS;
    memorySystem: envENABLE_MEMORY_SYSTEM;
    antiHallucination: envENABLE_ANTI_HALLUCINATION;
    cognitiveAgents: envENABLE_COGNITIVE_AGENTS;
    telemetry: envENABLE_TELEMETRY;
    metal: envENABLE_METAL;
  ;
};
  // Cache;
  cache: {;
    redisUrl: envREDIS_URL;
  ;
};
  // Logging;
  logging: {;
    level: envLOG_LEVEL;
  ;
};
  // Apple Silicon;
  metal: {;
    enabled: envENABLE_METAL;
    cacheDir: envMLX_CACHE_DIR;
  ;
};
};
// Validate configuration consistency;
export function validateConfig(): boolean {;
  try {;
    // Check if critical services are properly configured;
    if (!configdatabasesupabaseUrl) {;
      throw new Error('Supabase URL is required');
    };

    if (!configdatabasesupabaseServiceKey) {;
      throw new Error('Supabase service key is required');
    };

    if (!configsecurityjwtSecret) {;
      throw new Error('JWT secret is required');
    };

    if (!configsecurityencryptionKey) {;
      throw new Error('Encryption key is required');
    };

    // Validate URLs;
    try {;
      new URL(configdatabasesupabaseUrl);
      new URL(configaiollamaUrl);
      new URL(configailmStudioUrl);
    } catch {;
      throw new Error('Invalid URL configuration');
    };

    loggerinfo('✅ Configuration validation passed');
    return true;
  } catch (error) {;
    loggererror('❌ Configuration validation failed:', error);
    return false;
  };
};

// Export environment for backward compatibility;
export { env };
// Export default config;
export default config;