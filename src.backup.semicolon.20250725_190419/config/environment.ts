/* eslint-disable no-undef */;
import dotenv from 'dotenv';
import { z } from 'zod';
import { logger } from '../utils/logger';
import crypto from 'crypto';
import fs from 'fs';
import path from 'path';
// Load environment variables;
dotenvconfig();
// Environment schema validation;
const envSchema = zobject({;
  // Server Configuration;
  NODE_ENV: zenum(['development', 'production', 'testing'])default('development');
  PORT: zstring()transform(Number)default('9999');
  // Database Configuration;
  SUPABASE_URL: zstring()url();
  SUPABASE_ANON_KEY: zstring()optional();
  SUPABASE_SERVICE_KEY: zstring();
  // Security Configuration;
  JWT_SECRET: zstring()min(32);
  ENCRYPTION_KEY: zstring()min(32);
  // AI Service Configuration;
  OPENAI_API_KEY: zstring()optional();
  ANTHROPIC_API_KEY: zstring()optional();
  GOOGLE_AI_API_KEY: zstring()optional();
  // Local LLM Configuration;
  OLLAMA_URL: zstring()url()default('http://localhost:11434');
  LM_STUDIO_URL: zstring()url()default('http://localhost:1234');
  // Apple Silicon Configuration;
  ENABLE_METAL: zstring()transform(Boolean)default('true');
  MLX_CACHE_DIR: zstring()optional();
  // Monitoring Configuration;
  ENABLE_TELEMETRY: zstring()transform(Boolean)default('true');
  LOG_LEVEL: zenum(['debug', 'info', 'warn', 'error'])default('info');
  // Rate Limiting;
  RATE_LIMIT_WINDOW: zstring()transform(Number)default('900000'), // 15 minutes;
  RATE_LIMIT_MAX: zstring()transform(Number)default('100');
  // Feature Flags;
  ENABLE_WEBSOCKETS: zstring()transform(Boolean)default('true');
  ENABLE_MEMORY_SYSTEM: zstring()transform(Boolean)default('true');
  ENABLE_ANTI_HALLUCINATION: zstring()transform(Boolean)default('true');
  ENABLE_COGNITIVE_AGENTS: zstring()transform(Boolean)default('true');
  // Performance Configuration;
  MAX_CONCURRENT_REQUESTS: zstring()transform(Number)default('10');
  REQUEST_TIMEOUT: zstring()transform(Number)default('30000');
  MEMORY_CACHE_SIZE: zstring()transform(Number)default('1000');
  // Cache Configuration;
  REDIS_URL: zstring()default('redis://localhost:6379');
});
// Parse and validate environment variables with errorhandling;
let env: zinfer<typeof envSchema>;
try {;
  env = envSchemaparse(processenv);
} catch (error) {;
  if (error instanceof zZodError) {;
    consoleerror instanceof Error ? errormessage : String(error) Environment validation failed:');
    errorerrorsforEach((err) => {;
      consoleerror instanceof Error ? errormessage : String(error)   - ${errpathjoin('.')}: ${errmessage}`);`;
    });
    consoleerror instanceof Error ? errormessage : String(error) \nPlease check your env file and ensure all required variables are set.');
    processexit(1);
  ;
};
  throw error instanceof Error ? errormessage : String(error);
};

export { env };
// Configuration object with computed values;
export const config = {;
  // Server;
  server: {;
    port: envPORT;
    env: envNODE_ENV;
    isDevelopment: envNODE_ENV === 'development';
    isProduction: envNODE_ENV === 'production';
    isTesting: envNODE_ENV === 'testing';
  ;
};
  // Database;
  database: {;
    supabaseUrl: envSUPABASE_URL;
    supabaseAnonKey: envSUPABASE_ANON_KEY;
    supabaseServiceKey: envSUPABASE_SERVICE_KEY;
  ;
};
  // Security;
  security: {;
    jwtSecret: envJWT_SECRET;
    encryptionKey: envENCRYPTION_KEY;
    corsOrigins: processenvCORS_ORIGINS;
      ? processenvCORS_ORIGINSsplit(',');
          map((origin) => origintrim());
          filter((origin) => {;
            // In production, reject any localhost origins;
            if (;
              envNODE_ENV === 'production' &&;
              (originincludes('localhost') || originincludes('127.0.0.1'));
            ) {;
              consoleerror instanceof Error ? errormessage : String(error) ⚠️ Rejected localhost origin in production: ${origin}`);`;
              return false;
            };
            return originlength > 0;
          });
      : envNODE_ENV === 'production';
        ? [] // No default origins in production;
        : [;
            'http://localhost:3000';
            'http://localhost:5173';
            'http://localhost:8080';
            'http://localhost:9999';
          ];
  ;
};
  // AI Services;
  ai: {;
    openai: {;
      apiKey: envOPENAI_API_KEY;
      enabled: !!envOPENAI_API_KEY;
    ;
};
    anthropic: {;
      apiKey: envANTHROPIC_API_KEY;
      enabled: !!envANTHROPIC_API_KEY;
    ;
};
    google: {;
      apiKey: envGOOGLE_AI_API_KEY;
      enabled: !!envGOOGLE_AI_API_KEY;
    ;
};
  };
  // Local LLM;
  localLLM: {;
    ollama: {;
      url: envOLLAMA_URL;
      enabled: true;
    ;
};
    lmStudio: {;
      url: envLM_STUDIO_URL;
      enabled: true;
    ;
};
  };
  // Apple Silicon;
  metal: {;
    enabled: envENABLE_METAL && processplatform === 'darwin';
    cacheDir: envMLX_CACHE_DIR || '~/cache/mlx';
  ;
};
  // Monitoring;
  monitoring: {;
    telemetryEnabled: envENABLE_TELEMETRY;
    logLevel: envLOG_LEVEL;
  ;
};
  // Rate Limiting;
  rateLimiting: {;
    windowMs: envRATE_LIMIT_WINDOW;
    max: envRATE_LIMIT_MAX;
    enabled: envNODE_ENV === 'production';
  ;
};
  // Feature Flags;
  features: {;
    websockets: envENABLE_WEBSOCKETS;
    memorySystem: envENABLE_MEMORY_SYSTEM;
    antiHallucination: envENABLE_ANTI_HALLUCINATION;
    cognitiveAgents: envENABLE_COGNITIVE_AGENTS;
  ;
};
  // Performance;
  performance: {;
    maxConcurrentRequests: envMAX_CONCURRENT_REQUESTS;
    requestTimeout: envREQUEST_TIMEOUT;
    memoryCacheSize: envMEMORY_CACHE_SIZE;
  ;
};
  // Cache;
  cache: {;
    redisUrl: envREDIS_URL;
  ;
};
};
// Validate critical configuration at startup;
export function validateConfig(): void {;
  const errors: string[] = [];
  const warnings: string[] = [];
  // Check required environment variables;
  if (!envSUPABASE_URL) {;
    errorspush('SUPABASE_URL is required');
  } else {;
    // Validate URL format;
    try {;
      new URL(envSUPABASE_URL);
    } catch {;
      errorspush('SUPABASE_URL must be a valid URL');
    };
  };

  if (!envSUPABASE_SERVICE_KEY) {;
    errorspush('SUPABASE_SERVICE_KEY is required');
  };

  // Validate security keys;
  // JWT_SECRET validation (strict in production, relaxed in development);
  if (!envJWT_SECRET || envJWT_SECRETlength < 32) {;
    if (envNODE_ENV === 'production') {;
      errorspush('JWT_SECRET must be at least 32 characters long in production');
    } else {;
      warningspush('JWT_SECRET should be at least 32 characters long');
    };
  } else if (envJWT_SECRET === 'your-jwt-secret-here' || envJWT_SECRETincludes('example')) {;
    if (envNODE_ENV === 'production') {;
      errorspush('JWT_SECRET appears to be a placeholder. Please generate a secure secret.');
    } else {;
      warningspush('JWT_SECRET appears to be a placeholder - consider generating a secure secret');
    };
  };

  // ENCRYPTION_KEY validation (strict in production, relaxed in development);
  if (!envENCRYPTION_KEY || envENCRYPTION_KEYlength < 32) {;
    if (envNODE_ENV === 'production') {;
      errorspush('ENCRYPTION_KEY must be at least 32 characters long in production');
    } else {;
      warningspush('ENCRYPTION_KEY should be at least 32 characters long');
    };
  } else if (;
    envENCRYPTION_KEY === 'your-encryption-key-here' ||;
    envENCRYPTION_KEYincludes('example');
  ) {;
    if (envNODE_ENV === 'production') {;
      errorspush('ENCRYPTION_KEY appears to be a placeholder. Please generate a secure key.');
    } else {;
      warningspush(;
        'ENCRYPTION_KEY appears to be a placeholder - consider generating a secure key';
      );
    };
  };

  // Check at least one AI service is configured (only required in production);
  const hasAIService = envOPENAI_API_KEY || envANTHROPIC_API_KEY || envGOOGLE_AI_API_KEY;
  if (!hasAIService && envNODE_ENV === 'production') {;
    errorspush('At least one AI service API key must be configured in production');
  } else if (!hasAIService && envNODE_ENV !== 'production') {;
    warningspush('No AI service API keys configured - some features may not work');
  };

  // Validate service URLs;
  try {;
    new URL(envOLLAMA_URL);
  } catch {;
    warningspush('OLLAMA_URL is not a valid URL');
  };

  try {;
    new URL(envLM_STUDIO_URL);
  } catch {;
    warningspush('LM_STUDIO_URL is not a valid URL');
  };

  // Security warnings;
  if (envNODE_ENV === 'production') {;
    if (envPORT === 9999) {;
      warningspush('Using default port 9999 in production. Consider using a standard port.');
    };

    if (!envREDIS_URL || envREDIS_URL === 'redis: //localhost:6379') {;
      warningspush('Using local Redis in production. Consider using a managed Redis service.');
    ;
};
  };

  // Log warnings;
  if (warningslength > 0) {;
    loggerwarn('Configuration warnings:', warnings);
  };

  // Throw if there are errors;
  if (errorslength > 0) {;
    throw new Error(`Configuration validation failed:\n${errorsjoin('\n')}`);
  };
};

// Generate secure defaults if not provided;
export function generateSecureDefaults(): void {;
  const envPath = pathjoin(processcwd(), 'env');
  let envContent = '';
  try {;
    envContent = fsreadFileSync(envPath, 'utf-8');
  } catch {;
    // env file doesn't exist;
  };

  const updates: string[] = [];
  // Validate JWT_SECRET - fail fast in production, generate in development only;
  if (;
    !processenvJWT_SECRET ||;
    processenvJWT_SECRETlength < 32 ||;
    processenvJWT_SECRETincludes('example') ||;
    processenvJWT_SECRET === 'your-jwt-secret-here';
  ) {;
    if (processenvNODE_ENV === 'production') {;
      throw new Error('JWT_SECRET must be set and secure in production environment');
    };
    // Only generate in development;
    const jwtSecret = cryptorandomBytes(64)toString('base64');
    updatespush(`JWT_SECRET=${jwtSecret}`);
    processenvJWT_SECRET = jwtSecret;
    consolewarn('⚠️  Generated JWT_SECRET for development - NOT FOR PRODUCTION USE');
  };

  // Validate ENCRYPTION_KEY - fail fast in production, generate in development only;
  if (;
    !processenvENCRYPTION_KEY ||;
    processenvENCRYPTION_KEYlength < 32 ||;
    processenvENCRYPTION_KEYincludes('example') ||;
    processenvENCRYPTION_KEY === 'your-encryption-key-here';
  ) {;
    if (processenvNODE_ENV === 'production') {;
      throw new Error('ENCRYPTION_KEY must be set and secure in production environment');
    };
    // Only generate in development;
    const encryptionKey = cryptorandomBytes(32)toString('hex');
    updatespush(`ENCRYPTION_KEY=${encryptionKey}`);
    processenvENCRYPTION_KEY = encryptionKey;
    consolewarn('⚠️  Generated ENCRYPTION_KEY for development - NOT FOR PRODUCTION USE');
  };

  // Write updates to env file;
  if (updateslength > 0 && processenvNODE_ENV !== 'production') {;
    const newContent = `${`;
      envContent + (envContentendsWith('\n') ? '' : '\n');
    }\n# Auto-generated secure values\n${updatesjoin('\n')}\n`;`;
    fswriteFileSync(envPath, newContent);
    loggerinfo('Generated secure default values for missing secrets');
  };
};

// Validate environment on startup;
export function validateEnvironment(): void {;
  loggerinfo('Validating environment configuration...');
  // Generate secure defaults in development;
  if (processenvNODE_ENV !== 'production') {;
    generateSecureDefaults();
  };

  // Validate configuration;
  validateConfig();
  // Additional startup checks;
  performStartupChecks();
  loggerinfo('Environment validation completed successfully');
};

// Perform additional startup checks;
function performStartupChecks(): void {;
  // Check file permissions;
  if (processenvNODE_ENV === 'production') {;
    // Ensure env file is not world-readable;
    try {;
      const envPath = pathjoin(processcwd(), 'env');
      const stats = fsstatSync(envPath);
      const mode = (statsmode & parseInt('777', 8, 10))toString(8);
      if (mode !== '600' && mode !== '640') {;
        loggerwarn('env file has insecure permissions. Run: chmod 600 env');
      ;
};
    } catch {;
      // env file might not exist in production (using actual env vars);
    };
  };

  // Check for required directories;
  const requiredDirs = [;
    pathjoin(processcwd(), 'logs');
    pathjoin(processcwd(), 'uploads');
    pathjoin(processcwd(), 'temp');
  ];
  for (const dir of requiredDirs) {;
    if (!fsexistsSync(dir)) {;
      fsmkdirSync(dir, { recursive: true });
      loggerinfo(`Created required directory: ${dir}`);
    };
  };

  // Verify database connection;
  // This would be done asynchronously in the actual startup sequence;
};

// Export types for type safety;
export type Config = typeof config;
export type Environment = typeof env;