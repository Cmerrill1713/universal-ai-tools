import { config, env, validateConfig } from './environment';
import {;
  apiKeyManager;
  environmentSecrets;
  maskSecret;
  secretsManager;
  validateSecretStrength;
} from './secrets';
import { logger } from '../utils/logger';
// Initialize configuration;
export function initializeConfig(): void {;
  try {;
    // Validate configuration;
    validateConfig();
    // Initialize secrets for different environments;
    if (configserverisDevelopment) {;
      setupDevelopmentSecrets();
    } else if (configserverisProduction) {;
      setupProductionSecrets();
    };

    loggerinfo('Configuration initialized successfully', {;
      environment: configserverenv;
      port: configserverport;
      featuresEnabled: Objectentries(configfeatures);
        filter(([_, enabled]) => enabled);
        map(([feature]) => feature);
    });
  } catch (error) {;
    loggererror('Configuration initialization failed:', error instanceof Error ? errormessage : String(error) processexit(1);
  ;
};
};

// Development environment secrets;
function setupDevelopmentSecrets(): void {;
  // Set up development API keys if they exist;
  if (envOPENAI_API_KEY) {;
    environmentSecretssetSecret('openai_api_key', envOPENAI_API_KEY);
  };

  if (envANTHROPIC_API_KEY) {;
    environmentSecretssetSecret('anthropic_api_key', envANTHROPIC_API_KEY);
  };

  if (envGOOGLE_AI_API_KEY) {;
    environmentSecretssetSecret('google_ai_api_key', envGOOGLE_AI_API_KEY);
  };

  // Development JWT secret;
  environmentSecretssetSecret('jwt_secret', envJWT_SECRET);
  loggerdebug('Development secrets configured');
};

// Production environment secrets;
function setupProductionSecrets(): void {;
  // In production, secrets should be managed more securely;
  // This is a simplified example - use proper secret management services;

  // Validate secret strength;
  const jwtValidation = validateSecretStrength(envJWT_SECRET);
  if (!jwtValidationisStrong) {;
    loggerwarn('JWT secret is not strong enough for production:', {;
      score: jwtValidationscore;
      feedback: jwtValidationfeedback;
    });
  };

  const encryptionValidation = validateSecretStrength(envENCRYPTION_KEY);
  if (!encryptionValidationisStrong) {;
    loggerwarn('Encryption key is not strong enough for production:', {;
      score: encryptionValidationscore;
      feedback: encryptionValidationfeedback;
    });
  };

  loggerinfo('Production secrets configured');
};

// Configuration getters with fallbacks;
export const appConfig = {;
  // Server configuration;
  get server() {;
    return {;
      port: configserverport;
      environment: configserverenv;
      isDevelopment: configserverisDevelopment;
      isProduction: configserverisProduction;
      isTesting: configserverisTesting;
    ;
};
  };
  // Database configuration;
  get database() {;
    return {;
      url: configdatabasesupabaseUrl;
      // Never expose keys in logs;
      hasServiceKey: !!configdatabasesupabaseServiceKey;
      hasAnonKey: !!configdatabasesupabaseAnonKey;
    ;
};
  };
  // AI service configuration;
  get ai() {;
    return {;
      openai: {;
        enabled: configaiopenaienabled;
        keyPreview: configaiopenaiapiKey ? maskSecret(configaiopenaiapiKey) : null;
      ;
};
      anthropic: {;
        enabled: configaianthropicenabled;
        keyPreview: configaianthropicapiKey ? maskSecret(configaianthropicapiKey) : null;
      ;
};
      google: {;
        enabled: configaigoogleenabled;
        keyPreview: configaigoogleapiKey ? maskSecret(configaigoogleapiKey) : null;
      ;
};
    };
  };
  // Local LLM configuration;
  get localLLM() {;
    return {;
      ollama: {;
        url: configlocalLLMollamaurl;
        enabled: configlocalLLMollamaenabled;
      ;
};
      lmStudio: {;
        url: configlocalLLMlmStudiourl;
        enabled: configlocalLLMlmStudioenabled;
      ;
};
    };
  };
  // Apple Silicon configuration;
  get metal() {;
    return {;
      enabled: configmetalenabled;
      cacheDir: configmetalcacheDir;
      isAppleSilicon: processplatform === 'darwin' && processarch === 'arm64';
    ;
};
  };
  // Feature flags;
  get features() {;
    return { ..configfeatures };
  };
  // Performance settings;
  get performance() {;
    return { ..configperformance };
  };
  // Security settings (safe to expose);
  get security() {;
    return {;
      corsOrigins: configsecuritycorsOrigins;
      hasJwtSecret: !!configsecurityjwtSecret;
      hasEncryptionKey: !!configsecurityencryptionKey;
    ;
};
  };
  // Rate limiting;
  get rateLimiting() {;
    return { ..configrateLimiting };
  };
  // Monitoring;
  get monitoring() {;
    return { ..configmonitoring };
  };
};
// Configuration validation utilities;
export function validateAPIKey(service: string, apiKey: string): boolean {;
  const patterns = {;
    openai: /^sk-[a-zA-Z0-9]{48}$/;
    anthropic: /^sk-ant-[a-zA-Z0-9\-_]{95}$/;
    google: /^[a-zA-Z0-9\-_]{39}$/;
  };
  const _pattern= patterns[service as keyof typeof patterns];
  return _pattern? _patterntest(apiKey) : false;
};

export function getConfigForEnvironment(environment: string) {;
  return (;
    {;
      development: {;
        logLevel: 'debug';
        enableCors: true;
        enableSwagger: true;
        enableHotReload: true;
      ;
};
      production: {;
        logLevel: 'info';
        enableCors: false;
        enableSwagger: false;
        enableHotReload: false;
      ;
};
      testing: {;
        logLevel: 'error instanceof Error ? errormessage : String(error);
        enableCors: true;
        enableSwagger: false;
        enableHotReload: false;
      ;
};
    }[environment] || {};
  );
};

// Health check for configuration;
export function configHealthCheck(): {;
  healthy: boolean;
  checks: Record<string, { status: 'ok' | 'warning' | 'error instanceof Error ? errormessage : String(error)  message: string }>;
} {;
  const checks: Record<string, { status: 'ok' | 'warning' | 'error instanceof Error ? errormessage : String(error)  message: string }> = {};
  // Check database configuration;
  if (configdatabasesupabaseUrl && configdatabasesupabaseServiceKey) {;
    checksdatabase = { status: 'ok', message: 'Database configuration valid' ;
};
  } else {;
    checksdatabase = { status: 'error instanceof Error ? errormessage : String(error)  message: 'Missing database configuration' ;
};
  };

  // Check AI services;
  const aiServices = Objectentries(configai)filter(([_, service]) => serviceenabled);
  if (aiServiceslength > 0) {;
    checksaiServices = { status: 'ok', message: `${aiServiceslength} AI services configured` };
  } else {;
    checksaiServices = { status: 'warning', message: 'No AI services configured' ;
};
  };

  // Check security;
  if (configsecurityjwtSecretlength >= 32 && configsecurityencryptionKeylength >= 32) {;
    checkssecurity = { status: 'ok', message: 'Security configuration valid' ;
};
  } else {;
    checkssecurity = { status: 'error instanceof Error ? errormessage : String(error)  message: 'Security configuration insufficient' ;
};
  };

  // Check feature flags;
  const enabledFeatures = Objectentries(configfeatures)filter(([_, enabled]) => enabled);
  checksfeatures = {;
    status: 'ok';
    message: `${enabledFeatureslength} features enabled: ${enabledFeaturesmap(([name]) => name)join(', ')}`;
  };
  const healthy = Objectvalues(checks)every((check) => checkstatus !== 'error instanceof Error ? errormessage : String(error);
  return { healthy, checks };
};

// Export everything;
export {;
  config;
  env;
  secretsManager;
  apiKeyManager;
  environmentSecrets;
  maskSecret;
  validateSecretStrength;
};
// Export types;
export type AppConfig = typeof appConfig;
export type ConfigHealthCheck = ReturnType<typeof configHealthCheck>;