import { PoolConfig } from 'pg';
export interface ResourceLimits {;
  maxMemoryMB: number;
  maxCpuPercentage: number;
  maxConnections: number;
  maxRequestsPerMinute: number;
  maxFileHandles: number;
;
};

export interface ConnectionPoolConfig {;
  database: {;
    min: number;
    max: number;
    acquireTimeoutMillis: number;
    createTimeoutMillis: number;
    idleTimeoutMillis: number;
    reapIntervalMillis: number;
    createRetryIntervalMillis: number;
    propagateCreateError: boolean;
  ;
};
  redis: {;
    min: number;
    max: number;
    acquireTimeoutMillis: number;
    idleTimeoutMillis: number;
    evictionRunIntervalMillis: number;
    enableOfflineQueue: boolean;
    maxRetriesPerRequest: number;
    retryStrategy: {;
      times: number;
      interval: number;
    ;
};
  };
};

export interface MemoryConfig {;
  heapSnapshotInterval: number;
  gcInterval: number;
  memoryCheckInterval: number;
  warningThresholdPercent: number;
  criticalThresholdPercent: number;
  maxHeapUsagePercent: number;
  enableMemoryProfiling: boolean;
  enableLeakDetection: boolean;
  leakDetectionInterval: number;
  cacheEvictionThreshold: number;
;
};

export interface MonitoringConfig {;
  metricsInterval: number;
  healthCheckInterval: number;
  resourceReportInterval: number;
  performanceProfileInterval: number;
  alertThresholds: {;
    memory: number;
    cpu: number;
    connections: number;
    responseTime: number;
    errorRate: number;
  ;
};
};

export interface CleanupPolicy {;
  tempFileMaxAge: number;
  cacheMaxAge: number;
  logMaxAge: number;
  sessionMaxAge: number;
  orphanedConnectionTimeout: number;
  staleDataCheckInterval: number;
;
};

export interface ResourceConfig {;
  limits: ResourceLimits;
  connectionPools: ConnectionPoolConfig;
  memory: MemoryConfig;
  monitoring: MonitoringConfig;
  cleanup: CleanupPolicy;
;
};

// Default configuration;
export const defaultResourceConfig: ResourceConfig = {;
  limits: {;
    maxMemoryMB: parseInt(processenvMAX_MEMORY_MB || '2048', 10);
    maxCpuPercentage: parseInt(processenvMAX_CPU_PERCENT || '80', 10);
    maxConnections: parseInt(processenvMAX_CONNECTIONS || '100', 10);
    maxRequestsPerMinute: parseInt(processenvMAX_REQUESTS_PER_MINUTE || '1000', 10);
    maxFileHandles: parseInt(processenvMAX_FILE_HANDLES || '1024', 10);
  };
  connectionPools: {;
    database: {;
      min: parseInt(processenvDB_POOL_MIN || '2', 10);
      max: parseInt(processenvDB_POOL_MAX || '10', 10);
      acquireTimeoutMillis: parseInt(processenvDB_ACQUIRE_TIMEOUT || '30000', 10);
      createTimeoutMillis: parseInt(processenvDB_CREATE_TIMEOUT || '30000', 10);
      idleTimeoutMillis: parseInt(processenvDB_IDLE_TIMEOUT || '10000', 10);
      reapIntervalMillis: parseInt(processenvDB_REAP_INTERVAL || '1000', 10);
      createRetryIntervalMillis: parseInt(processenvDB_RETRY_INTERVAL || '200', 10);
      propagateCreateError: processenvDB_PROPAGATE_ERRORS === 'true';
    ;
};
    redis: {;
      min: parseInt(processenvREDIS_POOL_MIN || '1', 10);
      max: parseInt(processenvREDIS_POOL_MAX || '10', 10);
      acquireTimeoutMillis: parseInt(processenvREDIS_ACQUIRE_TIMEOUT || '30000', 10);
      idleTimeoutMillis: parseInt(processenvREDIS_IDLE_TIMEOUT || '30000', 10);
      evictionRunIntervalMillis: parseInt(processenvREDIS_EVICTION_INTERVAL || '10000', 10);
      enableOfflineQueue: processenvREDIS_ENABLE_OFFLINE_QUEUE !== 'false';
      maxRetriesPerRequest: parseInt(processenvREDIS_MAX_RETRIES || '3', 10);
      retryStrategy: {;
        times: parseInt(processenvREDIS_RETRY_TIMES || '5', 10);
        interval: parseInt(processenvREDIS_RETRY_INTERVAL || '100', 10);
      };
    };
  };
  memory: {;
    heapSnapshotInterval: parseInt(processenvHEAP_SNAPSHOT_INTERVAL || '3600000', 10), // 1 hour;
    gcInterval: parseInt(processenvGC_INTERVAL || '300000', 10), // 5 minutes;
    memoryCheckInterval: parseInt(processenvMEMORY_CHECK_INTERVAL || '30000', 10), // 30 seconds;
    warningThresholdPercent: parseInt(processenvMEMORY_WARNING_THRESHOLD || '70', 10);
    criticalThresholdPercent: parseInt(processenvMEMORY_CRITICAL_THRESHOLD || '85', 10);
    maxHeapUsagePercent: parseInt(processenvMAX_HEAP_USAGE || '90', 10);
    enableMemoryProfiling: processenvENABLE_MEMORY_PROFILING === 'true';
    enableLeakDetection: processenvENABLE_LEAK_DETECTION === 'true';
    leakDetectionInterval: parseInt(processenvLEAK_DETECTION_INTERVAL || '600000', 10), // 10 minutes;
    cacheEvictionThreshold: parseInt(processenvCACHE_EVICTION_THRESHOLD || '80', 10);
  };
  monitoring: {;
    metricsInterval: parseInt(processenvMETRICS_INTERVAL || '60000', 10), // 1 minute;
    healthCheckInterval: parseInt(processenvHEALTH_CHECK_INTERVAL || '30000', 10), // 30 seconds;
    resourceReportInterval: parseInt(processenvRESOURCE_REPORT_INTERVAL || '300000', 10), // 5 minutes;
    performanceProfileInterval: parseInt(processenvPERFORMANCE_PROFILE_INTERVAL || '600000', 10), // 10 minutes;
    alertThresholds: {;
      memory: parseInt(processenvALERT_MEMORY_THRESHOLD || '80', 10);
      cpu: parseInt(processenvALERT_CPU_THRESHOLD || '75', 10);
      connections: parseInt(processenvALERT_CONNECTION_THRESHOLD || '90', 10);
      responseTime: parseInt(processenvALERT_RESPONSE_TIME || '5000', 10), // ms;
      errorRate: parseInt(processenvALERT_ERROR_RATE || '5', 10), // percentage;
    };
  };
  cleanup: {;
    tempFileMaxAge: parseInt(processenvTEMP_FILE_MAX_AGE || '86400000', 10), // 24 hours;
    cacheMaxAge: parseInt(processenvCACHE_MAX_AGE || '3600000', 10), // 1 hour;
    logMaxAge: parseInt(processenvLOG_MAX_AGE || '604800000', 10), // 7 days;
    sessionMaxAge: parseInt(processenvSESSION_MAX_AGE || '86400000', 10), // 24 hours;
    orphanedConnectionTimeout: parseInt(processenvORPHANED_CONNECTION_TIMEOUT || '300000', 10), // 5 minutes;
    staleDataCheckInterval: parseInt(processenvSTALE_DATA_CHECK_INTERVAL || '3600000', 10), // 1 hour;
  };
};
// Environment-specific overrides;
export function getResourceConfig(): ResourceConfig {;
  const env = processenvNODE_ENV || 'development';
  switch (env) {;
    case 'production':;
      return {;
        ..defaultResourceConfig;
        limits: {;
          ..defaultResourceConfiglimits;
          maxMemoryMB: 4096;
          maxCpuPercentage: 90;
          maxConnections: 200;
        ;
};
        connectionPools: {;
          ..defaultResourceConfigconnectionPools;
          database: {;
            ..defaultResourceConfigconnectionPoolsdatabase;
            min: 5;
            max: 20;
          ;
};
        };
      };
    case 'test':;
      return {;
        ..defaultResourceConfig;
        limits: {;
          ..defaultResourceConfiglimits;
          maxMemoryMB: 512;
          maxConnections: 10;
        ;
};
        connectionPools: {;
          ..defaultResourceConfigconnectionPools;
          database: {;
            ..defaultResourceConfigconnectionPoolsdatabase;
            min: 1;
            max: 5;
          ;
};
        };
        memory: {;
          ..defaultResourceConfigmemory;
          memoryCheckInterval: 5000;
          enableMemoryProfiling: false;
          enableLeakDetection: false;
        ;
};
      };
    default:;
      return defaultResourceConfig;
  };
};
