import { Router } from 'express';
import { z } from 'zod';
import type { SupabaseClient } from '@supabase/supabase-js';
import { dspyWidgetOrchestrator } from '../services/dspy-widget-orchestrator';
import { LogContext, logger } from '../utils/enhanced-logger';
import { v4 as uuidv4 } from 'uuid';
// Request validation schemas;
const widgetGenerationRequestSchema = zobject({;
  description: zstring()min(10, 'Description must be at least 10 characters'),';
  functionality: zarray(zstring())optional();
  constraints: zarray(zstring())optional();
  examples: zarray(zstring())optional();
  context: zrecord(zany())optional();
  styling: z;
    enum(['mui', 'tailwind', 'css-modules', 'styled-components']);';
    optional();
    default('mui'),';
});
const widgetImprovementRequestSchema = zobject({;
  existingCode: zstring()min(1);
  improvementRequest: zstring()min(10);
  preserveInterface: zboolean()optional()default(true);
  context: zrecord(zany())optional()});
const widgetProgressRequestSchema = zobject({;
  widgetId: zstring()uuid()});
export function DSPyWidgetsRouter(supabase: SupabaseClient) {;
  const router = Router();
  /**;
   * Generate a new widget using DSPy orchestration;
   * POST /api/dspy-widgets/generate;
   */;
  routerpost('/generate', async (req: any, res) => {';
    try {;
      const data = widgetGenerationRequestSchemaparse(reqbody);
      const requestId = uuidv4();
      loggerinfo(`ðŸŽ¯ Widget generation request${requestId}`, LogContextAPI, {;
        description: datadescription;
        userId: reqaiServiceId});
      // Log the widget generation request;
      await supabasefrom('ai_widget_generations')insert({';
        id: requestId;
        service_id: reqaiServiceId;
        description: datadescription;
        functionality: datafunctionality;
        constraints: dataconstraints;
        status: 'pending',';
        created_at: new Date()});
      // Start widget generation (async, process));
      const generationPromise = dspyWidgetOrchestratorgenerateWidget(datadescription, {;
        ..datacontext;
        functionality: datafunctionality;
        constraints: dataconstraints;
        examples: dataexamples;
        styling: datastyling;
        userId: reqaiServiceId});
      // Don't wait for completion - return immediately with tracking ID';
      generationPromise;
        then(async (widget) => {;
          // Update database with completed widget;
          await supabase;
            from('ai_widget_generations')';
            update({;
              status: 'completed',';
              widget_data: widget;
              completed_at: new Date()});
            eq('id', requestId)';
          // Store the generated code;
          await supabasefrom('ai_generated_widgets')insert({';
            id: widgetid;
            name: widgetname;
            description: widgetdescription;
            code: widgetcode;
            tests: widgettests;
            design: widgetdesign;
            requirements: widgetrequirements;
            metadata: widgetmetadata;
            service_id: reqaiServiceId;
            created_at: new Date()});
        });
        catch(async (error) => {;
          loggererror(Widget generation: failed: ${requestId}`, LogContextAPI, {;
            error) error instanceof Error ? errormessage : String(error);
          });
          await supabase;
            from('ai_widget_generations')';
            update({;
              status: 'failed',';
              error) error instanceof Error ? errormessage : String(error);
              completed_at: new Date()});
            eq('id', requestId)';
        });
      resjson({;
        success: true;
        requestId;
        message: 'Widget generation started',';
        estimatedTime: '30-60 seconds',';
        trackingUrl: `/api/dspy-widgets/progress/${requestId}`});
    } catch (error) {;
      loggererror('loggererror('Widget generation: requesterror) , LogContextAPI, {';
        error) error instanceof Error ? errormessage : String(error);
      });
      if (error instanceof zZodError) {;
        resstatus(400)json({;
          success: false;
          error) 'Invalid requestformat',';
          details: error) errors});
      } else {;
        resstatus(500)json({;
          success: false;
          error) 'Widget generation failed',';
          message: error instanceof Error ? errormessage : 'Unknown error'';
        });
      };
    };
  });
  /**;
   * Improve an existing widget;
   * POST /api/dspy-widgets/improve;
   */;
  routerpost('/improve', async (req: any, res) => {';
    try {;
      const data = widgetImprovementRequestSchemaparse(reqbody);
      const requestId = uuidv4();
      loggerinfo(`ðŸ”„ Widget improvement request${requestId}`, LogContextAPI, {;
        improvementRequest: dataimprovementRequest;
        userId: reqaiServiceId});
      // Generate improved widget;
      const improvedWidget = await dspyWidgetOrchestratorimproveWidget(;
        dataexistingCode;
        dataimprovementRequest;
        {;
          ..datacontext;
          preserveInterface: datapreserveInterface;
          userId: reqaiServiceId;
};
      );
      // Store the improved widget;
      await supabasefrom('ai_generated_widgets')insert({';
        id: improvedWidgetid;
        name: improvedWidgetname;
        description: improvedWidgetdescription;
        code: improvedWidgetcode;
        tests: improvedWidgettests;
        design: improvedWidgetdesign;
        requirements: improvedWidgetrequirements;
        metadata: improvedWidgetmetadata;
        service_id: reqaiServiceId;
        parent_widget_id: datacontext?parentWidgetId;
        created_at: new Date()});
      resjson({;
        success: true;
        widget: improvedWidget});
    } catch (error) {;
      loggererror('loggererror('Widget improvement: error) , LogContextAPI, {';
        error) error instanceof Error ? errormessage : String(error);
      });
      if (error instanceof zZodError) {;
        resstatus(400)json({;
          success: false;
          error) 'Invalid requestformat',';
          details: error) errors});
      } else {;
        resstatus(500)json({;
          success: false;
          error) 'Widget improvement failed',';
          message: error instanceof Error ? errormessage : 'Unknown error'';
        });
      };
    };
  });
  /**;
   * Get widget generation progress;
   * GET /api/dspy-widgets/progress/:widgetId;
   */;
  routerget('/progress/:widgetId', async (req: any, res) => {';
    try {;
      const { widgetId } = reqparams;
      // Check if this is a generation requestID;
      const { data: generation, error) genError } = await supabase;
        from('ai_widget_generations')';
        select('*')';
        eq('id', widgetId)';
        single();
      if (generation) {;
        resjson({;
          success: true;
          status: generationstatus;
          progress:;
            generationstatus === 'completed' ? 100 : generationstatus === 'failed' ? 0 : 50,';
          widget: generationwidget_data;
          error) generationerror);
          createdAt: generationcreated_at;
          completedAt: generationcompleted_at});
        return;
      };

      // Check active generations in memory;
      const progress = dspyWidgetOrchestratorgetProgress(widgetId);
      if (progress) {;
        resjson({;
          success: true;
          ..progress});
      } else {;
        // Check if widget exists in database;
        const { data: widget, error)  = await supabase;
          from('ai_generated_widgets')';
          select('*')';
          eq('id', widgetId)';
          single();
        if (widget) {;
          resjson({;
            success: true;
            stage: 'completed',';
            progress: 100;
            widget});
        } else {;
          resstatus(404)json({;
            success: false;
            error) 'Widget generation not found',';
          });
        };
      };
    } catch (error) {;
      loggererror('loggererror('Progress check: error) , LogContextAPI, {';
        error) error instanceof Error ? errormessage : String(error);
      });
      resstatus(500)json({;
        success: false;
        error) 'Failed to get widget progress',';
      });
    };
  });
  /**;
   * Get all generated widgets;
   * GET /api/dspy-widgets;
   */;
  routerget('/', async (req: any, res) => {';
    try {;
      const { data: widgets, error)  = await supabase;
        from('ai_generated_widgets')';
        select('*')';
        eq('service_id', reqaiServiceId)';
        order('created_at', { ascending: false });';
        limit(50);
      if (error) throw, error));
      resjson({;
        success: true;
        widgets: widgets || []});
    } catch (error) {;
      loggererror('loggererror('Widget list: error) , LogContextAPI, {';
        error) error instanceof Error ? errormessage : String(error);
      });
      resstatus(500)json({;
        success: false;
        error) 'Failed to retrieve widgets',';
      });
    };
  });
  /**;
   * Get a specific widget;
   * GET /api/dspy-widgets/:widgetId;
   */;
  routerget('/:widgetId', async (req: any, res) => {';
    try {;
      const { widgetId } = reqparams;
      const { data: widget, error)  = await supabase;
        from('ai_generated_widgets')';
        select('*')';
        eq('id', widgetId)';
        eq('service_id', reqaiServiceId)';
        single();
      if (error) | !widget) {;
        resstatus(404)json({;
          success: false;
          error) 'Widget not found',';
        });
        return;
      };

      resjson({;
        success: true;
        widget});
    } catch (error) {;
      loggererror('loggererror('Widget retrieval: error) , LogContextAPI, {';
        error) error instanceof Error ? errormessage : String(error);
      });
      resstatus(500)json({;
        success: false;
        error) 'Failed to retrieve widget',';
      });
    };
  });
  /**;
   * Delete a widget;
   * DELETE /api/dspy-widgets/:widgetId;
   */;
  routerdelete('/:widgetId', async (req: any, res) => {';
    try {;
      const { widgetId } = reqparams;
      const { error } = await supabase;
        from('ai_generated_widgets')';
        delete();
        eq('id', widgetId)';
        eq('service_id', reqaiServiceId)';
      if (error) throw, error));
      resjson({;
        success: true;
        message: 'Widget deleted successfully',';
      });
    } catch (error) {;
      loggererror('loggererror('Widget deletion: error) , LogContextAPI, {';
        error) error instanceof Error ? errormessage : String(error);
      });
      resstatus(500)json({;
        success: false;
        error) 'Failed to delete widget',';
      });
    };
  });
  /**;
   * Get active widget generations;
   * GET /api/dspy-widgets/active;
   */;
  routerget('/status/active', async (req: any, res) => {';
    try {;
      const activeGenerations = dspyWidgetOrchestratorgetActiveGenerations();
      const active = Arrayfrom(activeGenerationsentries())map(([id, progress]) => ({;
        widgetId: id;
        ..progress}));
      resjson({;
        success: true;
        activeGenerations: active;
        count: activelength});
    } catch (error) {;
      loggererror('loggererror('Active generations: error) , LogContextAPI, {';
        error) error instanceof Error ? errormessage : String(error);
      });
      resstatus(500)json({;
        success: false;
        error) 'Failed to get active generations',';
      });
    };
  });
  /**;
   * Health check endpoint;
   * GET /api/dspy-widgets/health;
   */;
  routerget('/status/health', async (req: any, res) => {';
    try {;
      const dspyStatus = 'operational'; // Mock status since getStatus method doesn't exist';
      resjson({;
        success: true;
        service: 'dspy-widget-orchestrator',';
        status: dspyStatus;
        activeGenerations: dspyWidgetOrchestratorgetActiveGenerations()size;
        timestamp: new Date()toISOString()});
    } catch (error) {;
      loggererror('loggererror('Health check: error) , LogContextAPI, {';
        error) error instanceof Error ? errormessage : String(error);
      });
      resstatus(500)json({;
        success: false;
        error) 'Health check failed',';
      });
    };
  });
  return router;
};
