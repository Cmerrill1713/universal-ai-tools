/**;
 * Sweet Athena State Manager;
 *;
 * Manages avatar personality modes, clothing customization, and state synchronization;
 * between React frontend and UE5 backend;
 */;

import { EventEmitter } from 'events';
import { supabase } from './supabase_service';
import { logger } from '../utils/enhanced-logger';
import type { AvatarState, PixelStreamingBridge } from './pixel-streaming-bridge';
export type PersonalityMode = 'sweet' | 'shy' | 'confident' | 'caring' | 'playful';
export type ClothingLevel = 'conservative' | 'moderate' | 'revealing' | 'very_revealing';
export interface PersonalityConfig {;
  mode: PersonalityMode;
  traits: {;
    sweetness: number; // 0-1;
    confidence: number; // 0-1;
    playfulness: number; // 0-1;
    caring: number; // 0-1;
    shyness: number; // 0-1;
  };
  voice: {;
    pitch: number; // 0.5-2.0;
    speed: number; // 0.5-2.0;
    emotion: string;
  ;
};
  animation: {;
    idleStyle: string;
    gestureIntensity: number;
    expressionStrength: number;
  ;
};
  conversationStyle: {;
    responseLength: 'short' | 'medium' | 'long';
    formality: 'casual' | 'friendly' | 'professional';
    emotiveness: number; // 0-1;
  };
};

export interface ClothingItem {;
  id: string;
  category: 'top' | 'bottom' | 'dress' | 'accessory' | 'shoes';
  name: string;
  revealLevel: ClothingLevel;
  customizable: boolean;
  materials: string[];
  colors: string[];
  style: string;
  metadata: Record<string, unknown>;
};

export interface ClothingConfiguration {;
  level: ClothingLevel;
  items: {;
    top?: ClothingItem;
    bottom?: ClothingItem;
    dress?: ClothingItem;
    accessories: ClothingItem[];
    shoes?: ClothingItem;
  ;
};
  customization: {;
    colors: Record<string, string>;
    materials: Record<string, string>;
    fit: Record<string, number>;
    style: Record<string, unknown>;
  };
};

export interface UserPreferences {;
  userId: string;
  favoritePersonality: PersonalityMode;
  preferredClothingLevel: ClothingLevel;
  customPersonalities: Record<string, Partial<PersonalityConfig>>;
  savedOutfits: Record<string, ClothingConfiguration>;
  interactionHistory: {;
    personalityUsage: Record<PersonalityMode, number>;
    clothingPreferences: Record<ClothingLevel, number>;
    conversationPatterns: Record<string, unknown>;
  };
  settings: {;
    autoPersonalityAdaptation: boolean;
    rememberClothingChoices: boolean;
    enableVoiceInteraction: boolean;
    adaptToContext: boolean;
  ;
};
};

export interface SweetAthenaState {;
  personality: PersonalityConfig;
  clothing: ClothingConfiguration;
  interaction: {;
    mode: 'chat' | 'widget_assistance' | 'idle' | 'presentation';
    context: string;
    userEngagement: number;
    conversationTopic: string;
  ;
};
  performance: {;
    responseTime: number;
    qualityScore: number;
    userSatisfaction: number;
  ;
};
  status: {;
    connected: boolean;
    streaming: boolean;
    speaking: boolean;
    listening: boolean;
    processing: boolean;
  ;
};
};

export class SweetAthenaStateManager extends EventEmitter {;
  private currentState: SweetAthenaState;
  private userPreferences: UserPreferences | null = null;
  private pixelStreamingBridge: PixelStreamingBridge | null = null;
  private userId: string | null = null;
  private updateQueue: Array<() => Promise<void>> = [];
  private isProcessingQueue = false;
  // Predefined personality configurations;
  private readonly personalityConfigs: Record<PersonalityMode, PersonalityConfig> = {;
    sweet: {;
      mode: 'sweet';
      traits: { sweetness: 0.9, confidence: 0.6, playfulness: 0.7, caring: 0.8, shyness: 0.3 ;
};
      voice: { pitch: 1.1, speed: 1.0, emotion: 'caring' ;
};
      animation: { idleStyle: 'gentle_sway', gestureIntensity: 0.6, expressionStrength: 0.8 ;
};
      conversationStyle: { responseLength: 'medium', formality: 'friendly', emotiveness: 0.8 ;
};
    };
    shy: {;
      mode: 'shy';
      traits: { sweetness: 0.7, confidence: 0.3, playfulness: 0.4, caring: 0.8, shyness: 0.9 ;
};
      voice: { pitch: 0.9, speed: 0.8, emotion: 'timid' ;
};
      animation: { idleStyle: 'reserved_stance', gestureIntensity: 0.3, expressionStrength: 0.5 ;
};
      conversationStyle: { responseLength: 'short', formality: 'friendly', emotiveness: 0.6 ;
};
    };
    confident: {;
      mode: 'confident';
      traits: { sweetness: 0.6, confidence: 0.9, playfulness: 0.7, caring: 0.6, shyness: 0.1 ;
};
      voice: { pitch: 1.0, speed: 1.1, emotion: 'assertive' ;
};
      animation: { idleStyle: 'upright_stance', gestureIntensity: 0.8, expressionStrength: 0.9 ;
};
      conversationStyle: { responseLength: 'long', formality: 'professional', emotiveness: 0.7 ;
};
    };
    caring: {;
      mode: 'caring';
      traits: { sweetness: 0.8, confidence: 0.7, playfulness: 0.5, caring: 0.9, shyness: 0.2 ;
};
      voice: { pitch: 1.05, speed: 0.95, emotion: 'empathetic' ;
};
      animation: { idleStyle: 'attentive_lean', gestureIntensity: 0.7, expressionStrength: 0.8 ;
};
      conversationStyle: { responseLength: 'medium', formality: 'friendly', emotiveness: 0.9 ;
};
    };
    playful: {;
      mode: 'playful';
      traits: { sweetness: 0.7, confidence: 0.8, playfulness: 0.9, caring: 0.6, shyness: 0.2 ;
};
      voice: { pitch: 1.15, speed: 1.1, emotion: 'joyful' ;
};
      animation: { idleStyle: 'bouncy_idle', gestureIntensity: 0.9, expressionStrength: 1.0 ;
};
      conversationStyle: { responseLength: 'medium', formality: 'casual', emotiveness: 0.8 ;
};
    };
  };
  // Default clothing configurations;
  private readonly defaultClothingConfigs: Record<ClothingLevel, Partial<ClothingConfiguration>> = {;
    conservative: {;
      level: 'conservative';
      customization: { colors: {}, materials: {}, fit: {}, style: {} };
    };
    moderate: {;
      level: 'moderate';
      customization: { colors: {}, materials: {}, fit: {}, style: {} };
    };
    revealing: {;
      level: 'revealing';
      customization: { colors: {}, materials: {}, fit: {}, style: {} };
    };
    very_revealing: {;
      level: 'very_revealing';
      customization: { colors: {}, materials: {}, fit: {}, style: {} };
    };
  };
  constructor() {;
    super();
    thiscurrentState = {;
      personality: thispersonalityConfigssweet;
      clothing: {;
        level: 'moderate';
        items: { accessories: [] ;
};
        customization: { colors: {}, materials: {}, fit: {}, style: {} };
      };
      interaction: {;
        mode: 'idle';
        context: '';
        userEngagement: 0.5;
        conversationTopic: '';
      ;
};
      performance: {;
        responseTime: 0;
        qualityScore: 0.8;
        userSatisfaction: 0.8;
      ;
};
      status: {;
        connected: false;
        streaming: false;
        speaking: false;
        listening: false;
        processing: false;
      ;
};
    };
    thissetupEventHandlers();
  };

  /**;
   * Initialize the state manager;
   */;
  async initialize(userId: string, pixelStreamingBridge?: PixelStreamingBridge): Promise<void> {;
    try {;
      thisuserId = userId;
      thispixelStreamingBridge = pixelStreamingBridge || null;
      // Load user preferences;
      await thisloadUserPreferences();
      // Apply user's preferred settings;
      if (thisuserPreferences) {;
        await thissetPersonality(thisuserPreferencesfavoritePersonality);
        await thissetClothingLevel(thisuserPreferencespreferredClothingLevel);
      ;
};

      // Setup bridge event handlers if available;
      if (thispixelStreamingBridge) {;
        thissetupBridgeEventHandlers();
      };

      thisemit('initialized', thiscurrentState);
      loggerinfo('Sweet Athena State Manager initialized', undefined, { userId });
    } catch (error) {;
      loggererror('Failed to initialize Sweet Athena State Manager:', undefined, error instanceof Error ? errormessage : String(error);
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  /**;
   * Set avatar personality mode;
   */;
  async setPersonality(mode: PersonalityMode): Promise<void> {;
    try {;
      const oldPersonality = thiscurrentStatepersonalitymode;
      thiscurrentStatepersonality = { ..thispersonalityConfigs[mode] };
      // Apply custom modifications if user has them;
      if (thisuserPreferences?customPersonalities[mode]) {;
        thiscurrentStatepersonality = {;
          ..thiscurrentStatepersonality;
          ..thisuserPreferencescustomPersonalities[mode];
        };
      };

      // Update bridge if connected;
      if (thispixelStreamingBridge) {;
        await thispixelStreamingBridgesetPersonality(mode);
      };

      // Update interaction context;
      thiscurrentStateinteractioncontext = `personality_changed_from_${oldPersonality}_to_${mode}`;
      // Save preference;
      await thisupdateUserPreferences({ favoritePersonality: mode });
      // Track usage;
      if (thisuserPreferences) {;
        thisuserPreferencesinteractionHistorypersonalityUsage[mode] =;
          (thisuserPreferencesinteractionHistorypersonalityUsage[mode] || 0) + 1;
      };

      thisemit('personalityChanged', {;
        from: oldPersonality;
        to: mode;
        config: thiscurrentStatepersonality;
      });
      thisemit('stateChanged', thiscurrentState);
      loggerinfo('Personality changed', undefined, {;
        from: oldPersonality;
        to: mode;
        userId: thisuserId;
      });
    } catch (error) {;
      loggererror('Failed to set personality:', undefined, error instanceof Error ? errormessage : String(error);
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  /**;
   * Set clothing reveal level;
   */;
  async setClothingLevel(level: ClothingLevel): Promise<void> {;
    try {;
      const oldLevel = thiscurrentStateclothinglevel;
      thiscurrentStateclothinglevel = level;
      // Load appropriate clothing configuration;
      await thisloadClothingConfiguration(level);
      // Update bridge if connected;
      if (thispixelStreamingBridge) {;
        await thispixelStreamingBridgesetClothing({ level });
      };

      // Save preference;
      await thisupdateUserPreferences({ preferredClothingLevel: level });
      // Track usage;
      if (thisuserPreferences) {;
        thisuserPreferencesinteractionHistoryclothingPreferences[level] =;
          (thisuserPreferencesinteractionHistoryclothingPreferences[level] || 0) + 1;
      };

      thisemit('clothingLevelChanged', { from: oldLevel, to: level });
      thisemit('stateChanged', thiscurrentState);
      loggerinfo('Clothing level changed', undefined, {;
        from: oldLevel;
        to: level;
        userId: thisuserId;
      });
    } catch (error) {;
      loggererror('Failed to set clothing level:', undefined, error instanceof Error ? errormessage : String(error);
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  /**;
   * Customize specific clothing item;
   */;
  async customizeClothingItem(;
    category: keyof ClothingConfiguration['items'];
    customization: Partial<ClothingItem>;
  ): Promise<void> {;
    try {;
      if (category === 'accessories') {;
        // Handle accessories array;
        if (customizationid) {;
          const accessoryIndex = thiscurrentStateclothingitemsaccessoriesfindIndex(;
            (item) => itemid === customizationid;
          );
          if (accessoryIndex >= 0) {;
            thiscurrentStateclothingitemsaccessories[accessoryIndex] = {;
              ..thiscurrentStateclothingitemsaccessories[accessoryIndex];
              ..customization;
            } as ClothingItem;
          };
        };
      } else {;
        // Handle single item categories;
        const currentItem = thiscurrentStateclothingitems[category];
        if (currentItem) {;
          thiscurrentStateclothingitems[category] = {;
            ..currentItem;
            ..customization;
          } as ClothingItem;
        };
      };

      // Update bridge if connected;
      if (thispixelStreamingBridge) {;
        await thispixelStreamingBridgesetClothing({;
          customization: thiscurrentStateclothingcustomization;
        });
      };

      thisemit('clothingItemCustomized', { category, customization });
      thisemit('stateChanged', thiscurrentState);
    } catch (error) {;
      loggererror('Failed to customize clothing item:', undefined, error instanceof Error ? errormessage : String(error);
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  /**;
   * Set interaction mode;
   */;
  async setInteractionMode(;
    mode: SweetAthenaState['interaction']['mode'];
    context = '';
  ): Promise<void> {;
    try {;
      const oldMode = thiscurrentStateinteractionmode;
      thiscurrentStateinteractionmode = mode;
      thiscurrentStateinteractioncontext = context;
      // Adapt personality based on context if enabled;
      if (thisuserPreferences?settingsadaptToContext) {;
        await thisadaptPersonalityToContext(mode, context);
      };

      thisemit('interactionModeChanged', { from: oldMode, to: mode, context });
      thisemit('stateChanged', thiscurrentState);
    } catch (error) {;
      loggererror('Failed to set interaction mode:', undefined, error instanceof Error ? errormessage : String(error);
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  /**;
   * Update user engagement level;
   */;
  updateUserEngagement(engagement: number): void {;
    thiscurrentStateinteractionuserEngagement = Mathmax(0, Mathmin(1, engagement));
    thisemit('engagementChanged', thiscurrentStateinteractionuserEngagement);
  };

  /**;
   * Get current state;
   */;
  getCurrentState(): SweetAthenaState {;
    return { ..thiscurrentState };
  };

  /**;
   * Get available personality modes;
   */;
  getAvailablePersonalities(): PersonalityMode[] {;
    return Objectkeys(thispersonalityConfigs) as PersonalityMode[];
  };

  /**;
   * Get available clothing levels;
   */;
  getAvailableClothingLevels(): ClothingLevel[] {;
    return Objectkeys(thisdefaultClothingConfigs) as ClothingLevel[];
  };

  /**;
   * Save current configuration as user preset;
   */;
  async savePreset(name: string): Promise<void> {;
    if (!thisuserPreferences) return;
    try {;
      // Save personality preset;
      thisuserPreferencescustomPersonalities[name] = {;
        ..thiscurrentStatepersonality;
      ;
};
      // Save clothing preset;
      thisuserPreferencessavedOutfits[name] = {;
        ..thiscurrentStateclothing;
      };
      await thissaveUserPreferences();
      thisemit('presetSaved', {;
        name;
        personality: thiscurrentStatepersonality;
        clothing: thiscurrentStateclothing;
      });
    } catch (error) {;
      loggererror('Failed to save preset:', undefined, error instanceof Error ? errormessage : String(error);
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  /**;
   * Load user preset;
   */;
  async loadPreset(name: string): Promise<void> {;
    if (!thisuserPreferences) return;
    try {;
      const personalityPreset = thisuserPreferencescustomPersonalities[name];
      const clothingPreset = thisuserPreferencessavedOutfits[name];
      if (personalityPreset) {;
        thiscurrentStatepersonality = { ..personalityPreset } as PersonalityConfig;
      };

      if (clothingPreset) {;
        thiscurrentStateclothing = { ..clothingPreset };
      };

      // Update bridge;
      if (thispixelStreamingBridge) {;
        await thispixelStreamingBridgesetPersonality(thiscurrentStatepersonalitymode);
        await thispixelStreamingBridgesetClothing(thiscurrentStateclothing);
      };

      thisemit('presetLoaded', { name });
      thisemit('stateChanged', thiscurrentState);
    } catch (error) {;
      loggererror('Failed to load preset:', undefined, error instanceof Error ? errormessage : String(error);
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  /**;
   * Setup event handlers;
   */;
  private setupEventHandlers(): void {;
    // Handle performance updates;
    thison('performanceUpdate', (metrics) => {;
      thiscurrentStateperformance = { ..thiscurrentStateperformance, ..metrics };
    });
    // Handle status updates;
    thison('statusUpdate', (status) => {;
      thiscurrentStatestatus = { ..thiscurrentStatestatus, ..status };
    });
  };

  /**;
   * Setup bridge event handlers;
   */;
  private setupBridgeEventHandlers(): void {;
    if (!thispixelStreamingBridge) return;
    thispixelStreamingBridgeon('connected', () => {;
      thiscurrentStatestatusconnected = true;
      thisemit('statusUpdate', { connected: true });
    });
    thispixelStreamingBridgeon('disconnected', () => {;
      thiscurrentStatestatusconnected = false;
      thiscurrentStatestatusstreaming = false;
      thisemit('statusUpdate', { connected: false, streaming: false });
    });
    thispixelStreamingBridgeon('streamingStarted', () => {;
      thiscurrentStatestatusstreaming = true;
      thisemit('statusUpdate', { streaming: true });
    });
    thispixelStreamingBridgeon('voiceResponse', (data) => {;
      thiscurrentStatestatusspeaking = dataspeaking;
      thisemit('statusUpdate', { speaking: dataspeaking });
    });
    thispixelStreamingBridgeon('qualityUpdate', (quality) => {;
      thiscurrentStateperformanceresponseTime = qualitylatency;
      thisemit('performanceUpdate', { responseTime: qualitylatency });
    });
  };

  /**;
   * Load user preferences from database;
   */;
  private async loadUserPreferences(): Promise<void> {;
    if (!thisuserId) return;
    try {;
      const { data, error } = await supabase;
        from('sweet_athena_preferences');
        select('*');
        eq('user_id', thisuserId);
        single();
      if (error instanceof Error ? errormessage : String(error) & errorcode !== 'PGRST116') {;
        // Not found error;
        throw error instanceof Error ? errormessage : String(error);
      };

      if (data) {;
        thisuserPreferences = data;
      } else {;
        // Create default preferences;
        thisuserPreferences = {;
          userId: thisuserId;
          favoritePersonality: 'sweet';
          preferredClothingLevel: 'moderate';
          customPersonalities: {;
};
          savedOutfits: {;
};
          interactionHistory: {;
            personalityUsage: {} as Record<PersonalityMode, number>;
            clothingPreferences: {} as Record<ClothingLevel, number>;
            conversationPatterns: {;
};
          };
          settings: {;
            autoPersonalityAdaptation: true;
            rememberClothingChoices: true;
            enableVoiceInteraction: true;
            adaptToContext: true;
          ;
};
        };
        await thissaveUserPreferences();
      };
    } catch (error) {;
      loggererror('Failed to load user preferences:', undefined, error instanceof Error ? errormessage : String(error) // Continue with default preferences;
      thisuserPreferences = {;
        userId: thisuserId;
        favoritePersonality: 'sweet';
        preferredClothingLevel: 'moderate';
        customPersonalities: {;
};
        savedOutfits: {;
};
        interactionHistory: {;
          personalityUsage: {} as Record<PersonalityMode, number>;
          clothingPreferences: {} as Record<ClothingLevel, number>;
          conversationPatterns: {;
};
        };
        settings: {;
          autoPersonalityAdaptation: false;
          rememberClothingChoices: false;
          enableVoiceInteraction: true;
          adaptToContext: false;
        ;
};
      };
    };
  };

  /**;
   * Save user preferences to database;
   */;
  private async saveUserPreferences(): Promise<void> {;
    if (!thisuserPreferences || !thisuserId) return;
    try {;
      const { error instanceof Error ? errormessage : String(error)  = await supabasefrom('sweet_athena_preferences')upsert({;
        user_id: thisuserId;
        ..thisuserPreferences;
        updated_at: new Date()toISOString();
      });
      if (error instanceof Error ? errormessage : String(error){;
        throw error instanceof Error ? errormessage : String(error);
      };
    } catch (error) {;
      loggererror('Failed to save user preferences:', undefined, error instanceof Error ? errormessage : String(error)  ;
};
  };

  /**;
   * Update specific user preferences;
   */;
  private async updateUserPreferences(updates: Partial<UserPreferences>): Promise<void> {;
    if (!thisuserPreferences) return;
    thisuserPreferences = { ..thisuserPreferences, ..updates };
    await thissaveUserPreferences();
  };

  /**;
   * Load clothing configuration for specific level;
   */;
  private async loadClothingConfiguration(level: ClothingLevel): Promise<void> {;
    try {;
      // Load from database or use defaults;
      const defaultConfig = thisdefaultClothingConfigs[level];
      thiscurrentStateclothing = {;
        ..thiscurrentStateclothing;
        ..defaultConfig;
      } as ClothingConfiguration;
      // Apply saved outfit if available;
      const savedOutfitKey = `default_${level}`;
      if (thisuserPreferences?savedOutfits[savedOutfitKey]) {;
        thiscurrentStateclothing = {;
          ..thiscurrentStateclothing;
          ..thisuserPreferencessavedOutfits[savedOutfitKey];
        };
      };
    } catch (error) {;
      loggererror('Failed to load clothing configuration:', undefined, error instanceof Error ? errormessage : String(error)  ;
};
  };

  /**;
   * Adapt personality based on interaction context;
   */;
  private async adaptPersonalityToContext(;
    mode: SweetAthenaState['interaction']['mode'];
    context: string;
  ): Promise<void> {;
    if (!thisuserPreferences?settingsadaptToContext) return;
    try {;
      let suggestedPersonality: PersonalityMode | null = null;
      switch (mode) {;
        case 'widget_assistance':;
          suggestedPersonality = contextincludes('complex') ? 'confident' : 'caring';
          break;
        case 'chat':;
          suggestedPersonality = contextincludes('casual') ? 'playful' : 'sweet';
          break;
        case 'presentation':;
          suggestedPersonality = 'confident';
          break;
        default:;
          return, // No adaptation for idle mode;
      };

      if (suggestedPersonality && suggestedPersonality !== thiscurrentStatepersonalitymode) {;
        await thissetPersonality(suggestedPersonality);
        thisemit('personalityAdapted', { context, suggestedPersonality });
      };
    } catch (error) {;
      loggererror('Failed to adapt personality to context:', undefined, error instanceof Error ? errormessage : String(error)  ;
};
  };

  /**;
   * Cleanup resources;
   */;
  async destroy(): Promise<void> {;
    thisremoveAllListeners();
    thispixelStreamingBridge = null;
    thisuserPreferences = null;
    thisuserId = null;
  ;
};
};
;
export default SweetAthenaStateManager;