/**;
 * Configurable Reranking Pipeline;
 * Integrates multiple reranking strategies with the existing search infrastructure;
 */;

import type { SupabaseClient } from '@supabase/supabase-js';
import type { Logger } from 'winston';
import {;
  type RerankingMetrics;
  type RerankingOptions;
  RerankingService;
  type SearchResult;
} from './reranking-service';
import {;
  type MemorySearchResult;
  type MultiStageSearchOptions;
  MultiStageSearchSystem;
} from '../memory/multi_stage_search';
export interface PipelineConfig {;
  // Reranking configuration;
  enableReranking: boolean;
  rerankingMethod:;
    | 'cross_encoder';
    | 'llm_judge';
    | 'hybrid';
    | 'feature_based';
    | 'learned';
    | 'adaptive';
  rerankingThreshold: number;
  // Search configuration;
  searchStrategy: 'balanced' | 'precision' | 'recall' | 'speed';
  enableMultiStage: boolean;
  enableCache: boolean;
  // Performance tuning;
  maxInitialResults: number;
  maxFinalResults: number;
  diversityBoost: boolean;
  temporalWeighting: number;
  // Adaptive configuration;
  enableAdaptive: boolean;
  adaptiveThresholds: {;
    performanceThreshold: number;
    fallbackThreshold: number;
    upgradeThreshold: number;
  ;
};
  // Quality assurance;
  enableQualityFilters: boolean;
  minConfidenceScore: number;
  enableExplainability: boolean;
;
};

export interface PipelineResult<T = SearchResult> {;
  results: T[];
  pipeline: {;
    searchMetrics: any;
    rerankingMetrics: RerankingMetrics;
    totalTime: number;
    strategy: string;
    qualityScore: number;
  ;
};
  explanation?: {;
    searchStrategy: string;
    rerankingMethod: string;
    qualityFilters: string[];
    adaptiveAdjustments: string[];
  ;
};
};

export interface AdaptiveMetrics {;
  searchPerformance: number;
  rerankingEffectiveness: number;
  userSatisfaction: number;
  latency: number;
  cacheHitRate: number;
;
};

/**;
 * Configurable reranking pipeline with adaptive optimization;
 */;
export class RerankingPipeline {;
  private supabase: SupabaseClient;
  private logger: Logger;
  private rerankingService: RerankingService;
  private multiStageSearch: MultiStageSearchSystem;
  // Performance tracking;
  private performanceHistory: AdaptiveMetrics[] = [];
  private configHistory: {;
    config: PipelineConfig;
    timestamp: number;
    performance: AdaptiveMetrics;
  }[] = [];
  // Default configuration;
  private defaultConfig: PipelineConfig = {;
    enableReranking: true;
    rerankingMethod: 'hybrid';
    rerankingThreshold: 0.6;
    searchStrategy: 'balanced';
    enableMultiStage: true;
    enableCache: true;
    maxInitialResults: 50;
    maxFinalResults: 20;
    diversityBoost: true;
    temporalWeighting: 0.3;
    enableAdaptive: true;
    adaptiveThresholds: {;
      performanceThreshold: 0.7;
      fallbackThreshold: 0.4;
      upgradeThreshold: 0.85;
    ;
};
    enableQualityFilters: true;
    minConfidenceScore: 0.5;
    enableExplainability: false;
  ;
};
  constructor(supabase: SupabaseClient, logger: Logger) {;
    thissupabase = supabase;
    thislogger = logger;
    thisrerankingService = new RerankingService(supabase, logger);
    thismultiStageSearch = new MultiStageSearchSystem(supabase, logger);
  };

  /**;
   * Main search pipeline with configurable reranking;
   */;
  async search(;
    query: string;
    embedding?: number[];
    userConfig: Partial<PipelineConfig> = {;
};
  ): Promise<PipelineResult<MemorySearchResult>> {;
    const startTime = Datenow();
    const config = thismergeConfig(userConfig);
    thisloggerdebug(;
      `Starting pipeline search with strategy: ${configsearchStrategy}, reranking: ${configrerankingMethod}`;
    );
    try {;
      // Adaptive configuration adjustment;
      if (configenableAdaptive) {;
        configrerankingMethod = thisgetAdaptiveRerankingMethod(config);
        configsearchStrategy = thisgetAdaptiveSearchStrategy(config);
      };

      // Stage 1: Initial search;
      const searchOptions: MultiStageSearchOptions = {;
        query;
        embedding;
        maxResults: configmaxInitialResults;
        searchStrategy: configsearchStrategy;
        enableFallbackSearch: true;
        similarityThreshold: configrerankingThreshold;
      ;
};
      const searchResult = embedding;
        ? await thismultiStageSearchsearch(embedding, searchOptions);
        : await thisperformTextBasedSearch(query, searchOptions);
      // Stage 2: Reranking (if enabled);
      let rerankingMetrics: RerankingMetrics = {;
        originalResults: searchResultresultslength;
        finalResults: searchResultresultslength;
        rerankingTime: 0;
        method: 'none';
        cacheHit: false;
        averageScoreImprovement: 0;
        diversityScore: 0;
      ;
};
      let finalResults = searchResultresults;
      if (configenableReranking && searchResultresultslength > 0) {;
        const rerankingOptions: RerankingOptions = {;
          method: configrerankingMethod;
          query;
          maxResults: configmaxFinalResults;
          useCache: configenableCache;
          explainRanking: configenableExplainability;
          diversityBoost: configdiversityBoost;
        ;
};
        const rerankingResult = await thisrerankingServicererank(;
          query;
          thisconvertToSearchResults(searchResultresults);
          rerankingOptions;
        );
        rerankingMetrics = rerankingResultmetrics;
        finalResults = thisconvertFromSearchResults(rerankingResultresults);
      };

      // Stage 3: Quality filtering (if enabled);
      if (configenableQualityFilters) {;
        finalResults = thisapplyQualityFilters(finalResults, config);
      };

      // Limit final results;
      finalResults = finalResultsslice(0, configmaxFinalResults);
      // Calculate quality score;
      const qualityScore = thiscalculateQualityScore(finalResults, rerankingMetrics, config);
      // Record performance metrics;
      const totalTime = Datenow() - startTime;
      const pipelineMetrics = {;
        searchPerformance: searchResultmetricstotalSearchTime < 500 ? 0.8 : 0.6;
        rerankingEffectiveness: rerankingMetricsaverageScoreImprovement;
        userSatisfaction: qualityScore;
        latency: totalTime;
        cacheHitRate: searchResultmetricscacheHits > 0 ? 1.0 : 0.0;
      };
      thisrecordPerformance(pipelineMetrics, config);
      const result: PipelineResult<MemorySearchResult> = {;
        results: finalResults;
        pipeline: {;
          searchMetrics: searchResultmetrics;
          rerankingMetrics;
          totalTime;
          strategy: `${configsearchStrategy}_${configrerankingMethod}`;
          qualityScore;
        };
      };
      // Add explanation if requested;
      if (configenableExplainability) {;
        resultexplanation = thisgenerateExplanation(config, searchResult, rerankingMetrics);
      };

      thisloggerinfo(;
        `Pipeline search completed in ${totalTime}ms: ${finalResultslength} results, quality: ${qualityScoretoFixed(3)}`;
      );
      return result;
    } catch (error) {;
      thisloggererror('Pipeline search failed:', error instanceof Error ? errormessage : String(error);
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  /**;
   * Search knowledge entities with reranking;
   */;
  async searchKnowledgeEntities(;
    query: string;
    embedding: number[];
    userConfig: Partial<PipelineConfig> = {;
};
  ): Promise<PipelineResult> {;
    const config = thismergeConfig(userConfig);
    const startTime = Datenow();
    try {;
      // Use database function with reranking;
      const { data, error } = await thissupabaserpc('search_knowledge_entities', {;
        query_embedding: embedding;
        similarity_threshold: configrerankingThreshold;
        limit_count: configmaxFinalResults;
        query_text: query;
        enable_reranking: configenableReranking;
        rerank_method: configrerankingMethod;
      });
      if (error instanceof Error ? errormessage : String(error) throw error instanceof Error ? errormessage : String(error);

      const results = datamap((item: any) => ({;
        id: itemid;
        content`${itemname}: ${itemdescription || ''}`;
        similarity: itemsimilarity;
        rerankScore: itemrerank_score;
        rerankMethod: itemrerank_method;
        entityType: itementity_type;
        name: itemname;
        description: itemdescription;
        properties: itemproperties;
      }));
      const qualityScore = thiscalculateQualityScore(;
        results;
        {;
          originalResults: resultslength;
          finalResults: resultslength;
          rerankingTime: Datenow() - startTime;
          method: configrerankingMethod;
          cacheHit: false;
          averageScoreImprovement:;
            resultsreduce((sum: number, r: any) => sum + (rrerankScore - rsimilarity), 0) /;
            resultslength;
          diversityScore: thiscalculateEntityDiversity(results);
        ;
};
        config;
      );
      return {;
        results;
        pipeline: {;
          searchMetrics: { totalSearchTime: Datenow() - startTime ;
};
          rerankingMetrics: {;
            originalResults: resultslength;
            finalResults: resultslength;
            rerankingTime: Datenow() - startTime;
            method: configrerankingMethod;
            cacheHit: false;
            averageScoreImprovement: 0;
            diversityScore: thiscalculateEntityDiversity(results);
          ;
};
          totalTime: Datenow() - startTime;
          strategy: `knowledge_${configrerankingMethod}`;
          qualityScore;
        };
      };
    } catch (error) {;
      thisloggererror('Knowledge entity search failed:', error instanceof Error ? errormessage : String(error);
      throw error instanceof Error ? errormessage : String(error);
    };
  };

  /**;
   * Get optimized configuration based on current performance;
   */;
  getOptimizedConfig(baseConfig: Partial<PipelineConfig> = {}): PipelineConfig {;
    const config = thismergeConfig(baseConfig);
    if (!configenableAdaptive || thisperformanceHistorylength < 5) {;
      return config;
    };

    const recentPerformance = thisperformanceHistoryslice(-10);
    const avgPerformance = thiscalculateAveragePerformance(recentPerformance);
    // Adaptive adjustments based on performance;
    if (avgPerformancesearchPerformance < configadaptiveThresholdsperformanceThreshold) {;
      configsearchStrategy = 'speed';
      configmaxInitialResults = Mathmax(configmaxInitialResults * 0.8, 20);
    };

    if (avgPerformancererankingEffectiveness < 0.1) {;
      configrerankingMethod = 'feature_based'; // Fallback to simpler method;
    };

    if (avgPerformancelatency > 1000) {;
      configenableReranking = false; // Disable reranking if too slow;
      configenableMultiStage = false;
    };

    if (avgPerformancecacheHitRate < 0.3) {;
      configenableCache = true, // Force cache if hit rate is low;
    };
;
    return config;
  };

  /**;
   * Analyze pipeline performance and provide recommendations;
   */;
  analyzePerformance(): {;
    currentPerformance: AdaptiveMetrics;
    trends: Record<string, 'improving' | 'stable' | 'declining'>;
    recommendations: string[];
    configSuggestions: Partial<PipelineConfig>;
  } {;
    if (thisperformanceHistorylength < 5) {;
      return {;
        currentPerformance: thisgetDefaultMetrics();
        trends: {;
};
        recommendations: ['Not enough data for _analysis];
        configSuggestions: {;
};
      };
    };

    const recent = thisperformanceHistoryslice(-10);
    const older = thisperformanceHistoryslice(-20, -10);
    const current = thiscalculateAveragePerformance(recent);
    const previous = thiscalculateAveragePerformance(older);
    const trends = {;
      searchPerformance: thisgetTrend(currentsearchPerformance, previoussearchPerformance);
      rerankingEffectiveness: thisgetTrend(;
        currentrerankingEffectiveness;
        previousrerankingEffectiveness;
      );
      userSatisfaction: thisgetTrend(currentuserSatisfaction, previoususerSatisfaction);
      latency: thisgetTrend(previouslatency, currentlatency), // Reverse for latency;
      cacheHitRate: thisgetTrend(currentcacheHitRate, previouscacheHitRate);
    };
    const recommendations: string[] = [];
    const configSuggestions: Partial<PipelineConfig> = {};
    // Generate recommendations;
    if (trendssearchPerformance === 'declining') {;
      recommendationspush('Search performance is declining - consider optimizing search strategy');
      configSuggestionssearchStrategy = 'speed';
    };

    if (trendsrerankingEffectiveness === 'declining') {;
      recommendationspush('Reranking effectiveness is low - try different reranking method');
      configSuggestionsrerankingMethod = 'hybrid';
    };

    if (trendslatency === 'declining') {;
      recommendationspush(;
        'Response time is increasing - reduce result limits or disable features';
      );
      configSuggestionsmaxInitialResults = 30;
      configSuggestionsenableReranking = false;
    };

    if (trendscacheHitRate === 'declining') {;
      recommendationspush('Cache hit rate is low - review cache configuration');
      configSuggestionsenableCache = true;
    };

    if (recommendationslength === 0) {;
      recommendationspush('Pipeline performance is optimal');
    };
;
    return {;
      currentPerformance: current;
      trends;
      recommendations;
      configSuggestions;
    ;
};
  };

  // Private helper methods;
  private mergeConfig(userConfig: Partial<PipelineConfig>): PipelineConfig {;
    return { ..thisdefaultConfig, ..userConfig };
  };

  private async performTextBasedSearch(query: string, options: MultiStageSearchOptions) {;
    // For text-based search without embedding, use database text search;
    const { data, error } = await thissupabaserpc('search_memories_withcontext', {;
      query_text: query;
      agent_id: optionsagentFilter || null;
      importance_threshold: optionssimilarityThreshold || 0.3;
      limit_count: optionsmaxResults || 20;
      temporal_weight: 0.3;
      enable_reranking: false, // We'll handle reranking separately;
      rerank_method: 'none';
    });
    if (error instanceof Error ? errormessage : String(error) throw error instanceof Error ? errormessage : String(error);

    const results = datamap((item: any) => ({;
      id: itemid;
      contentitemcontent;
      serviceId: itemagent_id;
      memoryType: 'text_search';
      similarity: itemfinal_score;
      importanceScore: itemimportance;
      accessCount: 0;
      metadata: {;
};
    }));
    return {;
      results;
      metrics: {;
        totalSearchTime: 100;
        clusterSearchTime: 0;
        detailSearchTime: 100;
        clustersEvaluated: 0;
        memoriesEvaluated: resultslength;
        cacheHits: 0;
        searchStrategy: 'text_search';
        fallbackUsed: false;
      ;
};
    };
  };

  private convertToSearchResults(memoryResults: MemorySearchResult[]): SearchResult[] {;
    return memoryResultsmap((result) => ({;
      id: resultid;
      contentresultcontent;
      similarity: resultsimilarity;
      metadata: resultmetadata;
      importanceScore: resultimportanceScore;
      accessCount: resultaccessCount;
      recency: thiscalculateRecency(new Date());
    }));
  };

  private convertFromSearchResults(searchResults: SearchResult[]): MemorySearchResult[] {;
    return searchResultsmap((result) => ({;
      id: resultid;
      contentresultcontent;
      serviceId: resultmetadata?serviceId || 'unknown';
      memoryType: resultmetadata?memoryType || 'unknown';
      similarity: resultsimilarity;
      importanceScore: resultimportanceScore || 0.5;
      accessCount: resultaccessCount || 0;
      metadata: resultmetadata || {;
};
    }));
  };

  private applyQualityFilters(;
    results: MemorySearchResult[];
    config: PipelineConfig;
  ): MemorySearchResult[] {;
    return resultsfilter((result) => {;
      // Confidence score filter;
      const confidence = (result as any)confidence || resultsimilarity;
      if (confidence < configminConfidenceScore) {;
        return false;
      };

      // Content quality filters;
      if (resultcontent-length < 10) {;
        return false; // Too short;
      };

      if (resultcontent-length > 5000) {;
        return false; // Too long;
      };

      return true;
    });
  };

  private calculateQualityScore(;
    results: any[];
    rerankingMetrics: RerankingMetrics;
    config: PipelineConfig;
  ): number {;
    if (resultslength === 0) return 0;
    let qualityScore = 0;
    // Result count quality (not too few, not too many);
    const countScore = Mathmin(resultslength / configmaxFinalResults, 1.0);
    qualityScore += countScore * 0.2;
    // Average similarity quality;
    const avgSimilarity = resultsreduce((sum, r) => sum + rsimilarity, 0) / resultslength;
    qualityScore += avgSimilarity * 0.3;
    // Reranking improvement;
    qualityScore += Mathmax(rerankingMetricsaverageScoreImprovement, 0) * 0.2;
    // Diversity quality;
    qualityScore += rerankingMetricsdiversityScore * 0.2;
    // Performance quality (latency consideration);
    const performanceScore = rerankingMetricsrerankingTime < 500 ? 1.0 : 0.5;
    qualityScore += performanceScore * 0.1;
    return Mathmin(qualityScore, 1.0);
  };

  private calculateEntityDiversity(results: any[]): number {;
    if (resultslength === 0) return 0;
    const entityTypes = new Set(resultsmap((r) => rentityType || 'unknown'));
    return entityTypessize / resultslength;
  };

  private getAdaptiveRerankingMethod(config: PipelineConfig): PipelineConfig['rerankingMethod'] {;
    if (thisperformanceHistorylength < 3) return configrerankingMethod;
    const recentPerformance = thiscalculateAveragePerformance(thisperformanceHistoryslice(-5));
    if (recentPerformancelatency > 800) {;
      return 'feature_based'; // Faster method;
    };

    if (recentPerformancererankingEffectiveness < 0.1) {;
      return 'cross_encoder'; // More effective method;
    };

    return 'hybrid'; // Balanced approach;
  };

  private getAdaptiveSearchStrategy(config: PipelineConfig): PipelineConfig['searchStrategy'] {;
    if (thisperformanceHistorylength < 3) return configsearchStrategy;
    const recentPerformance = thiscalculateAveragePerformance(thisperformanceHistoryslice(-5));
    if (recentPerformancelatency > 1000) {;
      return 'speed';
    };

    if (recentPerformanceuserSatisfaction < 0.6) {;
      return 'recall';
    };

    return 'balanced';
  };

  private recordPerformance(metrics: AdaptiveMetrics, config: PipelineConfig): void {;
    thisperformanceHistorypush(metrics);
    thisconfigHistorypush({;
      config: { ..config ;
};
      timestamp: Datenow();
      performance: metrics;
    });
    // Keep only recent history (last 100 entries);
    if (thisperformanceHistorylength > 100) {;
      thisperformanceHistory = thisperformanceHistoryslice(-100);
    };

    if (thisconfigHistorylength > 100) {;
      thisconfigHistory = thisconfigHistoryslice(-100);
    };
  };

  private calculateAveragePerformance(metrics: AdaptiveMetrics[]): AdaptiveMetrics {;
    if (metricslength === 0) return thisgetDefaultMetrics();
    return {;
      searchPerformance: metricsreduce((sum, m) => sum + msearchPerformance, 0) / metricslength;
      rerankingEffectiveness:;
        metricsreduce((sum, m) => sum + mrerankingEffectiveness, 0) / metricslength;
      userSatisfaction: metricsreduce((sum, m) => sum + muserSatisfaction, 0) / metricslength;
      latency: metricsreduce((sum, m) => sum + mlatency, 0) / metricslength;
      cacheHitRate: metricsreduce((sum, m) => sum + mcacheHitRate, 0) / metricslength;
    };
  };

  private getTrend(current: number, previous: number): 'improving' | 'stable' | 'declining' {;
    const change = (current - previous) / previous;
    if (change > 0.1) return 'improving';
    if (change < -0.1) return 'declining';
    return 'stable';
  };

  private getDefaultMetrics(): AdaptiveMetrics {;
    return {;
      searchPerformance: 0.7;
      rerankingEffectiveness: 0.5;
      userSatisfaction: 0.6;
      latency: 300;
      cacheHitRate: 0.5;
    ;
};
  };

  private calculateRecency(date: Date): number {;
    const daysSince = (Datenow() - dategetTime()) / (1000 * 60 * 60 * 24);
    return Mathexp(-daysSince / 30); // 30-day decay;
  };

  private generateExplanation(;
    config: PipelineConfig;
    searchResult: any;
    rerankingMetrics: RerankingMetrics;
  ): PipelineResult['explanation'] {;
    const qualityFilters: string[] = [];
    const adaptiveAdjustments: string[] = [];
    if (configenableQualityFilters) {;
      qualityFilterspush(`Minimum confidence: ${configminConfidenceScore}`);
      qualityFilterspush('Content length validation');
    };

    if (configenableAdaptive) {;
      adaptiveAdjustmentspush('Method selection based on performance history');
      adaptiveAdjustmentspush('Dynamic threshold adjustment');
    };

    return {;
      searchStrategy: `${configsearchStrategy} (${searchResultmetrics?searchStrategy || 'standard'})`;
      rerankingMethod: `${configrerankingMethod} (improvement: ${rerankingMetricsaverageScoreImprovementtoFixed(3)})`;
      qualityFilters;
      adaptiveAdjustments;
    };
  };

  /**;
   * Get current pipeline statistics;
   */;
  getStatistics(): {;
    totalSearches: number;
    averageLatency: number;
    currentConfig: PipelineConfig;
    performanceTrends: Record<string, 'improving' | 'stable' | 'declining'>;
  } {;
    const _analysis= thisanalyzePerformance();
    return {;
      totalSearches: thisperformanceHistorylength;
      averageLatency: _analysiscurrentPerformancelatency;
      currentConfig: thisdefaultConfig;
      performanceTrends: _analysistrends;
    ;
};
  };

  /**;
   * Reset pipeline performance history;
   */;
  resetPerformanceHistory(): void {;
    thisperformanceHistory = [];
    thisconfigHistory = [];
  ;
};
};
;