import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';
import { LogContext, logger } from '../utils/enhanced-logger';
const app = express();
appuse(cors());
appuse(expressjson());
const OLLAMA_URL = processenvOLLAMA_URL || 'http://localhost:11434';
// Proxy endpoint for Supabase Studio;
apppost('/api/ai/sql', async (req, res) => {;
  try {;
    const { prompt, model = 'llama3.2:3b' } = reqbody;
    const response = await fetch(`${OLLAMA_URL}/api/generate`, {;
      method: 'POST';
      headers: { 'Content-Type': 'application/json' };
      body: JSONstringify({;
        model;
        prompt: `You are a PostgreSQL expert. Generate SQL for: ${prompt}. Return only SQL code.`;
        temperature: 0.1;
        stream: false})});
    const data = (await responsejson()) as { response?: string };
    resjson({ sql: dataresponse });
  } catch (error) {;
    loggererror('SQL generation failed', LogContextAPI, {;
      error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error) instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error)});
    resstatus(500)json({ error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error)});
  };
});
apppost('/api/ai/explain', async (req, res) => {;
  try {;
    const { sql, model = 'llama3.2:3b' } = reqbody;
    const response = await fetch(`${OLLAMA_URL}/api/generate`, {;
      method: 'POST';
      headers: { 'Content-Type': 'application/json' };
      body: JSONstringify({;
        model;
        prompt: `Explain this SQL query in simple terms: ${sql}`;
        temperature: 0.3;
        stream: false})});
    const data = (await responsejson()) as { response?: string };
    resjson({ explanation: dataresponse });
  } catch (error) {;
    loggererror('SQL explanation failed', LogContextAPI, {;
      error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error)});
    resstatus(500)json({ error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error)});
  };
});
const PORT = processenvOLLAMA_PROXY_PORT || 11435;
applisten(PORT, () => {;
  loggerinfo(`Ollama AI proxy running on port ${PORT}`);
});