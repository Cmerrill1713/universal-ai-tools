/**;
 * Debug Middleware for Universal AI Tools;
 *;
 * Development-focused middleware that provides comprehensive debugging capabilities;
 * verbose logging, and automatic debug session management for troubleshooting;
 */;
import type { NextFunction, Request, Response } from 'express';
import {;
  debugLog;
  debugTools;
  endDebugSession;
  startDebugSession;
  trackError;
} from '../utils/debug-tools';
import { LogContext, logger } from '../utils/enhanced-logger';
// Extend Express Request type to include debug capabilities;
declare global {;
  namespace Express {;
    interface Request {;
      debugSessionId?: string;
      debugTools: {;
        log: (level: string, message: string, context: LogContext, data?: any) => void;
        error instanceof Error ? errormessage : String(error) (error instanceof Error ? errormessage : String(error)Error, context: string, metadata?: Record<string, unknown>) => void;
        performance: {;
          start: (operation: string, metadata?: Record<string, unknown>) => string;
          end: (traceId: string, operation: string, metadata?: Record<string, unknown>) => void;
        };
        athena: (interactionData: any) => void;
      ;
};
    };
  };
};

export class DebugMiddleware {;
  // Main debug middleware - only active in development;
  static debugSession() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      // Only enable in development or when explicitly requested;
      if (processenvNODE_ENV !== 'development' && !reqheaders['x-debug-mode']) {;
        return next();
      };

      // Start debug session for this request;
      const component = DebugMiddlewaregetComponentFromPath(reqpath);
      const metadata = {;
        method: reqmethod;
        path: reqpath;
        user_agent: reqget('User-Agent');
        ip: reqip;
        ai_service: reqheaders['x-ai-service'];
        session_id: reqheaders['x-session-id'];
        initialMemory: processmemoryUsage();
        query: reqquery;
        headers: DebugMiddlewaresanitizeHeaders(reqheaders);
      };
      reqdebugSessionId = startDebugSession(component, metadata);
      // Add debug utilities to request;
      reqdebugTools = {;
        log: (level: string, message: string, context: LogContext, data?: any) => {;
          debugLog(reqdebugSessionId!, level, message: context, {;
            request_id: reqrequestId;
            ..data;
          });
        };
        error instanceof Error ? errormessage : String(error) (error instanceof Error ? errormessage : String(error)Error, context: string, metadata?: Record<string, unknown>) => {;
          trackError(reqdebugSessionId!, error instanceof Error ? errormessage : String(error) context, {;
            request_id: reqrequestId;
            method: reqmethod;
            path: reqpath;
            ..metadata;
          });
        };
        performance: {;
          start: (operation: string, metadata?: Record<string, unknown>) => {;
            return debugToolsstartPerformanceTrace(reqdebugSessionId!, operation, {;
              request_id: reqrequestId;
              ..metadata;
            });
          };
          end: (traceId: string, operation: string, metadata?: Record<string, unknown>) => {;
            debugToolsendPerformanceTrace(reqdebugSessionId!, traceId, operation, {;
              request_id: reqrequestId;
              ..metadata;
            });
          };
        };
        athena: (interactionData: any) => {;
          debugToolsdebugAthenaInteraction(reqdebugSessionId!, {;
            ..interactionData;
            requestId: reqrequestId;
            userAgent: reqget('User-Agent');
            sessionId: reqheaders['x-session-id'] as string;
          });
        };
      };
      // Log requeststart;
      reqdebugToolslog('info', `Request started: ${reqmethod} ${reqpath}`, LogContextAPI, {;
        query: reqquery;
        body_size: JSONstringify(reqbody || {})length;
      });
      // Handle response completion;
      reson('finish', async () => {;
        try {;
          reqdebugToolslog(;
            'info';
            `Request completed: ${reqmethod} ${reqpath}`;
            LogContextAPI;
            {;
              status_code: resstatusCode;
              duration: Datenow() - (reqprometheusStartTime || Datenow());
            ;
};
          );
          // End debug session and generate report;
          if (reqdebugSessionId) {;
            const reportPath = await endDebugSession(reqdebugSessionId);
            // Add debug report path to response headers for easy access;
            if (resheadersSent === false) {;
              ressetHeader('X-Debug-Report', reportPath);
            };

            loggerdebug('Debug session completed', LogContextSYSTEM, {;
              request_id: reqrequestId;
              debug_session: reqdebugSessionId;
              report_path: reportPath;
              component;
              status_code: resstatusCode;
            });
          };
        } catch (error) {;
          loggererror('Failed to complete debug session', LogContextSYSTEM, {;
            request_id: reqrequestId;
            debug_session: reqdebugSessionId;
            error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
          });
        };
      });
      next();
    };
  };

  // Verbose logging middleware;
  static verboseLogging() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      if (processenvDEBUG_LEVEL !== 'verbose' && processenvDEBUG_LEVEL !== 'trace') {;
        return next();
      };

      // Log detailed requestinformation;
      loggerdebug('Verbose requestlogging', LogContextAPI, {;
        request_id: reqrequestId;
        method: reqmethod;
        path: reqpath;
        query: reqquery;
        headers: DebugMiddlewaresanitizeHeaders(reqheaders);
        body: DebugMiddlewaresanitizeBody(reqbody);
        ip: reqip;
        user_agent: reqget('User-Agent');
        content_type: reqget('Content-Type');
        content_length: reqget('Content-Length');
        timestamp: new Date()toISOString();
      });
      // Override response methods to capture response data;
      const originalJson = resjson;
      resjson = function (body: any) {;
        loggerdebug('Verbose response logging', LogContextAPI, {;
          request_id: reqrequestId;
          status_code: resstatusCode;
          response_body: DebugMiddlewaresanitizeBody(body);
          headers: resgetHeaders();
          timestamp: new Date()toISOString();
        });
        return originalJsoncall(this, body);
      };
      next();
    };
  };

  // Sweet Athena debugging middleware;
  static athenaDebugger() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      if (!DebugMiddlewareisAthenaRequest(req)) {;
        return next();
      };

      // Add Athena-specific debugging;
      const athenaDebugData = {;
        interactionType:;
          reqbody?interaction_type || DebugMiddlewareinferInteractionType(reqpath);
        personalityMood: reqbody?personality_mood || reqquerypersonality_mood || 'sweet';
        sweetnessLevel: reqbody?sweetness_level || reqquerysweetness_level || 8;
        userInput: reqbody?message || reqbody?user_input;
        timestamp: new Date();
        requestPath: reqpath;
        requestMethod: reqmethod;
      };
      // Log Athena interaction start;
      loggerdebug('Sweet Athena interaction debug start', LogContextATHENA, {;
        request_id: reqrequestId;
        athena_debug: athenaDebugData;
        debug_session: reqdebugSessionId;
      });
      // Store start time for response time calculation;
      const athenaStartTime = Datenow();
      // Capture response for Athena debugging;
      const originalJson = resjson;
      resjson = function (body: any) {;
        const responseTime = Datenow() - athenaStartTime;
        // Debug Athena interaction if debug tools are available;
        if (reqdebugTools?athena) {;
          reqdebugToolsathena({;
            ..athenaDebugData;
            athenaResponse: body?response || body?message;
            responseTime;
            statusCode: resstatusCode;
            errors: resstatusCode >= 400 ? [body?error instanceof Error ? errormessage : String(error) | 'Unknown error instanceof Error ? errormessage : String(error) : undefined;
          });
        };

        loggerdebug('Sweet Athena interaction debug complete', LogContextATHENA, {;
          request_id: reqrequestId;
          response_time_ms: responseTime;
          status_code: resstatusCode;
          has_response: !!(body?response || body?message);
          debug_session: reqdebugSessionId;
        });
        return originalJsoncall(this, body);
      };
      next();
    };
  };

  // Performance debugging middleware;
  static performanceDebugger() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      if (processenvNODE_ENV === 'production' && !reqheaders['x-debug-performance']) {;
        return next();
      };

      const performanceData = {;
        startTime: Datenow();
        startMemory: processmemoryUsage();
        startCpu: processcpuUsage();
      };
      // Add performance tracking to request;
      reqdebugPerformance = {;
        data: performanceData;
        addMarker: (name: string, metadata?: Record<string, unknown>) => {;
          const marker = {;
            name;
            timestamp: Datenow();
            memoryUsage: processmemoryUsage();
            cpuUsage: processcpuUsage();
            metadata;
          };
          if (reqdebugTools?log) {;
            reqdebugToolslog(;
              'debug';
              `Performance marker: ${name}`;
              LogContextPERFORMANCE;
              marker;
            );
          };

          return marker;
        };
      };
      // Log performance data on response;
      reson('finish', () => {;
        const endTime = Datenow();
        const endMemory = processmemoryUsage();
        const endCpu = processcpuUsage(performanceDatastartCpu);
        const performanceSummary = {;
          total_duration: endTime - performanceDatastartTime;
          memory_delta: {;
            heap_used: endMemoryheapUsed - performanceDatastartMemoryheapUsed;
            heap_total: endMemoryheapTotal - performanceDatastartMemoryheapTotal;
            external: endMemoryexternal - performanceDatastartMemoryexternal;
            rss: endMemoryrss - performanceDatastartMemoryrss;
          };
          cpu_delta: {;
            user: endCpuuser;
            system: endCpusystem;
            total: endCpuuser + endCpusystem;
          ;
};
        };
        loggerdebug('Request performance summary', LogContextPERFORMANCE, {;
          request_id: reqrequestId;
          method: reqmethod;
          path: reqpath;
          status_code: resstatusCode;
          performance: performanceSummary;
          debug_session: reqdebugSessionId;
        });
        // Add performance header for client-side debugging;
        if (!resheadersSent) {;
          ressetHeader(;
            'X-Debug-Performance';
            JSONstringify({;
              duration: performanceSummarytotal_duration;
              memory_mb: Mathround(performanceSummarymemory_deltaheap_used / 1024 / 1024);
              cpu_ms: Mathround(performanceSummarycpu_deltatotal / 1000);
            });
          );
        };
      });
      next();
    };
  };

  // Test result aggregation middleware;
  static testResultAggregator() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      // Only active in test environment or when explicitly requested;
      if (processenvNODE_ENV !== 'test' && !reqheaders['x-test-mode']) {;
        return next();
      };

      // Add test result tracking to request;
      reqtestAggregator = {;
        recordResult: (;
          testSuite: string;
          testName: string;
          status: 'pass' | 'fail' | 'skip';
          duration: number;
          error instanceof Error ? errormessage : String(error)  string;
        ) => {;
          const testResult = {;
            testName;
            status;
            duration;
            error;
            timestamp: new Date();
            request_id: reqrequestId;
          };
          if (reqdebugTools?log) {;
            reqdebugToolslog(;
              'info';
              `Test result: ${testName} - ${status}`;
              LogContextTEST;
              testResult;
            );
          };

          // Store in test aggregation system;
          const existingAggregation = debugTools;
            getAllTestAggregations();
            find((a) => atestSuite === testSuite);
          if (existingAggregation) {;
            existingAggregationtestResultspush(testResult);
          } else {;
            debugToolsaggregateTestResults(testSuite, [testResult]);
          };

          return testResult;
        };
        getSummary: (testSuite: string) => {;
          return debugToolsgetAllTestAggregations()find((a) => atestSuite === testSuite);
        };
      };
      next();
    };
  };

  // Error debugging middleware;
  static errorDebugger() {;
    return (err: Error, req: Request, res: Response, next: NextFunction) => {;
      // Enhanced errordebugging in development;
      if (processenvNODE_ENV === 'development' || reqheaders['x-debug-errors']) {;
        // Track errorin debug session if available;
        if (reqdebugTools?error instanceof Error ? errormessage : String(error){;
          reqdebugToolserrorerr, 'middlewareerror instanceof Error ? errormessage : String(error) {;
            path: reqpath;
            method: reqmethod;
            query: reqquery;
            body: DebugMiddlewaresanitizeBody(reqbody);
          });
        };

        // Log detailed errorinformation;
        loggererror('Debug errordetails', LogContextSYSTEM, {;
          request_id: reqrequestId;
          debug_session: reqdebugSessionId;
          error instanceof Error ? errormessage : String(error){;
            name: errname;
            message: errmessage;
            stack: errstack;
          ;
};
          request{;
            method: reqmethod;
            path: reqpath;
            query: reqquery;
            headers: DebugMiddlewaresanitizeHeaders(reqheaders);
            body: DebugMiddlewaresanitizeBody(reqbody);
          ;
};
          response: {;
            status_code: resstatusCode;
            headers: resgetHeaders();
          ;
};
        });
        // Add debug information to errorresponse in development;
        if (processenvNODE_ENV === 'development') {;
          resstatus(500)json({;
            error instanceof Error ? errormessage : String(error) errmessage;
            stack: errstack;
            debug_session: reqdebugSessionId;
            request_id: reqrequestId;
            timestamp: new Date()toISOString();
          });
          return;
        };
      };

      next(err);
    };
  };

  // Helper methods;
  private static getComponentFromPath(path: string): string {;
    if (pathincludes('/athena') || pathincludes('/assistant')) return 'sweet-athena';
    if (pathincludes('/memory')) return 'memory-system';
    if (pathincludes('/orchestration')) return 'dspy-orchestration';
    if (pathincludes('/tools')) return 'tools-system';
    if (pathincludes('/knowledge')) return 'knowledge-system';
    if (pathincludes('/context')) return 'context-system';
    return 'general-api';
  };

  private static isAthenaRequest(req: Request): boolean {;
    return (;
      reqpathincludes('/athena') ||;
      reqpathincludes('/assistant') ||;
      reqpathincludes('/conversation') ||;
      reqheaders['x-ai-service'] === 'sweet-athena';
    );
  };

  private static inferInteractionType(path: string): string {;
    if (pathincludes('/chat')) return 'conversation';
    if (pathincludes('/avatar')) return 'avatar_animation';
    if (pathincludes('/teach')) return 'teach_me';
    if (pathincludes('/memory')) return 'memory_access';
    return 'general';
  };

  private static sanitizeHeaders(headers: any): any {;
    const sanitized = { ..headers };
    const sensitiveHeaders = [;
      'authorization';
      'x-api-key';
      'cookie';
      'x-auth-token';
      'x-secret-key';
      'x-private-key';
      'password';
    ];
    sensitiveHeadersforEach((header) => {;
      if (sanitized[header]) {;
        sanitized[header] = '[REDACTED]';
      };
    });
    return sanitized;
  };

  private static sanitizeBody(body: any): any {;
    if (!body || typeof body !== 'object') {;
      return body;
    };

    const sanitized = { ..body };
    const sensitiveFields = [;
      'password';
      'secret';
      'token';
      'key';
      'apiKey';
      'authToken';
      'privateKey';
      'secretKey';
      'accessToken';
      'refreshToken';
    ];
    sensitiveFieldsforEach((field) => {;
      if (sanitized[field]) {;
        sanitized[field] = '[REDACTED]';
      };
    });
    return sanitized;
  };
};

// Extend Express Request interface for debug capabilities;
declare module 'express-serve-static-core' {;
  interface Request {;
    debugPerformance?: {;
      data: any;
      addMarker: (name: string, metadata?: Record<string, unknown>) => any;
    };
    testAggregator?: {;
      recordResult: (;
        testSuite: string;
        testName: string;
        status: 'pass' | 'fail' | 'skip';
        duration: number;
        error instanceof Error ? errormessage : String(error)  string;
      ) => any;
      getSummary: (testSuite: string) => any;
    ;
};
  };
};

export default DebugMiddleware;