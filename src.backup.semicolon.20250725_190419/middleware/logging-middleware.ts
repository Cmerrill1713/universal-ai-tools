/**;
 * Logging Middleware for Universal AI Tools;
 *;
 * Comprehensive requestresponse logging with performance monitoring;
 * error tracking, and specialized Sweet Athena interaction logging;
 */;
import type { NextFunction, Request, Response } from 'express';
import { LogContext, enhancedLogger, logger } from '../utils/enhanced-logger';
import { v4 as uuidv4 } from 'uuid';
// Extend Express Request type to include logging data;
declare global {;
  namespace Express {;
    interface Request {;
      timerId?: string;
      logger?: typeof logger;
    ;
};
  };
};

interface RequestMetadata {;
  user_agent?: string;
  ip_address?: string;
  user_id?: string;
  session_id?: string;
  api_key?: string;
  ai_service?: string;
  request_size: number;
  response_size?: number;
;
};

interface SweetAthenaRequestData {;
  interaction_type?: string;
  personality_mood?: string;
  sweetness_level?: number;
  userinput string;
;
};

export class LoggingMiddleware {;
  // Main requestlogging middleware;
  static requestLogger() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      // Generate unique requestID;
      reqrequestId = uuidv4();
      reqstartTime = Datenow();
      reqtimerId = loggerstartTimer(`request_${reqmethod}_${reqpath}`);
      reqlogger = logger;
      // Add requestID to response headers for debugging;
      ressetHeader('X-Request-ID', reqrequestId);
      // Extract requestmetadata;
      const metadata: RequestMetadata = {;
        user_agent: reqget('User-Agent');
        ip_address: reqip || reqconnectionremoteAddress;
        user_id: reqheaders['x-user-id'] as string;
        session_id: reqheaders['x-session-id'] as string;
        api_key: reqheaders['x-api-key'] as string;
        ai_service: reqheaders['x-ai-service'] as string;
        request_size: JSONstringify(reqbody || {})length;
      };
      // Log incoming request;
      loggerinfo(`Incoming ${reqmethod} ${reqpath}`, LogContextAPI, {;
        request_id: reqrequestId;
        method: reqmethod;
        path: reqpath;
        query: reqquery;
        headers: LoggingMiddlewaresanitizeHeaders(reqheaders);
        metadata;
        body_preview: LoggingMiddlewaresanitizeBody(reqbody);
      });
      // Special handling for Sweet Athena requests;
      if (LoggingMiddlewareisAthenaRequest(req)) {;
        LoggingMiddlewarelogAthenaRequestStart(req);
      };

      // Override resjson to capture response data;
      const originalJson = resjson;
      resjson = function (body: any) {;
        const responseSize = JSONstringify(body)length;
        metadataresponse_size = responseSize;
        // Log response;
        LoggingMiddlewarelogResponse(req, res, body, metadata);
        return originalJsoncall(this, body);
      };
      // Override ressend to capture non-JSON responses;
      const originalSend = ressend;
      ressend = function (body: any) {;
        const responseSize = typeof body === 'string' ? bodylength : JSONstringify(body)length;
        metadataresponse_size = responseSize;
        LoggingMiddlewarelogResponse(req, res, body, metadata);
        return originalSendcall(this, body);
      };
      // Handle response finish event;
      reson('finish', () => {;
        LoggingMiddlewarelogRequestCompletion(req, res, metadata);
      });
      next();
    };
  };

  // Error logging middleware (should be last);
  static errorLogger() {;
    return (err: Error, req: Request, res: Response, next: NextFunction) => {;
      const errorTracking = loggertrackError(err, LogContextAPI, {;
        request_id: reqrequestId;
        method: reqmethod;
        path: reqpath;
        user_id: reqheaders['x-user-id'];
        session_id: reqheaders['x-session-id'];
        request_body: LoggingMiddlewaresanitizeBody(reqbody);
      });
      // Special handling for Sweet Athena errors;
      if (LoggingMiddlewareisAthenaRequest(req)) {;
        loggererror('Sweet Athena interaction failed', LogContextATHENA, {;
          error_tracking: errorTracking;
          interaction_data: LoggingMiddlewareextractAthenaData(req);
          user_impact: 'high', // Athena errors significantly impact user experience;
        });
      };

      // End performance timer for failed requests;
      if (reqtimerId) {;
        loggerendTimer(;
          reqtimerId;
          `request_${reqmethod}_${reqpath}_ERROR`;
          LogContextPERFORMANCE;
          {;
            error instanceof Error ? errormessage : String(error) true;
            error_type: errname;
            request_id: reqrequestId;
          ;
};
        );
      };

      next(err);
    };
  };

  // Database operation logging middleware;
  static databaseLogger() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      // Add database operation tracking to request;
      if (reqlogger) {;
        reqloggerlogDatabaseOperation = (;
          operation: string;
          table: string;
          duration: number;
          details?: Record<string, unknown>;
        ) => {;
          loggerlogDatabaseOperation(operation, table, duration, {;
            request_id: reqrequestId;
            ..details;
          });
        };
      };

      next();
    };
  };

  // Memory operation logging middleware;
  static memoryLogger() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      // Add memory operation tracking to request;
      if (reqlogger) {;
        reqloggerlogMemoryOperation = (operation: string, details: Record<string, unknown>) => {;
          loggerlogMemoryOperation(operation, {;
            request_id: reqrequestId;
            ..details;
          });
        };
      };

      next();
    };
  };

  // Sweet Athena conversation logging middleware;
  static athenaConversationLogger() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      if (LoggingMiddlewareisAthenaRequest(req)) {;
        // Add Athena-specific logging methods to request;
        if (reqlogger) {;
          reqloggerlogAthenaInteraction = (interaction) => {;
            loggerlogAthenaInteraction({;
              ..interaction;
              session_id: (reqheaders['x-session-id'] as string) || reqrequestId || 'unknown';
            });
          };
          reqloggerlogConversationTurn = (;
            userInput: string;
            athenaResponse: string;
            sessionId?: string;
            metadata?: Record<string, unknown>;
          ) => {;
            loggerlogConversationTurn(;
              userInput;
              athenaResponse;
              sessionId || reqrequestId || 'unknown';
              {;
                request_id: reqrequestId;
                ..metadata;
              ;
};
            );
          };
        };
      };

      next();
    };
  };

  // Security event logging middleware;
  static securityLogger() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      // Add security logging to requestwithout calling detectSuspiciousActivity to avoid recursion);
      if (reqlogger) {;
        reqloggerlogSecurityEvent = (;
          event: string;
          severity: 'low' | 'medium' | 'high' | 'critical';
          details: Record<string, unknown>;
        ) => {;
          loggerlogSecurityEvent(event, severity, {;
            request_id: reqrequestId;
            ip_address: reqip;
            user_agent: reqget('User-Agent');
            path: reqpath;
            method: reqmethod;
            ..details;
          });
        };
      };

      next();
    };
  };

  // Private helper methods;
  private static logResponse(req: Request, res: Response, body: any, metadata: RequestMetadata) {;
    const isError = resstatusCode >= 400;
    const context = isError ? LogContextAPI : LogContextAPI;
    loggerinfo(`Response ${reqmethod} ${reqpath} - ${resstatusCode}`, context, {;
      request_id: reqrequestId;
      status_code: resstatusCode;
      response_size: metadataresponse_size;
      response_preview: LoggingMiddlewaresanitizeBody(body);
      headers: LoggingMiddlewaresanitizeHeaders(resgetHeaders());
      metadata;
    });
    // Log full response in debug mode for Athena requests;
    if (processenvNODE_ENV !== 'production' && LoggingMiddlewareisAthenaRequest(req)) {;
      loggerdebug(`Full Athena response`, LogContextATHENA, {;
        request_id: reqrequestId;
        full_response: body;
      });
    };
  };

  private static logRequestCompletion(req: Request, res: Response, metadata: RequestMetadata) {;
    const duration = Datenow() - (reqstartTime || Datenow());
    // End performance timer;
    if (reqtimerId) {;
      loggerendTimer(reqtimerId, `request_${reqmethod}_${reqpath}`, LogContextPERFORMANCE, {;
        status_code: resstatusCode;
        request_id: reqrequestId;
        ..metadata;
      });
    };

    // Log API requestwith performance data;
    loggerlogAPIRequest(reqmethod, reqpath, resstatusCode, duration, {;
      request_id: reqrequestId;
      ..metadata;
    });
    // Special completion logging for Sweet Athena;
    if (LoggingMiddlewareisAthenaRequest(req)) {;
      LoggingMiddlewarelogAthenaRequestCompletion(req, res, duration);
    };
  };

  private static logAthenaRequestStart(req: Request) {;
    const athenaData = LoggingMiddlewareextractAthenaData(req);
    loggerinfo('Sweet Athena interaction started', LogContextATHENA, {;
      request_id: reqrequestId;
      interaction_data: athenaData;
      endpoint: reqpath;
      user_session: reqheaders['x-session-id'];
    });
  };

  private static logAthenaRequestCompletion(req: Request, res: Response, duration: number) {;
    const athenaData = LoggingMiddlewareextractAthenaData(req);
    loggerinfo('Sweet Athena interaction completed', LogContextATHENA, {;
      request_id: reqrequestId;
      duration_ms: duration;
      status_code: resstatusCode;
      success: resstatusCode < 400;
      interaction_data: athenaData;
      performance_category: LoggingMiddlewarecategorizePerfomance(duration);
    });
  };

  private static isAthenaRequest(req: Request): boolean {;
    return (;
      reqpathincludes('/athena') ||;
      reqpathincludes('/assistant') ||;
      reqpathincludes('/conversation') ||;
      reqheaders['x-ai-service'] === 'sweet-athena';
    );
  };

  private static extractAthenaData(req: Request): SweetAthenaRequestData {;
    return {;
      interaction_type: reqbody?interaction_type || (reqqueryinteraction_type as string);
      personality_mood: reqbody?personality_mood || (reqquerypersonality_mood as string);
      sweetness_level:;
        reqbody?sweetness_level ||;
        (reqquerysweetness_level ? Number(reqquerysweetness_level) : undefined);
      user_inputreqbody?message || reqbody?user_input| reqbody?query;
    ;
};
  };

  private static sanitizeHeaders(headers: any): any {;
    const sanitized = { ..headers };
    // Remove sensitive headers;
    const sensitiveHeaders = [;
      'authorization';
      'x-api-key';
      'cookie';
      'x-auth-token';
      'x-secret-key';
      'x-private-key';
      'password';
    ];
    sensitiveHeadersforEach((header) => {;
      if (sanitized[header]) {;
        sanitized[header] = '[REDACTED]';
      };
    });
    return sanitized;
  };

  private static sanitizeBody(body: any): any {;
    if (!body || typeof body !== 'object') {;
      return body;
    };

    const sanitized = { ..body };
    // Remove sensitive fields;
    const sensitiveFields = [;
      'password';
      'secret';
      'token';
      'key';
      'apiKey';
      'authToken';
      'privateKey';
      'secretKey';
      'accessToken';
      'refreshToken';
    ];
    sensitiveFieldsforEach((field) => {;
      if (sanitized[field]) {;
        sanitized[field] = '[REDACTED]';
      };
    });
    // Truncate long strings for preview;
    Objectkeys(sanitized)forEach((key) => {;
      if (typeof sanitized[key] === 'string' && sanitized[key]length > 200) {;
        sanitized[key] = `${sanitized[key]substring(0, 200)}... [TRUNCATED]`;
      };
    });
    return sanitized;
  };

  private static detectSuspiciousActivity(req: Request) {;
    // Rate limiting checks;
    const userAgent = reqget('User-Agent');
    const ip = reqip || reqconnectionremoteAddress;
    // Check for bot-like behavior;
    if (!userAgent || userAgentlength < 10) {;
      loggerlogSecurityEvent('Suspicious User Agent', 'medium', {;
        ip_address: ip;
        user_agent: userAgent;
        path: reqpath;
      });
    };

    // Check for SQL injection attempts;
    const queryString = JSONstringify(reqquery);
    const bodyString = JSONstringify(reqbody);
    const sqlPatterns = /'.*union.*select|'.*or.*1=1|'.*drop.*table|'.*insert.*into/i;
    if (sqlPatternstest(queryString) || sqlPatternstest(bodyString)) {;
      loggerlogSecurityEvent('Potential SQL Injection Attempt', 'critical', {;
        ip_address: ip;
        user_agent: userAgent;
        path: reqpath;
        query: reqquery;
        body_preview: LoggingMiddlewaresanitizeBody(reqbody);
      });
    };

    // Check for XSS attempts;
    const xssPatterns = /<script|javascript:|on\w+=/i;
    if (xssPatternstest(queryString) || xssPatternstest(bodyString)) {;
      loggerlogSecurityEvent('Potential XSS Attempt', 'high', {;
        ip_address: ip;
        user_agent: userAgent;
        path: reqpath;
      });
    };
  };

  private static categorizePerfomance(duration: number): string {;
    if (duration < 100) return 'excellent';
    if (duration < 500) return 'good';
    if (duration < 1000) return 'acceptable';
    if (duration < 2000) return 'slow';
    return 'very_slow';
  };
};

export default LoggingMiddleware;