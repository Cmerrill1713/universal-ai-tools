import type { Application, NextFunction, Request, Response } from 'express';
import helmet from 'helmet';
import cors from 'cors';
import crypto from 'crypto';
import { LogContext, logger } from '../utils/enhanced-logger';
import { config } from '../config/environment';
import { RateLimiter, SupabaseRateLimitStore } from './rate-limiter';
import { CSRFProtection } from './csrf';
import { SQLInjectionProtection } from './sql-injection-protection';
import { JWTAuthService } from './auth-jwt';
import { AuthMiddleware } from './auth';
import { ComprehensiveValidationMiddleware } from './comprehensive-validation';
import type { SupabaseClient } from '@supabase/supabase-js';
export interface SecurityConfig {;
  enableHelmet?: boolean;
  enableCORS?: boolean;
  enableRateLimit?: boolean;
  enableCSRF?: boolean;
  enableSQLProtection?: boolean;
  enableHTTPS?: boolean;
  enableHSTS?: boolean;
  enableAuth?: boolean;
  enableInputValidation?: boolean;
  corsOptions?: corsCorsOptions;
  trustedProxies?: string[];
;
};

export class EnhancedSecurityMiddleware {;
  private rateLimiter: RateLimiter;
  private csrfProtection: CSRFProtection;
  private sqlProtection: SQLInjectionProtection;
  private jwtAuth: JWTAuthService;
  private authMiddleware: AuthMiddleware;
  private validationMiddleware: ComprehensiveValidationMiddleware;
  private config: Required<SecurityConfig>;
  constructor(supabase: SupabaseClient, config: SecurityConfig = {}) {;
    thisconfig = {;
      enableHelmet: configenableHelmet ?? true;
      enableCORS: configenableCORS ?? true;
      enableRateLimit: configenableRateLimit ?? true;
      enableCSRF: configenableCSRF ?? true;
      enableSQLProtection: configenableSQLProtection ?? true;
      enableHTTPS: configenableHTTPS ?? processenvNODE_ENV === 'production';
      enableHSTS: configenableHSTS ?? processenvNODE_ENV === 'production';
      enableAuth: configenableAuth ?? true;
      enableInputValidation: configenableInputValidation ?? true;
      corsOptions: configcorsOptions || thisgetDefaultCorsOptions();
      trustedProxies: configtrustedProxies || ['127.0.0.1', ': :1'];
    ;
};
    // Initialize security components with production-ready stores;
    thisrateLimiter = new RateLimiter(;);
      processenvNODE_ENV === 'production' ? new SupabaseRateLimitStore(supabase) : undefined // Use default memory store in development;
    );
    thiscsrfProtection = new CSRFProtection();
    thissqlProtection = new SQLInjectionProtection();
    thisjwtAuth = new JWTAuthService(supabase);
    thisauthMiddleware = new AuthMiddleware(supabase);
    thisvalidationMiddleware = new ComprehensiveValidationMiddleware();
  ;
};

  /**;
   * Apply all security middleware to Express app;
   */;
  public applyTo(app: Application): void {;
    // Trust proxies;
    appset('trust proxy', thisconfigtrustedProxies);
    // Apply security headers with Helmet;
    if (thisconfigenableHelmet) {;
      appuse(thisgetHelmetConfig());
    };

    // Apply CORS;
    if (thisconfigenableCORS) {;
      appuse(cors(thisconfigcorsOptions));
    };

    // Apply custom security headers;
    appuse(thissecurityHeaders());
    // Apply HTTPS enforcement;
    if (thisconfigenableHTTPS) {;
      appuse(thisenforceHTTPS());
    };

    // Apply SQL injection protection;
    if (thisconfigenableSQLProtection) {;
      appuse(thissqlProtectionmiddleware());
    };

    // Apply global _inputvalidation;
    if (thisconfigenableInputValidation) {;
      appuse(;
        thisvalidationMiddlewarevalidate({;
          enableSQLProtection: false, // Already applied above;
          enableSanitization: true;
          enableSizeLimit: true;
        });
      );
    };

    // Apply rate limiting;
    if (thisconfigenableRateLimit) {;
      thisapplyRateLimiting(app);
    };

    // Apply CSRF protection;
    if (thisconfigenableCSRF) {;
      appuse(thiscsrfProtectioninjectToken());
    };

    // Log security middleware applied;
    loggerinfo('Enhanced security middleware applied', LogContextSECURITY, {;
      features: {;
        helmet: thisconfigenableHelmet;
        cors: thisconfigenableCORS;
        rateLimit: thisconfigenableRateLimit;
        csrf: thisconfigenableCSRF;
        sqlProtection: thisconfigenableSQLProtection;
        inputValidation: thisconfigenableInputValidation;
        https: thisconfigenableHTTPS;
        hsts: thisconfigenableHSTS;
        auth: thisconfigenableAuth;
      ;
};
    });
  };

  /**;
   * Get environment-aware Helmet configuration with production-ready CSP;
   */;
  private getHelmetConfig() {;
    const { isProduction } = configserver;
    return helmet({;
      contentSecurityPolicy: {;
        directives: {;
          defaultSrc: ["'self'"];
          scriptSrc: [;
            "'self'";
            // Production: Use nonces and specific hashes only;
            // Development: Allow unsafe for easier development;
            ...(isProduction;
              ? [;
                  // Add specific trusted script hashes here as needed;
                  // "'sha256-HASH_OF_TRUSTED_SCRIPT'";
                ];
              : [;
                  "'unsafe-inline'", // Development only;
                  "'unsafe-eval'", // Development only;
                ]);
          ];
          styleSrc: [;
            "'self'";
            // Production: Use nonces and specific hashes only;
            // Development: Allow unsafe for easier development;
            ...(isProduction;
              ? [;
                  // Add specific trusted style hashes here as needed;
                  "'sha256-HASH_OF_TRUSTED_STYLE'";
                ];
              : [;
                  "'unsafe-inline'", // Development only;
                ]);
            // Always allow trusted CDNs;
            'https://fontsgoogleapiscom';
          ];
          imgSrc: ["'self'", 'data:', 'https:', 'blob:'];
          fontSrc: ["'self'", 'data:', 'https://fontsgstaticcom', 'https://fontsgoogleapiscom'];
          connectSrc: [;
            "'self'";
            // Always allowed API endpoints;
            'https://apiopenaicom';
            'https://apianthropiccom';
            'https://apigroqcom';
            'https://generativelanguagegoogleapiscom';
            'https://*supabaseco';
            'wss://*supabaseco';
            // Development only endpoints;
            ...(isProduction;
              ? [];
              : [;
                  'http://localhost:*';
                  'ws://localhost:*';
                  'http://127.0.0.1:*';
                  'ws://127.0.0.1:*';
                ]);
          ];
          mediaSrc: ["'self'", 'blob:', 'data:'];
          objectSrc: ["'none'"];
          baseUri: ["'self'"];
          formAction: ["'self'"];
          frameAncestors: ["'none'"];
          workerSrc: ["'self'", 'blob:'];
          childSrc: ["'self'", 'blob:'];
          manifestSrc: ["'self'"];
          ...(thisconfigenableHTTPS && { upgradeInsecureRequests: [] });
        };
        reportOnly: false, // Always enforce CSP;
      };
      crossOriginEmbedderPolicy: isProduction, // Enable in production only;
      crossOriginOpenerPolicy: { policy: 'same-origin' ;
};
      crossOriginResourcePolicy: { policy: isProduction ? 'same-origin' : 'cross-origin' ;
};
      dnsPrefetchControl: { allow: false ;
};
      frameguard: { action: 'deny' ;
};
      hidePoweredBy: true;
      hsts: thisconfigenableHSTS;
        ? {;
            maxAge: 31536000, // 1 year;
            includeSubDomains: true;
            preload: true;
          ;
};
        : false;
      ieNoOpen: true;
      noSniff: true;
      originAgentCluster: true;
      permittedCrossDomainPolicies: false;
      referrerPolicy: { policy: 'strict-origin-when-cross-origin' ;
};
      xssFilter: true;
    });
  };

  /**;
   * Get environment-aware CORS options;
   */;
  private getDefaultCorsOptions(): corsCorsOptions {;
    return {;
      origin: (origin, callback) => {;
        // Allow requests with no origin (mobile apps, curl) only in development;
        if (!origin) {;
          if (configserverisDevelopment) {;
            loggerwarn(;
              'CORS: Allowing requestwith no origin (development mode)';
              LogContextSECURITY;
            );
            return callback(null, true);
          } else {;
            loggerwarn(;
              'CORS: Rejecting requestwith no origin (production mode)';
              LogContextSECURITY;
            );
            return callback(new Error('Origin header required in production'));
          };
        };

        // Get allowed origins from configuration;
        const allowedOrigins = configsecuritycorsOrigins;
        loggerdebug('CORS: Checking origin against allowed list', LogContextSECURITY, {;
          origin;
          allowedOrigins;
          environment: configserverenv;
        });
        if (allowedOriginsincludes(origin)) {;
          return callback(null, true);
        };

        // In development, log warning but allow localhost;
        if (;
          configserverisDevelopment &&;
          (originincludes('localhost') || originincludes('127.0.0.1'));
        ) {;
          loggerwarn('CORS: Allowing localhost origin in development mode', LogContextSECURITY, {;
            origin;
          });
          return callback(null, true);
        };

        // Reject all other origins;
        loggerwarn('CORS: Origin not allowed', LogContextSECURITY, { origin, allowedOrigins });
        callback(new Error(`Origin ${origin} not allowed by CORS policy`));
      };
      credentials: true;
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'];
      allowedHeaders: [;
        'Content-Type';
        'Authorization';
        'X-API-Key';
        'X-CSRF-Token';
        'X-Requested-With';
        'Accept';
        'Accept-Language';
        'Content-Language';
        'Origin';
        'Referer';
        'User-Agent';
      ];
      exposedHeaders: [;
        'X-RateLimit-Limit';
        'X-RateLimit-Remaining';
        'X-RateLimit-Reset';
        'X-Response-Time';
        'X-Request-ID';
        'X-API-Version';
      ];
      maxAge: configserverisProduction ? 86400 : 300, // 24 hours in prod, 5 minutes in dev;
      preflightContinue: false;
      optionsSuccessStatus: 200;
    ;
};
  };

  /**;
   * Enhanced security headers with environment awareness;
   */;
  private securityHeaders() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      // Add requestID for tracking;
      const requestId = thisgenerateRequestId();
      (req as any)id = requestId;
      resset('X-Request-ID', requestId);
      // Generate nonce for CSP if needed;
      if (configserverisProduction) {;
        const nonce = cryptorandomBytes(16)toString('base64');
        reslocalsnonce = nonce;
      };

      // Production-ready security headers;
      const securityHeaders: Record<string, string> = {;
        'X-XSS-Protection': '1; mode=block';
        'X-Content-Type-Options': 'nosniff';
        'X-Frame-Options': 'DENY';
        'X-Download-Options': 'noopen';
        'X-Permitted-Cross-Domain-Policies': 'none';
        'Referrer-Policy': 'strict-origin-when-cross-origin';
        'Permissions-Policy':;
          'camera=(), microphone=(), geolocation=(), interest-cohort=(), browsing-topics=()';
        'X-DNS-Prefetch-Control': 'off';
        'X-Robots-Tag': 'noindex, nofollow, nosnippet, noarchive';
      };
      // Production-specific headers;
      if (configserverisProduction) {;
        securityHeaders['Strict-Transport-Security'] =;
          'max-age=31536000; includeSubDomains; preload';
        securityHeaders['Expect-CT'] = 'enforce, max-age=86400';
        securityHeaders['Cache-Control'] = 'no-store, no-cache, must-revalidate, proxy-revalidate';
        securityHeaders['Pragma'] = 'no-cache';
        securityHeaders['Expires'] = '0';
        securityHeaders['Surrogate-Control'] = 'no-store';
      } else {;
        // Development-specific headers;
        securityHeaders['Cache-Control'] = 'no-cache';
      };

      // Apply all headers;
      resset(securityHeaders);
      // Remove insecure headers that might reveal server information;
      resremoveHeader('X-Powered-By');
      resremoveHeader('Server');
      resremoveHeader('X-AspNet-Version');
      resremoveHeader('X-AspNetMvc-Version');
      next();
    };
  };

  /**;
   * Environment-aware HTTPS enforcement;
   */;
  private enforceHTTPS() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      // Skip HTTPS enforcement in development to allow local testing;
      if (configserverisDevelopment) {;
        loggerdebug('HTTPS enforcement skipped in development mode', LogContextSECURITY);
        return next();
      };

      // In production, enforce HTTPS;
      if (reqsecure || reqheaders['x-forwarded-proto'] === 'https') {;
        return next();
      };

      // Reject non-HTTPS requests in production;
      if (configserverisProduction) {;
        loggerwarn('Non-HTTPS requestrejected in production', LogContextSECURITY, {;
          url: requrl;
          headers: {;
            host: reqheadershost;
            'x-forwarded-proto': reqheaders['x-forwarded-proto'];
            'user-agent': reqheaders['user-agent'];
          ;
};
        });
        return resstatus(426)json({;
          error instanceof Error ? errormessage : String(error) 'HTTPS Required';
          message: 'This server requires all requests to be made over HTTPS';
          code: 'HTTPS_REQUIRED';
        });
      };

      // Fallback: redirect to HTTPS (for staging environments);
      const httpsUrl = `https://${reqheadershost}${requrl}`;
      loggerinfo('Redirecting to HTTPS', LogContextSECURITY, { from: requrl, to: httpsUrl });
      resredirect(301, httpsUrl);
    };
  };

  /**;
   * Apply rate limiting to different endpoint categories;
   */;
  private applyRateLimiting(app: Application): void {;
    // Global rate limit (applies to all endpoints);
    appuse(thisrateLimiterlimit('authenticated'));
    // Authentication & Security endpoints - Strict limits;
    appuse('/api/auth/*', thisrateLimiterlimit('auth'));
    appuse('/api/register', thisrateLimiterlimit('auth'));
    appuse('/api/password-reset', thisrateLimiterlimit('password-reset'));
    appuse('/api/keys/generate', thisrateLimiterlimit('api-key-generation'));
    // AI Processing endpoints - Moderate limits to prevent abuse;
    appuse(;
      '/api/ai-services/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 100, // 100 AI requests per 15 minutes;
      });
    );
    appuse(;
      '/api/dspy/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 50, // 50 DSPy requests per 15 minutes;
      });
    );
    appuse(;
      '/api/athena-tools/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 100, // 100 Athena tool requests per 15 minutes;
      });
    );
    appuse(;
      '/api/sweet-athena/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 200, // 200 Sweet Athena requests per 15 minutes;
      });
    );
    // Tool execution - Restricted due to security implications;
    appuse(;
      '/api/tools/*';
      thisrateLimiterlimit({;
        windowMs: 60 * 60 * 1000, // 1 hour;
        max: 50, // 50 tool executions per hour;
      });
    );
    // Filesystem operations - High security risk;
    appuse(;
      '/api/filesystem/*';
      thisrateLimiterlimit({;
        windowMs: 60 * 60 * 1000, // 1 hour;
        max: 200, // 200 filesystem operations per hour;
      });
    );
    // File upload/download operations;
    appuse(;
      '/api/upload';
      thisrateLimiterlimit({;
        windowMs: 60 * 60 * 1000, // 1 hour;
        max: 100, // 100 uploads per hour;
      });
    );
    appuse(;
      '/api/backup/*';
      thisrateLimiterlimit({;
        windowMs: 60 * 60 * 1000, // 1 hour;
        max: 10, // 10 backup operations per hour;
      });
    );
    // Data management endpoints;
    appuse(;
      '/api/widgets/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 200, // 200 widget operations per 15 minutes;
      });
    );
    appuse(;
      '/api/memory/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 300, // 300 memory operations per 15 minutes;
      });
    );
    appuse(;
      '/api/knowledge/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 500, // 500 knowledge operations per 15 minutes;
      });
    );
    appuse(;
      '/api/knowledge-monitoring/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 100, // 100 monitoring requests per 15 minutes;
      });
    );
    // MCP and external integrations - Moderate limits;
    appuse(;
      '/api/mcp/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 100, // 100 MCP requests per 15 minutes;
      });
    );
    // Speech processing - Moderate limits;
    appuse(;
      '/api/speech/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 50, // 50 speech processing requests per 15 minutes;
      });
    );
    // Orchestration and agent coordination - Moderate limits;
    appuse(;
      '/api/orchestration/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 100, // 100 orchestration requests per 15 minutes;
      });
    );
    // Heavy computational operations - Strict limits;
    appuse(;
      '/api/export';
      thisrateLimiterlimit({;
        windowMs: 60 * 60 * 1000, // 1 hour;
        max: 10, // 10 exports per hour;
      });
    );
    appuse(;
      '/api/import';
      thisrateLimiterlimit({;
        windowMs: 60 * 60 * 1000, // 1 hour;
        max: 10, // 10 imports per hour;
      });
    );
    // System health and monitoring - Lenient limits for operational visibility;
    appuse(;
      '/api/health/*';
      thisrateLimiterlimit({;
        windowMs: 5 * 60 * 1000, // 5 minutes;
        max: 100, // 100 health checks per 5 minutes;
      });
    );
    // AI-powered widget and contentgeneration - Moderate limits due to computational cost;
    appuse(;
      '/api/widget-creation/*';
      thisrateLimiterlimit({;
        windowMs: 60 * 60 * 1000, // 1 hour;
        max: 30, // 30 widget creations per hour;
      });
    );
    appuse(;
      '/api/natural-language-widgets/*';
      thisrateLimiterlimit({;
        windowMs: 60 * 60 * 1000, // 1 hour;
        max: 50, // 50 natural language widget operations per hour;
      });
    );
    // Advanced AI processing endpoints - Strict limits due to high computational cost;
    appuse(;
      '/api/enhanced-supabase/*';
      thisrateLimiterlimit({;
        windowMs: 60 * 60 * 1000, // 1 hour;
        max: 100, // 100 enhanced operations per hour;
      });
    );
    appuse(;
      '/api/pydantic-ai/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 50, // 50 Pydantic AI requests per 15 minutes;
      });
    );
    appuse(;
      '/api/alpha-evolve/*';
      thisrateLimiterlimit({;
        windowMs: 60 * 60 * 1000, // 1 hour;
        max: 20, // 20 evolution operations per hour (very computationally expensive);
      });
    );
    // Security reporting endpoints - Moderate limits;
    appuse(;
      '/api/security-reports/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 50, // 50 security report requests per 15 minutes;
      });
    );
    // Additional data processing endpoints;
    appuse(;
      '/api/dspy-widgets/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 100, // 100 DSPy widget operations per 15 minutes;
      });
    );
    appuse(;
      '/api/enhanced-context/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 200, // 200 context operations per 15 minutes;
      });
    );
    // Agent and automation endpoints;
    appuse(;
      '/api/agents/*';
      thisrateLimiterlimit({;
        windowMs: 15 * 60 * 1000, // 15 minutes;
        max: 150, // 150 agent operations per 15 minutes;
      });
    );
    appuse(;
      '/api/autofix/*';
      thisrateLimiterlimit({;
        windowMs: 60 * 60 * 1000, // 1 hour;
        max: 50, // 50 autofix operations per hour;
      });
    );
    loggerinfo('Comprehensive rate limiting applied to all API endpoints', LogContextSECURITY, {;
      totalEndpointsProtected: 29;
      endpointsProtected: [;
        'auth';
        'ai-services';
        'dspy';
        'athena-tools';
        'sweet-athena';
        'tools';
        'filesystem';
        'widgets';
        'memory';
        'knowledge';
        'knowledge-monitoring';
        'mcp';
        'speech';
        'orchestration';
        'backup';
        'health';
        'upload';
        'export';
        'import';
        'widget-creation';
        'natural-language-widgets';
        'enhanced-supabase';
        'pydantic-ai';
        'alpha-evolve';
        'security-reports';
        'dspy-widgets';
        'enhanced-context';
        'agents';
        'autofix';
      ];
    });
  };

  /**;
   * Generate unique requestID;
   */;
  private generateRequestId(): string {;
    return `${Datenow()}-${Mathrandom()toString(36)substr(2, 9)}`;
  };

  /**;
   * Get authentication middleware;
   */;
  public getAuthMiddleware(options?: any) {;
    if (thisconfigenableAuth) {;
      return thisauthMiddlewareauthenticate(options);
    };
    return (req: Request, res: Response, next: NextFunction) => next();
  };

  /**;
   * Get JWT authentication middleware;
   */;
  public getJWTMiddleware(options?: any) {;
    if (thisconfigenableAuth) {;
      return thisjwtAuthauthenticate(options);
    };
    return (req: Request, res: Response, next: NextFunction) => next();
  };

  /**;
   * Get CSRF middleware for specific routes;
   */;
  public getCSRFMiddleware() {;
    if (thisconfigenableCSRF) {;
      return thiscsrfProtectionmiddleware();
    };
    return (req: Request, res: Response, next: NextFunction) => next();
  };

  /**;
   * Get rate limiter for custom limits;
   */;
  public getRateLimiter() {;
    return thisrateLimiter;
  };

  /**;
   * Get JWT auth service;
   */;
  public getJWTService() {;
    return thisjwtAuth;
  };

  /**;
   * Security status endpoint handler;
   */;
  public getSecurityStatus() {;
    return async (req: Request, res: Response) => {;
      const rateLimitStats = await thisrateLimitergetStats();
      const sqlProtectionStats = thissqlProtectiongetStats();
      resjson({;
        status: 'operational';
        features: {;
          helmet: thisconfigenableHelmet;
          cors: thisconfigenableCORS;
          rateLimit: thisconfigenableRateLimit;
          csrf: thisconfigenableCSRF;
          sqlProtection: thisconfigenableSQLProtection;
          https: thisconfigenableHTTPS;
          hsts: thisconfigenableHSTS;
          auth: thisconfigenableAuth;
        ;
};
        stats: {;
          rateLimit: rateLimitStats;
          sqlProtection: sqlProtectionStats;
        ;
};
        timestamp: new Date()toISOString();
      });
    };
  };

  /**;
   * Apply security patches for known vulnerabilities;
   */;
  public applySecurityPatches(app: Application): void {;
    // Prevent HTTP Parameter Pollution;
    appuse((req: Request, res: Response, next: NextFunction) => {;
      for (const key in reqquery) {;
        if (ArrayisArray(reqquery[key])) {;
          reqquery[key] = (reqquery[key] as string[])[0];
        ;
};
      };
      next();
    });
    // Prevent clickjacking with additional headers;
    appuse((req: Request, res: Response, next: NextFunction) => {;
      ressetHeader('X-Frame-Options', 'DENY');
      ressetHeader('Content-Security-Policy', "frame-ancestors 'none'");
      next();
    });
    // Add security monitoring;
    appuse((req: Request, res: Response, next: NextFunction) => {;
      const start = Datenow();
      reson('finish', () => {;
        const duration = Datenow() - start;
        // Log slow requests;
        if (duration > 5000) {;
          loggerwarn('Slow requestdetected', LogContextPERFORMANCE, {;
            method: reqmethod;
            path: reqpath;
            duration;
            statusCode: resstatusCode;
          });
        };

        // Log failed authentication attempts;
        if (resstatusCode === 401 || resstatusCode === 403) {;
          loggerwarn('Authentication failure', LogContextSECURITY, {;
            method: reqmethod;
            path: reqpath;
            statusCode: resstatusCode;
            ip: reqip;
            userAgent: reqheaders['user-agent'];
          });
        };
      });
      next();
    });
  };
};

export default EnhancedSecurityMiddleware;