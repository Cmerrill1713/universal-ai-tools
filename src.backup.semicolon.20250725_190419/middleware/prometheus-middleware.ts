/**;
 * Prometheus Middleware for Universal AI Tools;
 *;
 * Integrates Prometheus metrics collection with our enhanced logging system;
 * and provides specialized metrics for Sweet Athena interactions;
 */;
import type { NextFunction, Request, Response } from 'express';
import { metricsCollector, register } from '../utils/prometheus-metrics';
import { LogContext, logger } from '../utils/enhanced-logger';
// Extend Express Request type to include Prometheus data;
declare global {;
  namespace Express {;
    interface Request {;
      prometheusStartTime?: number;
      prometheusTimerEnd?: () => void;
    ;
};
  };
};

export class PrometheusMiddleware {;
  // Main Prometheus metrics middleware;
  static metricsCollector() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      const startTime = Datenow();
      reqprometheusStartTime = startTime;
      // Override resend to capture final metrics;
      const originalEnd = resend;
      resend = function (;
        chunk?: any;
        encodingOrCallback?: BufferEncoding | (() => void);
        callback?: () => void;
      ) {;
        const endTime = Datenow();
        const duration = endTime - startTime;
        // Extract requestdata;
        const { method } = req;
        const route = PrometheusMiddlewareextractRoute(req);
        const { statusCode } = res;
        const aiService = (reqheaders['x-ai-service'] as string) || 'unknown';
        const requestSize = PrometheusMiddlewaregetRequestSize(req);
        const responseSize = PrometheusMiddlewaregetResponseSize(res);
        // Record HTTP metrics;
        metricsCollectorrecordHttpRequest(;
          method;
          route;
          statusCode;
          duration;
          requestSize;
          responseSize;
          aiService;
        );
        // Log metrics collection for debugging;
        loggerdebug('Prometheus metrics recorded', LogContextPERFORMANCE, {;
          method;
          route;
          status_code: statusCode;
          duration_ms: duration;
          ai_service: aiService;
          request_size: requestSize;
          response_size: responseSize;
        });
        // Special handling for Sweet Athena metrics;
        if (PrometheusMiddlewareisAthenaRequest(req)) {;
          PrometheusMiddlewarerecordAthenaMetrics(req, res, duration);
        };

        // Call original end method;
        const encoding = typeof encodingOrCallback === 'string' ? encodingOrCallback : 'utf8';
        const cb = typeof encodingOrCallback === 'function' ? encodingOrCallback : callback;
        return originalEndcall(this, chunk, encoding, cb);
      };
      next();
    };
  };

  // Sweet Athena specific metrics collection;
  static athenaMetricsCollector() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      if (PrometheusMiddlewareisAthenaRequest(req)) {;
        // Add Athena-specific metric recording to request;
        reqrecordAthenaInteraction = (;
          interactionType: string;
          personalityMood: string;
          sweetnessLevel: number;
          responseTimeMs?: number;
        ) => {;
          const userId = (reqheaders['x-user-id'] as string) || 'anonymous';
          const sessionId = (reqheaders['x-session-id'] as string) || reqrequestId || 'unknown';
          const model = reqbody?model || 'default';
          const actualResponseTime =;
            responseTimeMs || Datenow() - (reqprometheusStartTime || Datenow());
          metricsCollectorrecordAthenaInteraction(;
            interactionType;
            personalityMood;
            userId;
            sessionId;
            actualResponseTime;
            sweetnessLevel;
            model;
          );
          loggerinfo('Sweet Athena metrics recorded', LogContextATHENA, {;
            interaction_type: interactionType;
            personality_mood: personalityMood;
            sweetness_level: sweetnessLevel;
            response_time_ms: actualResponseTime;
            user_id: userId;
            session_id: sessionId;
            model;
          });
        };
      };

      next();
    };
  };

  // Database metrics middleware;
  static databaseMetricsCollector() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      // Add database metric recording to request;
      reqrecordDatabaseOperation = (;
        table: string;
        operation: string;
        durationMs: number;
        error instanceof Error ? errormessage : String(error)  string;
      ) => {;
        metricsCollectorrecordDatabaseOperation(table, operation, durationMs, error instanceof Error ? errormessage : String(error);
        loggerdebug('Database metrics recorded', LogContextDATABASE, {;
          table;
          operation;
          duration_ms: durationMs;
          error;
          request_id: reqrequestId;
        });
      };
      next();
    };
  };

  // Memory metrics middleware;
  static memoryMetricsCollector() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      // Add memory metric recording to request;
      reqrecordMemoryOperation = (;
        operationType: string;
        memoryType: string;
        durationMs: number;
        accuracy?: number;
      ) => {;
        const aiService = (reqheaders['x-ai-service'] as string) || 'unknown';
        metricsCollectorrecordMemoryOperation(;
          operationType;
          memoryType;
          aiService;
          durationMs;
          accuracy;
        );
        loggerdebug('Memory metrics recorded', LogContextMEMORY, {;
          operation_type: operationType;
          memory_type: memoryType;
          duration_ms: durationMs;
          accuracy;
          ai_service: aiService;
          request_id: reqrequestId;
        });
      };
      next();
    };
  };

  // Security metrics middleware;
  static securityMetricsCollector() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      // Add security metric recording to request;
      reqrecordSecurityEvent = (eventType: string, severity: string) => {;
        const sourceIp = reqip || reqconnectionremoteAddress || 'unknown';
        metricsCollectorrecordSecurityEvent(eventType, severity, sourceIp);
        loggerinfo('Security metrics recorded', LogContextSECURITY, {;
          event_type: eventType;
          severity;
          source_ip: sourceIp;
          user_agent: reqget('User-Agent');
          request_id: reqrequestId;
        });
      };
      next();
    };
  };

  // Test metrics middleware (for test environments);
  static testMetricsCollector() {;
    return (req: Request, res: Response, next: NextFunction) => {;
      if (processenvNODE_ENV === 'test' || reqheaders['x-test-environment']) {;
        reqrecordTestExecution = (;
          testSuite: string;
          testType: string;
          status: string;
          durationMs: number;
        ) => {;
          metricsCollectorrecordTestExecution(testSuite, testType, status, durationMs);
          loggerdebug('Test metrics recorded', LogContextTEST, {;
            test_suite: testSuite;
            test_type: testType;
            status;
            duration_ms: durationMs;
            request_id: reqrequestId;
          });
        };
      };
;
      next();
    };
  };

  // Metrics endpoint middleware;
  static metricsEndpoint() {;
    return async (req: Request, res: Response) => {;
      try {;
        const metrics = await metricsCollectorgetMetrics();
        resset('Content-Type', registercontentType);
        ressend(metrics);
        loggerdebug('Prometheus metrics endpoint accessed', LogContextPERFORMANCE, {;
          request_id: reqrequestId;
          ai_service: reqheaders['x-ai-service'];
          source_ip: reqip;
        });
      } catch (error) {;
        loggererror('Failed to generate Prometheus metrics', LogContextPERFORMANCE, {;
          error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
          request_id: reqrequestId;
        });
        resstatus(500)json({;
          error instanceof Error ? errormessage : String(error) 'Failed to generate metrics';
          timestamp: new Date()toISOString();
        });
      };
    };
  };

  // Health check endpoint with Prometheus integration;
  static healthCheckEndpoint() {;
    return async (req: Request, res: Response) => {;
      try {;
        const healthData = {;
          status: 'healthy';
          timestamp: new Date()toISOString();
          uptime: processuptime();
          memory: processmemoryUsage();
          metrics_enabled: true;
          prometheus_registry: typeof registermetrics === 'function' ? 'active' : 'inactive';
        };
        // Update health metrics;
        metricsCollectorrecordTestExecution('health_check', 'endpoint', 'pass', 0);
        resjson(healthData);
        loggerdebug('Health check endpoint accessed', LogContextSYSTEM, {;
          request_id: reqrequestId;
          health_status: 'healthy';
          uptime: processuptime();
        });
      } catch (error) {;
        loggererror('Health check failed', LogContextSYSTEM, {;
          error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
          request_id: reqrequestId;
        });
        resstatus(500)json({;
          status: 'unhealthy';
          error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
          timestamp: new Date()toISOString();
        });
      };
    };
  };

  // Helper methods;
  private static extractRoute(req: Request): string {;
    // Extract meaningful route pattern;
    const path = reqpath || requrl || '/';
    // Replace IDs with patterns for better grouping;
    return path;
      replace(/\/\d+/g, '/:id');
      replace(/\/[a-f0-9-]{36}/g, '/:uuid');
      replace(/\/[a-f0-9]{24}/g, '/: objectid');
  ;
};

  private static getRequestSize(req: Request): number {;
    const contentLength = reqget('Content-Length');
    if (contentLength) {;
      return parseInt(contentLength, 10, 10);
    };

    // Estimate size from body if available;
    if (reqbody) {;
      try {;
        return JSONstringify(reqbody)length;
      } catch {;
        return 0;
      };
    };

    return 0;
  };

  private static getResponseSize(res: Response): number {;
    const contentLength = resget('Content-Length');
    if (contentLength) {;
      return parseInt(contentLength, 10, 10);
    };

    // Estimate from response data if available;
    return 0; // Would need to capture response body to calculate accurately;
  };

  private static isAthenaRequest(req: Request): boolean {;
    return (;
      reqpathincludes('/athena') ||;
      reqpathincludes('/assistant') ||;
      reqpathincludes('/conversation') ||;
      reqheaders['x-ai-service'] === 'sweet-athena';
    );
  };

  private static recordAthenaMetrics(req: Request, res: Response, duration: number) {;
    try {;
      const interactionType =;
        reqbody?interaction_type ||;
        (reqqueryinteraction_type as string) ||;
        PrometheusMiddlewareinferInteractionType(reqpath);
      const personalityMood =;
        reqbody?personality_mood || (reqquerypersonality_mood as string) || 'sweet';
      const sweetnessLevel =;
        reqbody?sweetness_level ||;
        (reqquerysweetness_level ? Number(reqquerysweetness_level) : 8);
      const userId = (reqheaders['x-user-id'] as string) || 'anonymous';
      const sessionId = (reqheaders['x-session-id'] as string) || reqrequestId || 'unknown';
      const model = reqbody?model || 'default';
      metricsCollectorrecordAthenaInteraction(;
        interactionType;
        personalityMood;
        userId;
        sessionId;
        duration;
        sweetnessLevel;
        model;
      );
      loggerinfo('Athena interaction metrics recorded automatically', LogContextATHENA, {;
        interaction_type: interactionType;
        personality_mood: personalityMood;
        sweetness_level: sweetnessLevel;
        duration_ms: duration;
        status_code: resstatusCode;
      });
    } catch (error) {;
      loggererror('Failed to record Athena metrics', LogContextATHENA, {;
        error instanceof Error ? errormessage : String(error) error instanceof Error ? errormessage : String(error instanceof Error ? errormessage : String(error);
        request_id: reqrequestId;
      });
    };
  };

  private static inferInteractionType(path: string): string {;
    if (pathincludes('/chat')) return 'conversation';
    if (pathincludes('/avatar')) return 'avatar_animation';
    if (pathincludes('/teach')) return 'teach_me';
    if (pathincludes('/memory')) return 'memory_access';
    return 'general';
  };
};

// Extend Express Request interface;
declare module 'express-serve-static-core' {;
  interface Request {;
    recordAthenaInteraction?: (;
      interactionType: string;
      personalityMood: string;
      sweetnessLevel: number;
      responseTimeMs?: number;
    ) => void;
    recordDatabaseOperation?: (;
      table: string;
      operation: string;
      durationMs: number;
      error instanceof Error ? errormessage : String(error)  string;
    ) => void;
    recordMemoryOperation?: (;
      operationType: string;
      memoryType: string;
      durationMs: number;
      accuracy?: number;
    ) => void;
    recordSecurityEvent?: (eventType: string, severity: string) => void;
    recordTestExecution?: (;
      testSuite: string;
      testType: string;
      status: string;
      durationMs: number;
    ) => void;
  ;
};
};

export default PrometheusMiddleware;