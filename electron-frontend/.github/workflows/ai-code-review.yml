name: 🤖 AI-Powered Code Review
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'electron-frontend/**'
      - 'src/**'
      - '**.ts'
      - '**.tsx'
      - '**.js'
      - '**.jsx'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-review:
    name: AI Code Analysis & Review
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'electron-frontend/package-lock.json'
          
      - name: Install Dependencies
        run: |
          cd electron-frontend
          npm ci
          
      - name: Run Advanced TypeScript Analysis
        run: |
          cd electron-frontend
          npx tsc --noEmit --strict --exactOptionalPropertyTypes --noUncheckedIndexedAccess
          
      - name: Run ESLint with AI Suggestions
        run: |
          cd electron-frontend
          npx eslint "src/**/*.{ts,tsx,js,jsx}" --format=json --output-file=eslint-results.json || true
          
      - name: Analyze Code Complexity
        run: |
          cd electron-frontend
          npx complexity-report --format json --output complexity.json src/ || true
          
      - name: Security Analysis with Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/react
            p/typescript
            p/electron
          generateSarif: "1"
          
      - name: Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          
      - name: Comment PR with AI Analysis
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🤖 AI-Powered Code Review\n\n';
            
            // Check if ESLint results exist
            if (fs.existsSync('electron-frontend/eslint-results.json')) {
              const eslintResults = JSON.parse(fs.readFileSync('electron-frontend/eslint-results.json', 'utf8'));
              const totalIssues = eslintResults.reduce((sum, file) => sum + file.messages.length, 0);
              comment += `### 📊 Code Quality Analysis\n`;
              comment += `- **ESLint Issues**: ${totalIssues}\n`;
              comment += `- **Files Analyzed**: ${eslintResults.length}\n\n`;
            }
            
            comment += '### 🔍 Advanced Checks Performed\n';
            comment += '- ✅ TypeScript strict mode analysis\n';
            comment += '- ✅ Security vulnerability scanning\n';
            comment += '- ✅ Code complexity analysis\n';
            comment += '- ✅ React/Electron specific patterns\n';
            comment += '- ✅ OWASP Top 10 security checks\n\n';
            
            comment += '### 🎯 Recommendations\n';
            comment += 'Review the security and quality findings above. ';
            comment += 'Consider using GitHub Copilot for AI-assisted fixes.\n';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });