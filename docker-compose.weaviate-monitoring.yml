version: '3.8'

services:
  # Weaviate with monitoring enabled
  weaviate:
    image: semitechnologies/weaviate:1.23.0
    container_name: universal-ai-weaviate
    restart: unless-stopped
    ports:
      - "8090:8080"  # REST API
      - "50051:50051" # gRPC API
      - "2112:2112"   # Prometheus metrics
    environment:
      # Authentication & Security
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'false'
      AUTHENTICATION_APIKEY_ENABLED: 'true'
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: '${WEAVIATE_API_KEY:-universal-ai-key-change-me}'
      AUTHENTICATION_APIKEY_USERS: 'admin'
      
      # Monitoring & Metrics
      PROMETHEUS_MONITORING_ENABLED: 'true'
      PROMETHEUS_MONITORING_PORT: '2112'
      
      # Backup Configuration
      BACKUP_FILESYSTEM_PATH: '/backups'
      BACKUP_S3_ENABLED: '${BACKUP_S3_ENABLED:-false}'
      BACKUP_S3_BUCKET: '${BACKUP_S3_BUCKET:-}'
      BACKUP_S3_ENDPOINT: '${BACKUP_S3_ENDPOINT:-}'
      BACKUP_S3_ACCESS_KEY_ID: '${AWS_ACCESS_KEY_ID:-}'
      BACKUP_S3_SECRET_ACCESS_KEY: '${AWS_SECRET_ACCESS_KEY:-}'
      
      # Performance Settings
      QUERY_DEFAULTS_LIMIT: 25
      QUERY_MAXIMUM_RESULTS: 10000
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      
      # Memory Settings
      GOMEMLIMIT: '6GiB'
      GOMAXPROCS: 4
      
      # Logging
      LOG_LEVEL: 'info'
      LOG_FORMAT: 'json'
      
      # Telemetry
      DISABLE_TELEMETRY: 'true'
    volumes:
      - weaviate_data:/var/lib/weaviate
      - weaviate_backups:/backups
    networks:
      - ai-tools-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 8G
        reservations:
          cpus: '1'
          memory: 4G

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: universal-ai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - ai-tools-network
    depends_on:
      - weaviate

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: universal-ai-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"  # Using 3003 to avoid conflict
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3003
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - ai-tools-network
    depends_on:
      - prometheus

  # AlertManager for alerting
  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: universal-ai-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - ai-tools-network

  # Node Exporter for host metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: universal-ai-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ai-tools-network

  # Weaviate Backup Service (Cron-based)
  weaviate-backup:
    image: alpine:3.19
    container_name: universal-ai-weaviate-backup
    restart: unless-stopped
    environment:
      - WEAVIATE_URL=http://weaviate:8080
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY:-universal-ai-key-change-me}
      - BACKUP_RETENTION_DAYS=7
    volumes:
      - weaviate_backups:/backups
      - ./scripts/backup-weaviate.sh:/backup-weaviate.sh:ro
    entrypoint: |
      sh -c '
      apk add --no-cache curl jq
      # Run backup every 6 hours
      while true; do
        echo "Starting Weaviate backup at $$(date)"
        sh /backup-weaviate.sh
        echo "Backup completed at $$(date)"
        sleep 21600
      done
      '
    networks:
      - ai-tools-network
    depends_on:
      - weaviate
    profiles:
      - backup

  # Loki for log aggregation (optional)
  loki:
    image: grafana/loki:2.9.0
    container_name: universal-ai-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - ai-tools-network
    profiles:
      - logging

  # Promtail for log shipping (optional)
  promtail:
    image: grafana/promtail:2.9.0
    container_name: universal-ai-promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - ai-tools-network
    depends_on:
      - loki
    profiles:
      - logging

volumes:
  weaviate_data:
    driver: local
  weaviate_backups:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local

networks:
  ai-tools-network:
    external: true