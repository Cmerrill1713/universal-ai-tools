# Nginx configuration for Vision Resource Manager traffic routing
# Supports gradual migration from TypeScript to Rust backend

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'backend="$upstream_addr" rt=$request_time '
                    'uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" '
                    'urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Upstream backends with weighted load balancing
    upstream vision_backends {
        # Rust backend (initially low weight for gradual rollout)
        server vision-manager-rust:3001 weight=${RUST_BACKEND_WEIGHT} max_fails=3 fail_timeout=30s;
        
        # TypeScript backend (initially high weight)
        server vision-manager-typescript:3002 weight=${TS_BACKEND_WEIGHT} max_fails=3 fail_timeout=30s;
        
        # Health check configuration
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }
    
    # Dedicated Rust backend (for A/B testing)
    upstream rust_backend {
        server vision-manager-rust:3001 max_fails=2 fail_timeout=10s;
        keepalive 16;
    }
    
    # Dedicated TypeScript backend (for comparison)
    upstream typescript_backend {
        server vision-manager-typescript:3002 max_fails=2 fail_timeout=10s;
        keepalive 16;
    }
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=vision_limit:10m rate=100r/m;
    limit_req_status 429;
    
    # Main server configuration
    server {
        listen 80;
        server_name localhost;
        
        # Basic security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Main vision API endpoint with load balancing
        location /api/v1/vision/ {
            # Rate limiting
            limit_req zone=vision_limit burst=20 nodelay;
            
            # Backend selection logic
            proxy_pass http://vision_backends;
            
            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts optimized for AI workloads
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;    # 5 minutes for heavy models
            proxy_read_timeout 300s;    # 5 minutes for inference
            
            # Connection pooling
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Backend routing headers for debugging
            add_header X-Backend-Server $upstream_addr always;
            add_header X-Response-Time $upstream_response_time always;
            
            # Buffer settings for large responses (images, etc.)
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 8 128k;
            proxy_busy_buffers_size 256k;
            
            # Enable streaming for real-time responses
            proxy_cache off;
            proxy_store off;
        }
        
        # Dedicated Rust backend endpoint (for testing)
        location /api/v1/vision/rust/ {
            rewrite ^/api/v1/vision/rust/(.*) /api/v1/vision/$1 break;
            
            proxy_pass http://rust_backend;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Backend-Type "rust";
            
            add_header X-Backend-Type "rust" always;
            add_header X-Backend-Server $upstream_addr always;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # Dedicated TypeScript backend endpoint (for comparison)
        location /api/v1/vision/typescript/ {
            rewrite ^/api/v1/vision/typescript/(.*) /api/v1/vision/$1 break;
            
            proxy_pass http://typescript_backend;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Backend-Type "typescript";
            
            add_header X-Backend-Type "typescript" always;
            add_header X-Backend-Server $upstream_addr always;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            
            # Check if any backend is healthy
            proxy_pass http://vision_backends/health;
            proxy_set_header Host $host;
            
            # Fast timeout for health checks
            proxy_connect_timeout 2s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
        }
        
        # Performance metrics endpoint
        location /metrics {
            # Aggregate metrics from both backends
            proxy_pass http://vision_backends/metrics;
            proxy_set_header Host $host;
            
            # Allow Prometheus to scrape
            allow 172.25.0.0/16;  # Docker network
            allow 127.0.0.1;      # Localhost
            deny all;
        }
        
        # Load balancer status
        location /nginx_status {
            stub_status on;
            access_log off;
            
            allow 172.25.0.0/16;
            allow 127.0.0.1;
            deny all;
        }
        
        # Performance comparison endpoint
        location /performance-comparison {
            proxy_pass http://rust_backend/performance-comparison;
            proxy_set_header Host $host;
            
            # Extended timeout for benchmark operations
            proxy_connect_timeout 10s;
            proxy_send_timeout 600s;    # 10 minutes for benchmarks
            proxy_read_timeout 600s;
            
            # Stream results
            proxy_buffering off;
            proxy_cache off;
            
            add_header X-Benchmark-Type "comparison" always;
        }
        
        # WebSocket support for real-time monitoring
        location /ws {
            proxy_pass http://vision_backends;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # WebSocket timeouts
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }
        
        # Default catch-all
        location / {
            return 404 '{"error": "Vision Resource Manager - Endpoint not found"}';
            add_header Content-Type application/json;
        }
        
        # Error pages
        error_page 404 /404.json;
        error_page 500 502 503 504 /50x.json;
        
        location = /404.json {
            internal;
            return 404 '{"error": "Not found", "service": "vision-manager"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.json {
            internal;
            return 500 '{"error": "Internal server error", "service": "vision-manager"}';
            add_header Content-Type application/json;
        }
    }
    
    # Dedicated performance testing server
    server {
        listen 8080;
        server_name performance-test;
        
        # Load testing endpoint (bypasses rate limits)
        location / {
            proxy_pass http://vision_backends;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Load-Test "true";
            
            # No rate limiting for performance tests
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            add_header X-Load-Test-Backend $upstream_addr always;
        }
    }
}