/* eslint-disable no-undef */
import dotenv from 'dotenv';
import { z } from 'zod';
import { logger } from './utils/logger';
import crypto from 'crypto';
import fs from 'fs';
import path from 'path'// Load environment variables;
dotenvconfig()// Environment schema validation;
const env.Schema = zobject({;
  // Server Configuration;
  NODE_E.N.V: zenum(['development', 'production', 'testing'])default('development');
  PO.R.T: zstring()transform(Number)default('9999')// Database Configuration,;
  SUPABASE_U.R.L: zstring()url(),;
  SUPABASE_ANON_K.E.Y: zstring()optional(),;
  SUPABASE_SERVICE_K.E.Y: zstring()// Security Configuration,;
  JWT_SECR.E.T: zstring()min(32),;
  ENCRYPTION_K.E.Y: zstring()min(32)// A.I.Service Configuration,;
  OPENAI_API_K.E.Y: zstring()optional(),;
  ANTHROPIC_API_K.E.Y: zstring()optional(),;
  GOOGLE_AI_API_K.E.Y: zstring()optional()// Local L.L.M.Configuration,;
  OLLAMA_U.R.L: zstring()url()default('http://localhost:11434'),;
  LM_STUDIO_U.R.L: zstring()url()default('http://localhost:1234')// Apple Silicon Configuration,;
  ENABLE_MET.A.L: zstring()transform(Boolean)default('true'),;
  MLX_CACHE_D.I.R: zstring()optional()// Monitoring Configuration,;
  ENABLE_TELEMET.R.Y: zstring()transform(Boolean)default('true'),;
  LOG_LEV.E.L: zenum(['debug', 'info', 'warn', 'error'])default('info')// Rate Limiting;
  RATE_LIMIT_WIND.O.W: zstring()transform(Number)default('900000'), // 15 minutes;
  RATE_LIMIT_M.A.X: zstring()transform(Number)default('100')// Feature Flags,;
  ENABLE_WEBSOCKE.T.S: zstring()transform(Boolean)default('true'),;
  ENABLE_MEMORY_SYST.E.M: zstring()transform(Boolean)default('true'),;
  ENABLE_ANTI_HALLUCINATI.O.N: zstring()transform(Boolean)default('true'),;
  ENABLE_COGNITIVE_AGEN.T.S: zstring()transform(Boolean)default('true')// Performance Configuration,;
  MAX_CONCURRENT_REQUES.T.S: zstring()transform(Number)default('10'),;
  REQUEST_TIMEO.U.T: zstring()transform(Number)default('30000'),;
  MEMORY_CACHE_SI.Z.E: zstring()transform(Number)default('1000')// Cache Configuration,;
  REDIS_U.R.L: zstring()default('redis://localhost:6379')})// Parse and validate environment variables with errorhandling,;
let env: zinfer<typeof env.Schema>;
try {;
  env = env.Schemaparse(process.env)} catch (error) {;
  if (error instanceof z.Zod.Error) {;
    console.error.instanceof Error ? error.message : String(error) Environment validation failed:');
    errorerrorsfor.Each((err) => {;
      console.error.instanceof Error ? error.message : String(error)   - ${errpathjoin('.')}: ${errmessage}`);`});
    console.error.instanceof Error ? error.message : String(error) \n.Please.check your env file and ensure all required variables are set.');
    process.exit(1);
}  throw error instanceof Error ? error.message : String(error);

export { env }// Configuration object with computed values;
export const config = {;
  // Server;
  server: {;
    port: envPO.R.T,;
    env: envNODE_E.N.V,;
    is.Development: envNODE_E.N.V === 'development',;
    is.Production: envNODE_E.N.V === 'production',;
    is.Testing: envNODE_E.N.V === 'testing',;
  }// Database;
  database: {;
    supabase.Url: envSUPABASE_U.R.L,;
    supabase.Anon.Key: envSUPABASE_ANON_K.E.Y,;
    supabase.Service.Key: envSUPABASE_SERVICE_K.E.Y,;
  }// Security;
  security: {;
    jwt.Secret: envJWT_SECR.E.T,;
    encryption.Key: envENCRYPTION_K.E.Y,;
    cors.Origins: process.envCORS_ORIGI.N.S? process.envCORS_ORIGI.N.S.split(',');
          map((origin) => origin.trim());
          filter((origin) => {;
            // In production, reject any localhost origins;
            if (;
              envNODE_E.N.V === 'production' &&;
              (origin.includes('localhost') || origin.includes('127.0.0.1'))) {;
              console.error.instanceof Error ? error.message : String(error) ⚠️ Rejected localhost origin in production: ${origin}`);`;
              return false;
            return originlength > 0}): envNODE_E.N.V === 'production'? [] // No default origins in production: [;
            'http://localhost:3000';
            'http://localhost:5173';
            'http://localhost:8080';
            'http://localhost:9999'];
  }// A.I.Services;
  ai: {;
    openai: {;
      api.Key: envOPENAI_API_K.E.Y,;
      enabled: !!envOPENAI_API_K.E.Y,;
}    anthropic: {;
      api.Key: envANTHROPIC_API_K.E.Y,;
      enabled: !!envANTHROPIC_API_K.E.Y,;
}    google: {;
      api.Key: envGOOGLE_AI_API_K.E.Y,;
      enabled: !!envGOOGLE_AI_API_K.E.Y,;
    }}// Local L.L.M;
  localL.L.M: {;
    ollama: {;
      url: envOLLAMA_U.R.L,;
      enabled: true,;
}    lm.Studio: {;
      url: envLM_STUDIO_U.R.L,;
      enabled: true,;
    }}// Apple Silicon;
  metal: {;
    enabled: envENABLE_MET.A.L && processplatform === 'darwin',;
    cache.Dir: envMLX_CACHE_D.I.R || '~/cache/mlx',;
  }// Monitoring;
  monitoring: {;
    telemetry.Enabled: envENABLE_TELEMET.R.Y,;
    log.Level: envLOG_LEV.E.L,;
  }// Rate Limiting;
  rate.Limiting: {;
    window.Ms: envRATE_LIMIT_WIND.O.W,;
    max: envRATE_LIMIT_M.A.X,;
    enabled: envNODE_E.N.V === 'production',;
  }// Feature Flags;
  features: {;
    websockets: envENABLE_WEBSOCKE.T.S,;
    memory.System: envENABLE_MEMORY_SYST.E.M,;
    anti.Hallucination: envENABLE_ANTI_HALLUCINATI.O.N,;
    cognitive.Agents: envENABLE_COGNITIVE_AGEN.T.S,;
  }// Performance;
  performance: {;
    max.Concurrent.Requests: envMAX_CONCURRENT_REQUES.T.S,;
    request.Timeout: envREQUEST_TIMEO.U.T,;
    memory.Cache.Size: envMEMORY_CACHE_SI.Z.E,;
  }// Cache;
  cache: {;
    redis.Url: envREDIS_U.R.L,;
  }}// Validate critical configuration at startup;
export function validate.Config(): void {;
  const errors: string[] = [],;
  const warnings: string[] = []// Check required environment variables,;
  if (!envSUPABASE_U.R.L) {;
    errorspush('SUPABASE_U.R.L.is required')} else {;
    // Validate U.R.L.format;
    try {;
      new U.R.L(envSUPABASE_U.R.L)} catch {;
      errorspush('SUPABASE_U.R.L.must be a valid U.R.L')};

  if (!envSUPABASE_SERVICE_K.E.Y) {;
    errorspush('SUPABASE_SERVICE_K.E.Y.is required')}// Validate security keys// JWT_SECR.E.T.validation (strict in production, relaxed in development);
  if (!envJWT_SECR.E.T || envJWT_SECR.E.Tlength < 32) {;
    if (envNODE_E.N.V === 'production') {;
      errorspush('JWT_SECR.E.T.must be at least 32 characters long in production')} else {;
      warningspush('JWT_SECR.E.T.should be at least 32 characters long')}} else if (envJWT_SECR.E.T === 'your-jwt-secret-here' || envJWT_SECR.E.T.includes('example')) {;
    if (envNODE_E.N.V === 'production') {;
      errorspush('JWT_SECR.E.T.appears to be a placeholder. Please generate a secure secret.')} else {;
      warningspush('JWT_SECR.E.T.appears to be a placeholder - consider generating a secure secret')}}// ENCRYPTION_K.E.Y.validation (strict in production, relaxed in development);
  if (!envENCRYPTION_K.E.Y || envENCRYPTION_K.E.Ylength < 32) {;
    if (envNODE_E.N.V === 'production') {;
      errorspush('ENCRYPTION_K.E.Y.must be at least 32 characters long in production')} else {;
      warningspush('ENCRYPTION_K.E.Y.should be at least 32 characters long')}} else if (;
    envENCRYPTION_K.E.Y === 'your-encryption-key-here' ||;
    envENCRYPTION_K.E.Y.includes('example')) {;
    if (envNODE_E.N.V === 'production') {;
      errorspush('ENCRYPTION_K.E.Y.appears to be a placeholder. Please generate a secure key.')} else {;
      warningspush(;
        'ENCRYPTION_K.E.Y.appears to be a placeholder - consider generating a secure key')}}// Check at least one A.I.service is configured (only required in production);
  const hasA.I.Service = envOPENAI_API_K.E.Y || envANTHROPIC_API_K.E.Y || envGOOGLE_AI_API_K.E.Y;
  if (!hasA.I.Service && envNODE_E.N.V === 'production') {;
    errorspush('At least one A.I.service A.P.I.key must be configured in production')} else if (!hasA.I.Service && envNODE_E.N.V !== 'production') {;
    warningspush('No A.I.service A.P.I.keys configured - some features may not work')}// Validate service U.R.Ls;
  try {;
    new U.R.L(envOLLAMA_U.R.L)} catch {;
    warningspush('OLLAMA_U.R.L.is not a valid U.R.L');

  try {;
    new U.R.L(envLM_STUDIO_U.R.L)} catch {;
    warningspush('LM_STUDIO_U.R.L.is not a valid U.R.L')}// Security warnings;
  if (envNODE_E.N.V === 'production') {;
    if (envPO.R.T === 9999) {;
      warningspush('Using default port 9999 in production. Consider using a standard port.');

    if (!envREDIS_U.R.L || envREDIS_U.R.L === 'redis: //localhost:6379') {;
      warningspush('Using local Redis in production. Consider using a managed Redis service.');
    }}// Log warnings;
  if (warningslength > 0) {;
    loggerwarn('Configuration warnings:', warnings)}// Throw if there are errors;
  if (errorslength > 0) {;
    throw new Error(`Configuration validation failed:\n${errorsjoin('\n')}`)}}// Generate secure defaults if not provided;
export function generate.Secure.Defaults(): void {;
  const env.Path = pathjoin(processcwd(), 'env');
  let env.Content = '';
  try {;
    env.Content = fsread.File.Sync(env.Path, 'utf-8')} catch {;
    // env file doesn't exist;

  const updates: string[] = []// Validate JWT_SECR.E.T - fail fast in production, generate in development only;
  if (;
    !process.envJWT_SECR.E.T ||;
    process.envJWT_SECR.E.Tlength < 32 ||;
    process.envJWT_SECR.E.T.includes('example') ||;
    process.envJWT_SECR.E.T === 'your-jwt-secret-here') {;
    if (process.envNODE_E.N.V === 'production') {;
      throw new Error('JWT_SECR.E.T.must be set and secure in production environment')}// Only generate in development;
    const jwt.Secret = cryptorandom.Bytes(64)to.String('base64');
    updatespush(`JWT_SECR.E.T=${jwt.Secret}`);
    process.envJWT_SECR.E.T = jwt.Secret;
    console.warn('⚠️  Generated JWT_SECR.E.T.for development - N.O.T.F.O.R.PRODUCTI.O.N.U.S.E')}// Validate ENCRYPTION_K.E.Y - fail fast in production, generate in development only;
  if (;
    !process.envENCRYPTION_K.E.Y ||;
    process.envENCRYPTION_K.E.Ylength < 32 ||;
    process.envENCRYPTION_K.E.Y.includes('example') ||;
    process.envENCRYPTION_K.E.Y === 'your-encryption-key-here') {;
    if (process.envNODE_E.N.V === 'production') {;
      throw new Error('ENCRYPTION_K.E.Y.must be set and secure in production environment')}// Only generate in development;
    const encryption.Key = cryptorandom.Bytes(32)to.String('hex');
    updatespush(`ENCRYPTION_K.E.Y=${encryption.Key}`);
    process.envENCRYPTION_K.E.Y = encryption.Key;
    console.warn('⚠️  Generated ENCRYPTION_K.E.Y.for development - N.O.T.F.O.R.PRODUCTI.O.N.U.S.E')}// Write updates to env file;
  if (updateslength > 0 && process.envNODE_E.N.V !== 'production') {;
    const new.Content = `${`;
      env.Content + (env.Contentends.With('\n') ? '' : '\n')}\n# Auto-generated secure values\n${updatesjoin('\n')}\n`;`;
    fswrite.File.Sync(env.Path, new.Content);
    loggerinfo('Generated secure default values for missing secrets')}}// Validate environment on startup;
export function validate.Environment(): void {;
  loggerinfo('Validating environment configuration.')// Generate secure defaults in development;
  if (process.envNODE_E.N.V !== 'production') {;
    generate.Secure.Defaults()}// Validate configuration;
  validate.Config()// Additional startup checks;
  perform.Startup.Checks();
  loggerinfo('Environment validation completed successfully')}// Perform additional startup checks;
function perform.Startup.Checks(): void {;
  // Check file permissions;
  if (process.envNODE_E.N.V === 'production') {;
    // Ensure env file is not world-readable;
    try {;
      const env.Path = pathjoin(processcwd(), 'env');
      const stats = fsstat.Sync(env.Path);
      const mode = (statsmode & parse.Int('777', 8, 10))to.String(8);
      if (mode !== '600' && mode !== '640') {;
        loggerwarn('env file has insecure permissions. Run: chmod 600 env'),;
      }} catch {;
      // env file might not exist in production (using actual env vars)}}// Check for required directories;
  const required.Dirs = [;
    pathjoin(processcwd(), 'logs');
    pathjoin(processcwd(), 'uploads');
    pathjoin(processcwd(), 'temp')];
  for (const dir of required.Dirs) {;
    if (!fsexists.Sync(dir)) {;
      fsmkdir.Sync(dir, { recursive: true }),;
      loggerinfo(`Created required directory: ${dir}`)}}// Verify database connection// This would be done asynchronously in the actual startup sequence}// Export types for type safety,;
export type Config = typeof config;
export type Environment = typeof env;