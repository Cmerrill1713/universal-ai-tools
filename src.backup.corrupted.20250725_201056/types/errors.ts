/**;
 * Error Types and Constants for Consistent Error Handling* Shared between frontend and backend for uniform errorhandling*/

// Error Codes - Consistent across frontend and backend;
export enum Error.Code {;
  // Authentication & Authorization;
  UNAUTHORIZ.E.D = 'UNAUTHORIZ.E.D';
  FORBIDD.E.N = 'FORBIDD.E.N';
  INVALID_API_K.E.Y = 'INVALID_API_K.E.Y';
  TOKEN_EXPIR.E.D = 'TOKEN_EXPIR.E.D';
  INSUFFICIENT_PERMISSIO.N.S = 'INSUFFICIENT_PERMISSIO.N.S'// Validation;
  VALIDATION_ERR.O.R = 'VALIDATION_ERR.O.R';
  INVALID_REQUE.S.T = 'INVALID_REQUE.S.T';
  MISSING_REQUIRED_FIE.L.D = 'MISSING_REQUIRED_FIE.L.D';
  INVALID_FORM.A.T = 'INVALID_FORM.A.T';
  REQUEST_TOO_LAR.G.E = 'REQUEST_TOO_LAR.G.E'// Agent Related;
  AGENT_NOT_FOU.N.D = 'AGENT_NOT_FOU.N.D';
  AGENT_UNAVAILAB.L.E = 'AGENT_UNAVAILAB.L.E';
  AGENT_EXECUTION_ERR.O.R = 'AGENT_EXECUTION_ERR.O.R';
  AGENT_TIMEO.U.T = 'AGENT_TIMEO.U.T';
  AGENT_OVERLO.A.D = 'AGENT_OVERLO.A.D'// Orchestration;
  ORCHESTRATION_ERR.O.R = 'ORCHESTRATION_ERR.O.R';
  COORDINATION_FAIL.E.D = 'COORDINATION_FAIL.E.D';
  ORCHESTRATION_TIMEO.U.T = 'ORCHESTRATION_TIMEO.U.T';
  INVALID_ORCHESTRATION_MO.D.E = 'INVALID_ORCHESTRATION_MO.D.E'// Memory & Knowledge;
  MEMORY_NOT_FOU.N.D = 'MEMORY_NOT_FOU.N.D';
  MEMORY_STORAGE_ERR.O.R = 'MEMORY_STORAGE_ERR.O.R';
  KNOWLEDGE_SEARCH_ERR.O.R = 'KNOWLEDGE_SEARCH_ERR.O.R';
  EMBEDDING_ERR.O.R = 'EMBEDDING_ERR.O.R'// Tools;
  TOOL_NOT_FOU.N.D = 'TOOL_NOT_FOU.N.D';
  TOOL_EXECUTION_ERR.O.R = 'TOOL_EXECUTION_ERR.O.R';
  TOOL_TIMEO.U.T = 'TOOL_TIMEO.U.T';
  INVALID_TOOL_PARAMETE.R.S = 'INVALID_TOOL_PARAMETE.R.S'// System & Infrastructure;
  INTERNAL_SERVER_ERR.O.R = 'INTERNAL_SERVER_ERR.O.R';
  SERVICE_UNAVAILAB.L.E = 'SERVICE_UNAVAILAB.L.E';
  RATE_LIMIT_EXCEED.E.D = 'RATE_LIMIT_EXCEED.E.D';
  CIRCUIT_BREAKER_OP.E.N = 'CIRCUIT_BREAKER_OP.E.N';
  DATABASE_ERR.O.R = 'DATABASE_ERR.O.R';
  EXTERNAL_SERVICE_ERR.O.R = 'EXTERNAL_SERVICE_ERR.O.R'// Network & Communication;
  NETWORK_ERR.O.R = 'NETWORK_ERR.O.R';
  TIMEO.U.T = 'TIMEO.U.T';
  CONNECTION_ERR.O.R = 'CONNECTION_ERR.O.R';
  WEBSOCKET_ERR.O.R = 'WEBSOCKET_ERR.O.R'// File & Upload;
  FILE_NOT_FOU.N.D = 'FILE_NOT_FOU.N.D';
  FILE_TOO_LAR.G.E = 'FILE_TOO_LAR.G.E';
  INVALID_FILE_TY.P.E = 'INVALID_FILE_TY.P.E';
  UPLOAD_ERR.O.R = 'UPLOAD_ERR.O.R'// Speech & Audio;
  SPEECH_SYNTHESIS_ERR.O.R = 'SPEECH_SYNTHESIS_ERR.O.R';
  AUDIO_PROCESSING_ERR.O.R = 'AUDIO_PROCESSING_ERR.O.R';
  VOICE_NOT_AVAILAB.L.E = 'VOICE_NOT_AVAILAB.L.E'// Configuration;
  CONFIGURATION_ERR.O.R = 'CONFIGURATION_ERR.O.R';
  FEATURE_NOT_ENABL.E.D = 'FEATURE_NOT_ENABL.E.D';
  INVALID_CONFIGURATI.O.N = 'INVALID_CONFIGURATI.O.N'}// Error Severity Levels;
export enum Error.Severity {;
  L.O.W = 'low';
  MEDI.U.M = 'medium';
  HI.G.H = 'high';
  CRITIC.A.L = 'critical'}// Structured Error Interface;
export interface App.Error {;
  code: Error.Code,;
  message: string,;
  severity: Error.Severity,;
  details?: string | Record<string, unknown>;
  timestamp: string,;
  request.Id?: string;
  user.Id?: string;
  session.Id?: string;
  component?: string;
  stack?: string;
  context?: Record<string, unknown>}// Error Response for A.P.I;
export interface Error.Response {;
  success: false,;
  error instanceof Error ? error.message : String(error) App.Error;
  meta?: {;
    request.Id: string,;
    timestamp: string,;
    version: string,;
  }}// Validation Error Details;
export interface Validation.Error {;
  field: string,;
  value: any,;
  message: string,;
  constraint?: string;
};
export interface ValidationError.Response.extends Error.Response {;
  error instanceof Error ? error.message : String(error) App.Error & {;
    code: ErrorCodeVALIDATION_ERR.O.R,;
    validation.Errors: Validation.Error[],;
  }}// Rate Limit Error Details;
export interface RateLimit.Error.extends App.Error {;
  code: ErrorCodeRATE_LIMIT_EXCEED.E.D,;
  retry.After: number// seconds,;
  limit: number,;
  remaining: number,;
  reset.Time: string,;
}// Agent Error Details;
export interface Agent.Error.extends App.Error {;
  agent.Id: string,;
  agent.Name: string,;
  task?: string;
  execution.Time?: number;
}// Tool Error Details;
export interface Tool.Error.extends App.Error {;
  tool.Name: string,;
  parameters?: Record<string, unknown>;
  execution.Time?: number;
}// System Error Details;
export interface System.Error.extends App.Error {;
  system.Component: string,;
  resource.Usage?: {;
    memory: number,;
    cpu: number,;
}  dependency.Status?: Record<string, 'healthy' | 'degraded' | 'unhealthy'>}// Error Factory Functions for consistent errorcreation;
export class Error.Factory {;
  static create.Validation.Error(;
    message: string,;
    validation.Errors: Validation.Error[],;
    request.Id?: string): Validation.Error.Response {;
    return {;
      success: false,;
      error instanceof Error ? error.message : String(error){;
        code: ErrorCodeVALIDATION_ERR.O.R,;
        message;
        severity: ErrorSeverityMEDI.U.M,;
        timestamp: new Date()toIS.O.String(),;
        request.Id;
        validation.Errors;
      }};

  static create.Agent.Error(;
    agent.Id: string,;
    agent.Name: string,;
    message: string,;
    details?: any): Agent.Error {;
    return {;
      code: ErrorCodeAGENT_EXECUTION_ERR.O.R,;
      message;
      severity: ErrorSeverityHI.G.H,;
      timestamp: new Date()toIS.O.String(),;
      agent.Id;
      agent.Name;
      details;
    };

  static createRate.Limit.Error(limit: number, retry.After: number): Rate.Limit.Error {;
    return {;
      code: ErrorCodeRATE_LIMIT_EXCEED.E.D,;
      message: `Rate limit exceeded. Maximum ${limit} requests allowed.`,;
      severity: ErrorSeverityMEDI.U.M,;
      timestamp: new Date()toIS.O.String(),;
      retry.After;
      limit;
      remaining: 0,;
      reset.Time: new Date(Date.now() + retry.After * 1000)toIS.O.String(),;
    };

  static create.System.Error(component: string, message: string, details?: any): System.Error {;
    return {;
      code: ErrorCodeINTERNAL_SERVER_ERR.O.R,;
      message;
      severity: ErrorSeverityCRITIC.A.L,;
      timestamp: new Date()toIS.O.String(),;
      system.Component: component,;
      details;
    }}}// HT.T.P.Status Code Mapping;
export const ErrorCodeTo.Http.Status: Record<Error.Code, number> = {;
  [ErrorCodeUNAUTHORIZ.E.D]: 401;
  [ErrorCodeFORBIDD.E.N]: 403;
  [ErrorCodeINVALID_API_K.E.Y]: 401;
  [ErrorCodeTOKEN_EXPIR.E.D]: 401;
  [ErrorCodeINSUFFICIENT_PERMISSIO.N.S]: 403;
  [ErrorCodeVALIDATION_ERR.O.R]: 400;
  [ErrorCodeINVALID_REQUE.S.T]: 400;
  [ErrorCodeMISSING_REQUIRED_FIE.L.D]: 400;
  [ErrorCodeINVALID_FORM.A.T]: 400;
  [ErrorCodeREQUEST_TOO_LAR.G.E]: 413;
  [ErrorCodeAGENT_NOT_FOU.N.D]: 404;
  [ErrorCodeAGENT_UNAVAILAB.L.E]: 503;
  [ErrorCodeAGENT_EXECUTION_ERR.O.R]: 500;
  [ErrorCodeAGENT_TIMEO.U.T]: 408;
  [ErrorCodeAGENT_OVERLO.A.D]: 503;
  [ErrorCodeORCHESTRATION_ERR.O.R]: 500;
  [ErrorCodeCOORDINATION_FAIL.E.D]: 500;
  [ErrorCodeORCHESTRATION_TIMEO.U.T]: 408;
  [ErrorCodeINVALID_ORCHESTRATION_MO.D.E]: 400;
  [ErrorCodeMEMORY_NOT_FOU.N.D]: 404;
  [ErrorCodeMEMORY_STORAGE_ERR.O.R]: 500;
  [ErrorCodeKNOWLEDGE_SEARCH_ERR.O.R]: 500;
  [ErrorCodeEMBEDDING_ERR.O.R]: 500;
  [ErrorCodeTOOL_NOT_FOU.N.D]: 404;
  [ErrorCodeTOOL_EXECUTION_ERR.O.R]: 500;
  [ErrorCodeTOOL_TIMEO.U.T]: 408;
  [ErrorCodeINVALID_TOOL_PARAMETE.R.S]: 400;
  [ErrorCodeINTERNAL_SERVER_ERR.O.R]: 500;
  [ErrorCodeSERVICE_UNAVAILAB.L.E]: 503;
  [ErrorCodeRATE_LIMIT_EXCEED.E.D]: 429;
  [ErrorCodeCIRCUIT_BREAKER_OP.E.N]: 503;
  [ErrorCodeDATABASE_ERR.O.R]: 500;
  [ErrorCodeEXTERNAL_SERVICE_ERR.O.R]: 502;
  [ErrorCodeNETWORK_ERR.O.R]: 500;
  [ErrorCodeTIMEO.U.T]: 408;
  [ErrorCodeCONNECTION_ERR.O.R]: 500;
  [ErrorCodeWEBSOCKET_ERR.O.R]: 500;
  [ErrorCodeFILE_NOT_FOU.N.D]: 404;
  [ErrorCodeFILE_TOO_LAR.G.E]: 413;
  [ErrorCodeINVALID_FILE_TY.P.E]: 400;
  [ErrorCodeUPLOAD_ERR.O.R]: 500;
  [ErrorCodeSPEECH_SYNTHESIS_ERR.O.R]: 500;
  [ErrorCodeAUDIO_PROCESSING_ERR.O.R]: 500;
  [ErrorCodeVOICE_NOT_AVAILAB.L.E]: 404;
  [ErrorCodeCONFIGURATION_ERR.O.R]: 500;
  [ErrorCodeFEATURE_NOT_ENABL.E.D]: 501;
  [ErrorCodeINVALID_CONFIGURATI.O.N]: 500;
};