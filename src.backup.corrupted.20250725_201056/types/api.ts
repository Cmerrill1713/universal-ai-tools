/**;
 * Shared A.P.I.Types for Universal A.I.Tools* These types ensure consistency between frontend and backend*/

// Base A.P.I.Response Interface;
export interface Api.Response<T = any> {;
  success: boolean,;
  data?: T;
  error instanceof Error ? error.message : String(error)  Api.Error;
  meta?: Response.Meta;
}// Error Response Interface;
export interface Api.Error {;
  code: string,;
  message: string,;
  details?: string[];
  timestamp: string,;
  request.Id?: string;
  context?: Record<string, unknown>}// Response Metadata;
export interface Response.Meta {;
  request.Id: string,;
  timestamp: string,;
  processing.Time: number,;
  version: string,;
  pagination?: Pagination.Meta;
}// Pagination Interface;
export interface Pagination.Meta {;
  page: number,;
  limit: number,;
  total: number,;
  total.Pages: number,;
  has.Next: boolean,;
  has.Prev: boolean,;
}// Request Pagination Parameters;
export interface Pagination.Params {;
  page?: number;
  limit?: number;
  sort?: string;
  order?: 'asc' | 'desc';
}// Agent Types;
export interface Agent {;
  id: string,;
  name: string,;
  type: 'cognitive' | 'personal',;
  category: string,;
  status: 'active' | 'inactive' | 'error instanceof Error ? error.message : String(error);';
  capabilities: string[],;
  config: Agent.Config,;
  metrics?: Agent.Metrics;
};
export interface Agent.Config {;
  max.Tokens?: number;
  temperature?: number;
  model?: string;
  system.Prompt?: string;
  tools?: string[];
  memory?: boolean;
};
export interface Agent.Metrics {;
  total.Requests: number,;
  success.Rate: number,;
  average.Response.Time: number,;
  last.Used: string,;
  memory.Usage: number,;
}// Memory Types;
export interface Memory {;
  id: string,;
  type: 'semantic' | 'procedural' | 'episodic',;
  contentstring;
  metadata: Record<string, unknown>;
  tags: string[],;
  importance: number,;
  timestamp: string,;
  embedding?: number[];
};
export interface MemorySearch.Request {;
  query: string,;
  limit?: number;
  filters?: Record<string, unknown>;
  threshold?: number;
  include.Embeddings?: boolean;
};
export interface MemorySearch.Response {;
  memories: Memory[],;
  query: string,;
  total.Results: number,;
  search.Time: number,;
}// Tool Execution Types;
export interface ToolExecution.Request {;
  tool: string,;
  parameters: Record<string, unknown>;
  context?: Record<string, unknown>;
  agent.Id?: string;
};
export interface ToolExecution.Response {;
  result: any,;
  tool: string,;
  success: boolean,;
  execution.Time: number,;
  error instanceof Error ? error.message : String(error)  string;
  logs?: string[];
}// Orchestration Types;
export interface Orchestration.Request {;
  user.Request: string,;
  orchestration.Mode?: 'simple' | 'standard' | 'cognitive' | 'adaptive';
  context?: Record<string, unknown>;
  conversation.Id?: string;
  session.Id?: string;
};
export interface Orchestration.Response {;
  response: string,;
  agents.Used: string[],;
  reasoning?: string;
  confidence?: number;
  metrics: Orchestration.Metrics,;
};
export interface Orchestration.Metrics {;
  total.Time: number,;
  agent.Execution.Times: Record<string, number>;
  token.Usage: number,;
  complexity: 'low' | 'medium' | 'high',;
}// Knowledge Types;
export interface KnowledgeSearch.Request {;
  query: string,;
  sources?: string[];
  limit?: number;
  include.Metadata?: boolean;
};
export interface Knowledge.Item {;
  id: string,;
  title: string,;
  contentstring;
  source: string,;
  category: string,;
  metadata: Record<string, unknown>;
  relevance.Score?: number;
  last.Updated: string,;
}// Context Types;
export interface Context.Item {;
  id: string,;
  type: 'conversation' | 'document' | 'system',;
  contentstring;
  metadata: Record<string, unknown>;
  timestamp: string,;
  weight: number,;
}// Speech Types;
export interface SpeechSynthesis.Request {;
  text: string,;
  voice?: string;
  voice.Settings?: Voice.Settings;
  format?: 'mp3' | 'wav' | 'ogg';
};
export interface Voice.Settings {;
  stability?: number;
  similarity.Boost?: number;
  style?: number;
  use.Speaker.Boost?: boolean;
}// Web.Socket.Message Types;
export interface WebSocket.Message {;
  type: 'agent_status' | 'orchestration_progress' | 'error instanceof Error ? error.message : String(error) | 'heartbeat',;
  data: any,;
  timestamp: string,;
  session.Id?: string;
};
export interface AgentStatus.Message.extends Web.Socket.Message {;
  type: 'agent_status',;
  data: {;
    agent.Id: string,;
    status: 'idle' | 'busy' | 'error instanceof Error ? error.message : String(error),;
    current.Task?: string;
    progress?: number;
  };

export interface OrchestrationProgress.Message.extends Web.Socket.Message {;
  type: 'orchestration_progress',;
  data: {;
    orchestration.Id: string,;
    step: string,;
    progress: number,;
    current.Agent?: string;
    estimated.Time.Remaining?: number;
  }}// Authentication Types;
export interface Auth.Request {;
  api.Key?: string;
  service.Id?: string;
  permissions?: string[];
};
export interface Auth.Response {;
  authenticated: boolean,;
  user?: {;
    id: string,;
    permissions: string[],;
    rate.Limits: Record<string, number>;
  session?: {;
    id: string,;
    expires.At: string,;
  }}// Health Check Types;
export interface HealthCheck.Response {;
  status: 'healthy' | 'degraded' | 'unhealthy',;
  version: string,;
  uptime: number,;
  services: Record<string, Service.Health>;
  metrics: System.Metrics,;
};
export interface Service.Health {;
  status: 'healthy' | 'degraded' | 'unhealthy',;
  response.Time?: number;
  last.Check: string,;
  error instanceof Error ? error.message : String(error)  string;
};
export interface System.Metrics {;
  memory.Usage: number,;
  cpu.Usage: number,;
  active.Connections: number,;
  requests.Per.Minute: number,;
}// Export all types for easy importing;
export * from './websocket';
export * from './errors';