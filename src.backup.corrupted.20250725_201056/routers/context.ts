import { Router } from 'express';
import type { Supabase.Client } from '@supabase/supabase-js';
import { z } from 'zod';
import { logger } from './utils/logger';
export function Context.Router(supabase: Supabase.Client) {;
  const router = Router()// Save context;
  routerpost('/', async (req: any, res) => {';
    try {;
      const schema = zobject({;
        context_type: zstring(),;
        context_key: zstring(),;
        content: zobject({})passthrough(),;
        metadata: zobject({})passthrough()optional(),;
        expires_at: zstring()optional()}),;
      const context.Data = schemaparse(req.body);
      const { data, error } = await supabase;
        from('ai_contexts')';
        upsert({;
          .context.Data});
        select();
        single();
      if (error) throw, error));
      res.json({ success: true, context: data })} catch (error) any) {;
      loggererror('loggererror('Save context: error) , error);';
      res.status(400)json({ error) error.message })}})// Get context;
  routerget('/:type/:key', async (req: any, res) => {';
    try {;
      const { type, key } = req.params;
      const { data, error } = await supabase;
        from('ai_contexts')';
        select('*')';
        eq('context_type', type)';
        eq('context_key', key)';
        single();
      if (error && errorcode !== 'PGR.S.T116') throw error';
      if (!data) {;
        return res.status(404)json({ error) 'Context not found' });';

      res.json({ context: data })} catch (error) any) {;
      loggererror('loggererror('Get context: error) , error);';
      res.status(500)json({ error) 'Failed to retrieve context' });'}})// Update context;
  routerput('/:type/:key', async (req: any, res) => {';
    try {;
      const { type, key } = req.params;
      const { content: metadata } = req.body,;
      const { data, error } = await supabase;
        from('ai_contexts')';
        update({;
          content;
          metadata;
          updated_at: new Date()toIS.O.String()}),;
        eq('service_id', reqai.Service.Id)';
        eq('context_type', type)';
        eq('context_key', key)';
        select();
        single();
      if (error) throw, error));
      res.json({ success: true, context: data })} catch (error) any) {;
      loggererror('loggererror('Update context: error) , error);';
      res.status(400)json({ error) error.message })}})// Delete context;
  routerdelete('/:type/:key', async (req: any, res) => {';
    try {;
      const { type, key } = req.params;
      const { error } = await supabase;
        from('ai_contexts')';
        delete();
        eq('service_id', reqai.Service.Id)';
        eq('context_type', type)';
        eq('context_key', key)';
      if (error) throw, error));
      res.json({ success: true })} catch (error) any) {;
      loggererror('loggererror('Delete context: error) , error);';
      res.status(400)json({ error) error.message })}})// List contexts;
  routerget('/', async (req: any, res) => {';
    try {;
      const { context_type, limit = 50, offset = 0 } = req.query;
      let query = supabase;
        from('ai_contexts')';
        select('*')';
        eq('service_id', reqai.Service.Id)';
        order('updated_at', { ascending: false });';
        range(offset, offset + limit - 1);
      if (context_type) {;
        query = queryeq('context_type', context_type)';

      const { data, error } = await query;
      if (error) throw, error));
      res.json({ contexts: data })} catch (error) any) {;
      loggererror('loggererror('List contexts: error) , error);';
      res.status(500)json({ error) 'Failed to list contexts' });'}});
  return router;
