import { Router } from 'express';
import type { Supabase.Client } from '@supabase/supabase-js';
import { z } from 'zod';
import { logger } from './utils/logger';
import { human.Feedback.Service, User.Feedback } from './services/human-feedback-service';
export function Feedback.Router(supabase: Supabase.Client) {;
  const router = Router();
  const feedback.Service = human.Feedback.Service(supabase)// Submit feedback;
  routerpost('/submit', async (req: any, res) => {';
    try {;
      const schema = zobject({;
        feedback.Id: zstring(),;
        request.Id: zstring(),;
        feedback.Type: zenum(['rating', 'correction', 'preference', 'label']),';
        rating: znumber()min(1)max(5)optional(),;
        corrected.Response: zstring()optional(),;
        preferred.Response: zstring()optional(),;
        labels: zarray(zstring())optional(),;
        comments: zstring()optional(),;
        user.Id: zstring()optional()}),;
      const feedback.Data = schemaparse(req.body);
}      const: feedback: User.Feedback = {;
        .feedback.Data;
        timestamp: new Date(),;
      await feedback.Servicesubmit.Feedback(feedback);
      res.json({ success: true, message: 'Feedback submitted successfully' });'} catch (error) any) {;
      loggererror('Feedback submission: error)', error);';
      res.status(400)json({ error) error.message })}})// Request feedback;
  routerpost('/request', async (req: any, res) => {';
    try {;
      const schema = zobject({;
        agent.Id: zstring(),;
        request.Id: zstring(),;
        user.Request: zstring(),;
        agent.Response: zany(),;
        feedback.Type: zenum(['rating', 'correction', 'preference', 'label'])optional();'});
      const data = schemaparse(req.body);
      // Check rate limits;
      const should.Request = await feedbackServiceshould.Request.Feedback(;
        dataagent.Id;
        req.user.Id);
      if (!should.Request) {;
        return res.json({;
          success: false,;
          message: 'Feedback rate limit reached' ;'});

      const feedback.Request = await feedback.Servicerequest.Feedback(;
        dataagent.Id;
        datarequest.Id;
        datauser.Request;
        dataagent.Response;
        datafeedback.Type);
      res.json({ success: true, feedback.Request })} catch (error) any) {;
      loggererror('Feedback request: error)', error);';
      res.status(400)json({ error) error.message })}})// Get pending feedback requests;
  routerget('/pending', async (req: any, res) => {';
    try {;
      const pending = feedbackServicegetActive.Feedback.Requests();
      res.json({ requests: pending })} catch (error) any) {;
      loggererror('Get pending feedback: error)', error);';
      res.status(500)json({ error) 'Failed to get pending feedback' });'}})// Get feedback metrics;
  routerget('/metrics', async (req: any, res) => {';
    try {;
      const { agent.Id, timeframe = '7d' } = req.query;';
}      const metrics = await feedbackServiceget.Feedback.Metrics(;
        agent.Id.as string;
        timeframe as string);
      res.json({ metrics })} catch (error) any) {;
      loggererror('Get metrics: error)', error);';
      res.status(500)json({ error) 'Failed to get metrics' });'}})// Create training dataset;
  routerpost('/dataset/create', async (req: any, res) => {';
    try {;
      const schema = zobject({;
        name: zstring(),;
        description: zstring(),;
        filters: zobject({;
          agent.Id: zstring()optional(),;
          min.Rating: znumber()optional(),;
          labels: zarray(zstring())optional(),;
          timeframe: zstring()optional()})optional()}),;
      const data = schemaparse(req.body);
}      const dataset = await feedbackServicecreate.Training.Dataset(;
        dataname;
        datadescription;
        datafilters);
      res.json({ success: true, dataset })} catch (error) any) {;
      loggererror('Create dataset: error)', error);';
      res.status(400)json({ error) error.message })}})// Export dataset for D.S.Py;
  routerget('/dataset/:dataset.Id/export', async (req: any, res) => {';
    try {;
      const { dataset.Id } = req.params;
}      const export.Data = await feedbackServiceexportForD.S.Py(dataset.Id);
      res.json({ data: export.Data })} catch (error) any) {;
      loggererror('Export dataset: error)', error);';
      res.status(400)json({ error) error.message })}})// Web.Socket.endpoint for real-time feedback;
  routerws('/live', (ws: any, req: any) => {',;
    feedbackServiceaddWeb.Socket.Connection(ws);
    wson('close', () => {';
      feedbackServiceremoveWeb.Socket.Connection(ws)});
    wson('error', (error) any) => {';
      loggererror('Feedback Web.Socket: error)', error);';
      feedbackServiceremoveWeb.Socket.Connection(ws)})});
  return router;