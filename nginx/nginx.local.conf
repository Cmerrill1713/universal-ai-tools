# Universal AI Tools - Local Load Balancer Configuration
# Optimized for hybrid Go/Rust/TypeScript architecture

events {
    worker_connections 1024;
    use kqueue;
    multi_accept on;
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=chat:10m rate=30r/m;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/m;

    # Upstream Definitions with Health Checks and Load Balancing
    upstream rust_llm_router {
        least_conn;
        server 127.0.0.1:8003 max_fails=3 fail_timeout=30s;
        # Future: Add multiple Rust instances for scaling
        # server 127.0.0.1:8004 max_fails=3 fail_timeout=30s backup;
        keepalive 32;
    }

    upstream go_websocket {
        ip_hash; # Sticky sessions for WebSocket connections
        server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;
        # Future: Add multiple WebSocket instances
        # server 127.0.0.1:8081 max_fails=3 fail_timeout=30s backup;
        keepalive 16;
    }

    upstream go_api_gateway {
        least_conn;
        server 127.0.0.1:8001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream typescript_legacy {
        least_conn;
        server 127.0.0.1:9999 max_fails=3 fail_timeout=30s;
        # This will be phased out as we migrate to Go/Rust
        keepalive 16;
    }

    # Logging
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       '$request_time $upstream_response_time '
                       '$upstream_addr $upstream_status';

    access_log /opt/homebrew/var/log/nginx/access.log detailed;
    error_log /opt/homebrew/var/log/nginx/error.log warn;

    # Main Server Block
    server {
        listen 8000;
        server_name localhost;

        # Security Headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy strict-origin-when-cross-origin;

        # CORS Headers for API endpoints
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, Content-Type, Authorization, X-Request-ID";

        # Handle OPTIONS preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # ===========================================
        # RUST LLM ROUTER SERVICE (High Performance)
        # ===========================================

        # LLM Completions - Primary route to Rust service
        location /v1/completions {
            limit_req zone=chat burst=10 nodelay;
            proxy_pass http://rust_llm_router;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Connection "";
            
            # Optimized for LLM requests
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 90s;
            proxy_buffering off; # For streaming responses
            proxy_cache_bypass 1; # Always fresh for LLM
        }

        # LLM Router Health and Metrics
        location /llm/health {
            proxy_pass http://rust_llm_router/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        location /llm/metrics {
            proxy_pass http://rust_llm_router/metrics;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        location /llm/providers {
            proxy_pass http://rust_llm_router/providers/status;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        # ===========================================
        # GO WEBSOCKET SERVICE (Real-time)
        # ===========================================

        # WebSocket connections - Sticky sessions required
        location /ws {
            proxy_pass http://go_websocket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # WebSocket optimizations
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_connect_timeout 10s;
            proxy_buffering off;
        }

        # WebSocket service status and admin
        location /ws/status {
            proxy_pass http://go_websocket/status;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        location /ws/health {
            proxy_pass http://go_websocket/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        location /ws/broadcast {
            limit_req zone=auth burst=5 nodelay;
            proxy_pass http://go_websocket/broadcast;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header Authorization $http_authorization;
        }

        # ===========================================
        # GO API GATEWAY (Future Primary API)
        # ===========================================

        # v2 API routes - Next generation Go API Gateway
        location /api/v2/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://go_api_gateway/api/v1/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Connection "";
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Direct Go API Gateway routes
        location /api/v1/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://go_api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Connection "";
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Go API Gateway health
        location /gateway/health {
            proxy_pass http://go_api_gateway/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        # ===========================================
        # TYPESCRIPT LEGACY API (Being Phased Out)
        # ===========================================

        # Legacy API routes - TypeScript backend (temporary)
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://typescript_legacy;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Connection "";
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # ===========================================
        # LOAD BALANCER HEALTH & MONITORING
        # ===========================================

        # Comprehensive health check
        location /health {
            access_log off;
            return 200 '{
                "status": "healthy",
                "timestamp": "$time_iso8601",
                "services": {
                    "rust_llm_router": "127.0.0.1:8003",
                    "go_websocket": "127.0.0.1:8080", 
                    "go_api_gateway": "127.0.0.1:8001",
                    "typescript_legacy": "127.0.0.1:9999"
                },
                "load_balancer": "nginx",
                "architecture": "hybrid"
            }';
            add_header Content-Type application/json;
        }

        # Load balancer status with upstream health
        location /lb/status {
            access_log off;
            return 200 '{
                "load_balancer": {
                    "status": "active",
                    "method": "least_conn",
                    "health_checks": "enabled",
                    "rate_limiting": "active"
                },
                "upstreams": {
                    "rust_llm_router": {"servers": 1, "method": "least_conn"},
                    "go_websocket": {"servers": 1, "method": "ip_hash"},
                    "go_api_gateway": {"servers": 1, "method": "least_conn"},
                    "typescript_legacy": {"servers": 1, "method": "least_conn"}
                }
            }';
            add_header Content-Type application/json;
        }

        # Detailed metrics endpoint
        location /metrics {
            access_log off;
            return 200 '{
                "nginx_version": "$nginx_version",
                "worker_connections": 1024,
                "rate_limits": {
                    "api": "100r/m",
                    "chat": "30r/m", 
                    "auth": "10r/m"
                },
                "gzip": "enabled",
                "keepalive": "65s"
            }';
            add_header Content-Type application/json;
        }

        # ===========================================
        # ERROR HANDLING & FALLBACKS
        # ===========================================

        # Custom error pages
        error_page 404 /404.json;
        location = /404.json {
            internal;
            return 404 '{"error": "Not Found", "message": "The requested endpoint does not exist"}';
            add_header Content-Type application/json;
        }

        error_page 500 502 503 504 /50x.json;
        location = /50x.json {
            internal;
            return 500 '{"error": "Internal Server Error", "message": "Service temporarily unavailable"}';
            add_header Content-Type application/json;
        }

        # Rate limit exceeded
        error_page 429 /429.json;
        location = /429.json {
            internal;
            return 429 '{"error": "Rate Limited", "message": "Too many requests, please slow down"}';
            add_header Content-Type application/json;
        }
    }

    # ===========================================
    # SSL/HTTPS SERVER (Future Production)
    # ===========================================
    
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost;
    #     
    #     ssl_certificate /path/to/cert.pem;
    #     ssl_certificate_key /path/to/key.pem;
    #     ssl_session_cache shared:SSL:1m;
    #     ssl_session_timeout 5m;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers on;
    #     
    #     # Include same location blocks as HTTP server
    # }
}