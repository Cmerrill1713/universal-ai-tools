# Universal AI Tools - Production Dockerfile
# Multi-stage build for optimized production deployment
# Supports Node.js/TypeScript backend with Python DSPy orchestrator

FROM node:20-alpine AS base

# Install system dependencies and Python
RUN apk add --no-cache \
    python3 \
    py3-pip \
    make \
    g++ \
    cairo-dev \
    pango-dev \
    giflib-dev \
    && ln -sf python3 /usr/bin/python

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Stage 1: Dependencies
FROM base AS dependencies

# Install all dependencies (including dev dependencies for build)
RUN npm ci --include=dev

# Stage 2: Python Dependencies
FROM dependencies AS python-deps

# Copy Python requirements
COPY src/services/dspy-orchestrator/requirements.txt ./
RUN pip3 install --no-cache-dir -r requirements.txt

# Stage 3: Build
FROM python-deps AS build

# Copy source code
COPY src/ ./src/
COPY scripts/ ./scripts/

# Build TypeScript
RUN npm run build:prod

# Remove dev dependencies after build
RUN npm prune --omit=dev

# Stage 4: Production
FROM node:20-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    python3 \
    py3-pip \
    dumb-init \
    curl \
    && addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy Python dependencies from python-deps stage
COPY --from=python-deps /usr/local/lib/python3.*/site-packages/ /usr/local/lib/python3.11/site-packages/

# Copy built application from build stage
COPY --from=build --chown=nextjs:nodejs /app/dist ./dist
COPY --from=build --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nextjs:nodejs /app/package.json ./package.json

# Copy Python DSPy service files
COPY --chown=nextjs:nodejs src/services/dspy-orchestrator/ ./src/services/dspy-orchestrator/

# Copy migration files and scripts
COPY --chown=nextjs:nodejs migrations/ ./migrations/
COPY --chown=nextjs:nodejs scripts/health-check.js ./scripts/health-check.js

# Create necessary directories
RUN mkdir -p /app/logs /app/temp /app/models \
    && chown -R nextjs:nodejs /app/logs /app/temp /app/models

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 9999

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:9999/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/server.js"]

# Metadata
LABEL maintainer="Universal AI Tools <contact@universal-ai-tools.com>"
LABEL version="1.0.0"
LABEL description="Universal AI Tools - Production-ready AI orchestration platform"
LABEL org.opencontainers.image.source="https://github.com/Cmerrill1713/universal-ai-tools"