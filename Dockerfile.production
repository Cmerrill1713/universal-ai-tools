# Production Dockerfile for Universal AI Tools with Device Authentication
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++ git

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies
RUN npm ci --only=production && \
    npm cache clean --force

# Copy source code
COPY src ./src
COPY deploy ./deploy

# Build TypeScript
RUN npm run build

# Production image
FROM node:20-alpine

# Install runtime dependencies
RUN apk add --no-cache \
    openssl \
    ca-certificates \
    tzdata \
    tini

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy built application
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./

# Copy SSL certificates directory structure
RUN mkdir -p /etc/ssl/certs /etc/ssl/private && \
    chown -R nodejs:nodejs /etc/ssl

# Create log directory
RUN mkdir -p /var/log/universal-ai-tools && \
    chown -R nodejs:nodejs /var/log/universal-ai-tools

# Set environment
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=1536" \
    PORT=443

# Expose ports
EXPOSE 443 8080 9090

# Switch to non-root user
USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:${PORT}/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"

# Use tini for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["node", "dist/server.js"]