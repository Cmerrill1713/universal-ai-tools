version: '3.8'

services:
  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.53
    container_name: jaeger
    ports:
      - '16686:16686' # Jaeger UI
      - '14250:14250' # gRPC
      - '14268:14268' # HTTP
      - '14269:14269' # Admin HTTP
      - '6831:6831/udp' # UDP
      - '6832:6832/udp' # UDP
      - '5778:5778' # Config server
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    command:
      - '--log-level=debug'
    networks:
      - telemetry

  # Zipkin - Alternative tracing backend
  zipkin:
    image: openzipkin/zipkin:3.2
    container_name: zipkin
    ports:
      - '9411:9411'
    environment:
      - STORAGE_TYPE=mem
    networks:
      - telemetry

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.49.1
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - telemetry

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    ports:
      - '3003:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - telemetry

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.92.0
    container_name: otel-collector
    command: ['--config=/etc/otel-collector-config.yml']
    volumes:
      - ./monitoring/otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - '4317:4317' # OTLP gRPC receiver
      - '4318:4318' # OTLP HTTP receiver
      - '8888:8888' # Prometheus metrics
      - '8889:8889' # Prometheus metrics (alternative)
      - '13133:13133' # Health check
    depends_on:
      - jaeger
      - prometheus
    networks:
      - telemetry

  # AlertManager - Alert routing and management
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    ports:
      - '9093:9093'
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    networks:
      - telemetry

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - '9100:9100'
    networks:
      - telemetry

  # Redis Exporter - Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.58.0
    container_name: redis-exporter
    command:
      - '--redis.addr=redis://redis:6379'
    ports:
      - '9121:9121'
    depends_on:
      - redis
    networks:
      - telemetry

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.4
    container_name: loki
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - telemetry

  # Promtail - Log shipper
  promtail:
    image: grafana/promtail:2.9.4
    container_name: promtail
    volumes:
      - /var/log:/var/log:ro
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - telemetry

  # Redis for caching and session storage
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - '6380:6379'
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - telemetry

  # Test data generator for validation
  test-data-generator:
    image: node:20-alpine
    container_name: test-data-generator
    working_dir: /app
    volumes:
      - .:/app
    command: sh -c "npm install && node scripts/generate-test-data.js"
    depends_on:
      - prometheus
      - jaeger
      - otel-collector
    networks:
      - telemetry
    profiles:
      - testing

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  loki_data:
  redis_data:

networks:
  telemetry:
    driver: bridge
